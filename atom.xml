<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucky Dog&#39;s blogs</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-08-22T06:37:40.904Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringSecurity中的异常处理</title>
    <link href="http://example.com/post/6e466a9f.html"/>
    <id>http://example.com/post/6e466a9f.html</id>
    <published>2022-08-21T13:38:13.000Z</published>
    <updated>2022-08-22T06:37:40.904Z</updated>
    
    <content type="html"><![CDATA[<p>在<strong>认证失败</strong>或者是<strong>授权失败</strong>的情况下也能和我们的接口一样返回相同结构的<code>json</code>。</p><p>这样可以让前端能对响应进行统一的处理。要实现这个功能我们需要知道<code>SpringSecurity</code>的异常处理机制。</p><p>例如：当我们登录时</p><p>如果登录失败，返回的<code>JSON</code>如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-08-21T14:00:09.643+00:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">403</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Forbidden&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/user/login&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>如果登录成功，返回的<code>JSON</code>如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;登陆成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIzYjg0MDEzZTk4MjA0OWViYmQwMTUxZTVlYTViMjllYSIsInN1YiI6IjMiLCJpc3MiOiJzZyIsImlhdCI6MTY2MTA5MDUzNCwiZXhwIjoxNjYxMDk0MTM0fQ.4gxXmtTBqpIE7TpuTGnpCxlkSOw7ikOagzLypc2pQPU&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>为了统一<code>JSON</code>的格式</p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E6%8E%88%E6%9D%83%5Cimage-20211214144425527-16611501787821.png" alt="image-20211214144425527"></p><p>在<code>SpringSecurity</code>中，如果我们在认证或者授权的过程中出现了异常会被<code>ExceptionTranslationFilter</code>捕获到。在<code>ExceptionTranslationFilter</code>中会去判断是认证失败还是授权失败出现的异常。</p><blockquote><p>注意：在认证授权的过程中发生的任何异常都会被抛出，也就是说在控制台是看不见的。当程序在认证授权过程中出问题时，需要DEBUG去查看，然后<code>try...catch</code>捕获异常，看看是什么原因报错。</p></blockquote><ul><li><p>如果是<strong>认证过程</strong>中出现的异常会被封装成<code>AuthenticationException</code>然后调用<font color="blue"><code>AuthenticationEntryPoint</code></font>对象的方法去进行异常处理。</p></li><li><p>如果是<strong>授权过程</strong>中出现的异常会被封装成<code>AccessDeniedException</code>然后调用<font color="blue"><code>AccessDeniedHandler</code></font>对象的方法去进行异常处理。</p></li></ul><h3 id="自定义异常处理"><a href="#自定义异常处理" class="headerlink" title="自定义异常处理"></a>自定义异常处理</h3><p>如果我们需要自定义异常处理，我们只需要自定义<font color="blue"><code>AuthenticationEntryPoint</code></font>和<font color="blue"><code>AccessDeniedHandler</code></font>然后配置给<code>SpringSecurity</code>即可。</p><ol><li><p>创建一个包 <code>handler</code></p></li><li><p>自定义实现类</p><ol><li><p>实现<font color="blue"><code>AuthenticationEntryPoint</code></font>接口【处理认证过程中】</p><ol><li><p>首先需要定义一个响应对象，<code>new ResponseResult(403, &quot;权限不足&quot;);</code></p><p>认证失败响应码可以是401，或者是<code>HttpStatus.UNAUTHORIZED.value()</code>。</p></li><li><p>将对象序列化为<code>JSON</code>字符串<code>JSON.toJSONString()</code></p></li><li><p>使用<code>WebUtils</code>工具类，将字符串写到<code>response</code>中</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthenticationEntryPointImpl</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationEntryPoint</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(<span class="number">401</span>, <span class="string">&quot;认证失败请重新登录&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(result);</span><br><span class="line">        WebUtils.renderString(response,json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>实现<font color="blue"><code>AccessDeniedHandler</code></font>接口【处理授权过程中】</p><p>过程和上面一样</p><p>权限不足响应码可以是403，或者是<code>HttpStatus.FORBIDDEN.value()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessDeniedHandlerImpl</span> <span class="keyword">implements</span> <span class="title class_">AccessDeniedHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AccessDeniedException e)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(<span class="number">403</span>, <span class="string">&quot;权限不足&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(result);</span><br><span class="line">        WebUtils.renderString(httpServletResponse,jsonString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>配置<code>SpringSecurity</code>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationEntryPoint authenticationEntryPoint;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置异常处理器。</span></span><br><span class="line">        http.exceptionHandling()</span><br><span class="line">            .authenticationEntryPoint(authenticationEntryPoint)</span><br><span class="line">            .accessDeniedHandler(accessDeniedHandler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><code>WebUtils</code>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebUtils</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字符串渲染到客户端</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 渲染对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string 待渲染的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">renderString</span><span class="params">(HttpServletResponse response, String string)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            response.setStatus(<span class="number">200</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().print(string);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还拿之前的举例</p><p>例如：当我们登录时</p><p>如果登录失败，返回的<code>JSON</code>如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">403</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;认证失败请重新登录&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>如果登录成功，返回的<code>JSON</code>如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;登陆成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIzYjg0MDEzZTk4MjA0OWViYmQwMTUxZTVlYTViMjllYSIsInN1YiI6IjMiLCJpc3MiOiJzZyIsImlhdCI6MTY2MTA5MDUzNCwiZXhwIjoxNjYxMDk0MTM0fQ.4gxXmtTBqpIE7TpuTGnpCxlkSOw7ikOagzLypc2pQPU&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">使用SpringSecurity的异常处理的过滤器对向前端的响应进行统一。</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/category/Spring/"/>
    
    
    <category term="Spring-Security" scheme="http://example.com/tag/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Security授权</title>
    <link href="http://example.com/post/eb53ef22.html"/>
    <id>http://example.com/post/eb53ef22.html</id>
    <published>2022-08-20T10:04:25.000Z</published>
    <updated>2022-08-22T06:34:57.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="授权系统的作用"><a href="#授权系统的作用" class="headerlink" title="授权系统的作用"></a>授权系统的作用</h1><p>例如一个学校图书馆的管理系统，如果是普通学生登录就能看到借书还书相关的功能，不可能让他看到并且去使用添加书籍信息，删除书籍信息等功能。但是如果是一个图书馆管理员的账号登录了，应该就能看到并使用添加书籍信息，删除书籍信息等功能。</p><p>​总结起来就是<font color="red"><strong>不同的用户可以使用不同的功能</strong></font>。这就是权限系统要去实现的效果。</p><p>​我们不能只依赖前端去判断用户的权限来选择显示哪些菜单哪些按钮。因为如果只是这样，如果有人知道了对应功能的接口地址就可以不通过前端，直接去发送请求来实现相关功能操作。</p><p>​所以我们还需要在后台进行用户权限的判断，判断当前用户是否有相应的权限，必须具有所需权限才能进行相应的操作。</p><h1 id="授权的基本流程"><a href="#授权的基本流程" class="headerlink" title="授权的基本流程"></a>授权的基本流程</h1><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E6%8E%88%E6%9D%83%5Cimage-20211214144425527.png" alt="image-20211214144425527"></p><p>在<code>SpringSecurity</code>中，会使用默认的<font color="blue"><code>FilterSecurityInterceptor</code></font>来进行权限校验。在<code>FilterSecurityInterceptor</code>中会从<code>SecurityContextHolder</code>获取其中的<code>Authentication</code>，然后获取其中的权限信息。当前用户是否拥有访问当前资源所需的权限。</p><p>所以我们在项目中<strong>只需要把当前登录用户的权限信息</strong>也存入<code>Authentication</code>。</p><p>然后设置我们的资源所需要的权限即可。</p><p>在讲解<a href="https://luckydog-tjs.vercel.app/post/e123c807.html"><strong>登录认证详解</strong></a>时，我们有一些遗留代码没有写，都是关于权限的。如下：</p><ul><li><p>在<code>UserDetailsService</code>接口的实现时，遗留了查询用户的权限，并封装到<code>UserDetails</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MenuMapper menuMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">//根据传入了Passward查询用户</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getUserName,username);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> service.getOne(queryWrapper);</span><br><span class="line">        <span class="comment">//如果没有查询到用户就抛出异常</span></span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(user))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;1111&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// TODO 查询对应的权限</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginUser</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在实现认证过滤器时，遗留了获取权限信息封装到<code>Authentication</code>中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//首先需要获取token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> httpServletRequest.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//判断token是否为Null</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(token)) &#123;</span><br><span class="line">            filterChain.doFilter(httpServletRequest, httpServletResponse);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如何不为空，解析token，获得了UserId</span></span><br><span class="line">        String userId;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtil.parseJWT(token);</span><br><span class="line">            userId = claims.getSubject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;toen非法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据UserId查redis获取用户数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;login:&quot;</span>+userId;</span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">LoginUser</span> <span class="operator">=</span> redisCache.getCacheObject(key);</span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(LoginUser))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//然后封装Authentication对象存入SecurityContextHolder</span></span><br><span class="line">        <span class="comment">// TODO 获取权限信息封装到Authentication中</span></span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(LoginUser,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(httpServletRequest,httpServletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>在<code>SpringSecurity</code>中，用什么表示权限？</p><p>权限其实就是 <font color="blue"><strong>带有特殊意义的字符串</strong></font>。</p></blockquote><h1 id="RBAC权限模型"><a href="#RBAC权限模型" class="headerlink" title="RBAC权限模型"></a>RBAC权限模型</h1><p><code>RBAC</code>权限模型（Role-Based Access Control）即：<font color="red"><strong>基于角色的权限控制</strong></font>。这是目前最常被开发者使用也是相对易用、通用权限模型。</p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E6%8E%88%E6%9D%83%5Cimage-20220821202618630.png" alt="image-20220821202618630"></p><p>基本表：</p><ul><li>sys_user：用户表，记录用户的基本信息。</li><li>sys_role：角色表，记录一些角色信息，比如 项目经理、程序员，项目组组长….</li><li>sys_menu：权限表，记录一些权限信息，比如，删除权限，更新权限等等…</li></ul><p>关系表：</p><ul><li>sys_user_role：用户和角色是多对多的关系，一个用户可以有多个角色，一个角色可以被多个用户所拥有【这个表描述，一个用户有哪些角色】</li><li>sys_role_menu：角色和权限也是多对多关系【这个表描述，一个角色有哪些权限】</li></ul><p>这样就可以描述了 一个用户有哪些权限了。</p><p>当我们要查询一个用户有哪些权限时，<code>SQL</code>语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">DISTINCT m.`perms`</span><br><span class="line">FROM</span><br><span class="line">sys_user_role ur</span><br><span class="line">LEFT JOIN `sys_role` r ON ur.`role_id` = r.`id`</span><br><span class="line">LEFT JOIN `sys_role_menu` rm ON ur.`role_id` = rm.`role_id`</span><br><span class="line">LEFT JOIN `sys_menu` m ON m.`id` = rm.`menu_id`</span><br><span class="line">WHERE</span><br><span class="line">user_id = 2</span><br><span class="line">AND r.`status` = 0</span><br><span class="line">AND m.`status` = 0</span><br></pre></td></tr></table></figure><h1 id="授权过程"><a href="#授权过程" class="headerlink" title="授权过程"></a>授权过程</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>建表语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS = 0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for sys_menu</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `sys_menu`;</span><br><span class="line">CREATE TABLE `sys_menu`  (</span><br><span class="line">  `id` bigint NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `menu_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;菜单名&#x27;,</span><br><span class="line">  `path` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;路由地址&#x27;,</span><br><span class="line">  `component` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;组件路径&#x27;,</span><br><span class="line">  `visible` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;菜单状态（0显示 1隐藏）&#x27;,</span><br><span class="line">  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;菜单状态（0正常 1停用）&#x27;,</span><br><span class="line">  `perms` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;权限标识&#x27;,</span><br><span class="line">  `icon` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT &#x27;#&#x27; COMMENT &#x27;菜单图标&#x27;,</span><br><span class="line">  `create_by` bigint NULL DEFAULT NULL,</span><br><span class="line">  `create_time` datetime NULL DEFAULT NULL,</span><br><span class="line">  `update_by` bigint NULL DEFAULT NULL,</span><br><span class="line">  `update_time` datetime NULL DEFAULT NULL,</span><br><span class="line">  `del_flag` int NULL DEFAULT 0 COMMENT &#x27;是否删除（0未删除 1已删除）&#x27;,</span><br><span class="line">  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;备注&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci COMMENT = &#x27;菜单表&#x27; ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of sys_menu</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `sys_menu` VALUES (2, &#x27;部门管理&#x27;, &#x27;dept&#x27;, &#x27;system/dept/index&#x27;, &#x27;0&#x27;, &#x27;0&#x27;, &#x27;system:dept:index&#x27;, &#x27;#&#x27;, NULL, NULL, NULL, NULL, 0, NULL);</span><br><span class="line">INSERT INTO `sys_menu` VALUES (3, &#x27;测试&#x27;, &#x27;test&#x27;, &#x27;system/test/index&#x27;, &#x27;0&#x27;, &#x27;0&#x27;, &#x27;system:test:index&#x27;, &#x27;#&#x27;, NULL, NULL, NULL, NULL, 0, NULL);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for sys_role</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `sys_role`;</span><br><span class="line">CREATE TABLE `sys_role`  (</span><br><span class="line">  `id` bigint NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `role_key` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;角色权限字符串&#x27;,</span><br><span class="line">  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;角色状态（0正常 1停用）&#x27;,</span><br><span class="line">  `del_flag` int NULL DEFAULT 0 COMMENT &#x27;del_flag&#x27;,</span><br><span class="line">  `create_by` bigint NULL DEFAULT NULL,</span><br><span class="line">  `create_time` datetime NULL DEFAULT NULL,</span><br><span class="line">  `update_by` bigint NULL DEFAULT NULL,</span><br><span class="line">  `update_time` datetime NULL DEFAULT NULL,</span><br><span class="line">  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;备注&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci COMMENT = &#x27;角色表&#x27; ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of sys_role</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `sys_role` VALUES (3, &#x27;CEO&#x27;, &#x27;ceo&#x27;, &#x27;0&#x27;, 0, NULL, NULL, NULL, NULL, NULL);</span><br><span class="line">INSERT INTO `sys_role` VALUES (4, &#x27;Coder&#x27;, &#x27;coder&#x27;, &#x27;0&#x27;, 0, NULL, NULL, NULL, NULL, NULL);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for sys_role_menu</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `sys_role_menu`;</span><br><span class="line">CREATE TABLE `sys_role_menu`  (</span><br><span class="line">  `role_id` bigint NOT NULL AUTO_INCREMENT COMMENT &#x27;角色ID&#x27;,</span><br><span class="line">  `menu_id` bigint NOT NULL DEFAULT 0 COMMENT &#x27;菜单id&#x27;,</span><br><span class="line">  PRIMARY KEY (`role_id`, `menu_id`) USING BTREE,</span><br><span class="line">  INDEX `menu_id`(`menu_id`) USING BTREE,</span><br><span class="line">  CONSTRAINT `menu_id` FOREIGN KEY (`menu_id`) REFERENCES `sys_menu` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,</span><br><span class="line">  CONSTRAINT `role_id` FOREIGN KEY (`role_id`) REFERENCES `sys_role` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT</span><br><span class="line">) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of sys_role_menu</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `sys_role_menu` VALUES (3, 2);</span><br><span class="line">INSERT INTO `sys_role_menu` VALUES (3, 3);</span><br><span class="line">INSERT INTO `sys_role_menu` VALUES (4, 3);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for sys_user</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `sys_user`;</span><br><span class="line">CREATE TABLE `sys_user`  (</span><br><span class="line">  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,</span><br><span class="line">  `user_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;用户名&#x27;,</span><br><span class="line">  `nick_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;昵称&#x27;,</span><br><span class="line">  `password` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;密码&#x27;,</span><br><span class="line">  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;账号状态（0正常 1停用）&#x27;,</span><br><span class="line">  `email` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">  `phonenumber` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;手机号&#x27;,</span><br><span class="line">  `sex` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;用户性别（0男，1女，2未知）&#x27;,</span><br><span class="line">  `avatar` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;头像&#x27;,</span><br><span class="line">  `user_type` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT &#x27;1&#x27; COMMENT &#x27;用户类型（0管理员，1普通用户）&#x27;,</span><br><span class="line">  `create_by` bigint NULL DEFAULT NULL COMMENT &#x27;创建人的用户id&#x27;,</span><br><span class="line">  `create_time` datetime NULL DEFAULT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `update_by` bigint NULL DEFAULT NULL COMMENT &#x27;更新人&#x27;,</span><br><span class="line">  `update_time` datetime NULL DEFAULT NULL COMMENT &#x27;更新时间&#x27;,</span><br><span class="line">  `del_flag` int NULL DEFAULT 0 COMMENT &#x27;删除标志（0代表未删除，1代表已删除）&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci COMMENT = &#x27;用户表&#x27; ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of sys_user</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `sys_user` VALUES (3, &#x27;TJS&#x27;, &#x27;111&#x27;, &#x27;$2a$10$1s.BtZ6Ay/nU7VB/cgaTv.PiYezHYWOLntRsUqFgter/hsMDViZ0K&#x27;, &#x27;0&#x27;, NULL, NULL, NULL, NULL, &#x27;1&#x27;, NULL, NULL, NULL, NULL, 0);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for sys_user_role</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `sys_user_role`;</span><br><span class="line">CREATE TABLE `sys_user_role`  (</span><br><span class="line">  `user_id` bigint NOT NULL AUTO_INCREMENT COMMENT &#x27;用户id&#x27;,</span><br><span class="line">  `role_id` bigint NOT NULL DEFAULT 0 COMMENT &#x27;角色id&#x27;,</span><br><span class="line">  PRIMARY KEY (`user_id`, `role_id`) USING BTREE,</span><br><span class="line">  INDEX `rold_id`(`role_id`) USING BTREE,</span><br><span class="line">  CONSTRAINT `rold_id` FOREIGN KEY (`role_id`) REFERENCES `sys_role` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,</span><br><span class="line">  CONSTRAINT `user_id` FOREIGN KEY (`user_id`) REFERENCES `sys_user` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of sys_user_role</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `sys_user_role` VALUES (3, 3);</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS = 1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建<font color="red"><strong>权限实体类</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(value=&quot;sys_menu&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Menu</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">54979041104113736L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String menuName;<span class="comment">//菜单名</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String path;<span class="comment">//路由地址</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String component;<span class="comment">//组件路径</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String visible;<span class="comment">//菜单状态（0显示 1隐藏）</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String status;<span class="comment">//菜单状态（0正常 1停用）</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String perms;<span class="comment">//权限标识</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> String icon; <span class="comment">//菜单图标</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long updateBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;<span class="comment">//是否删除（0未删除 1已删除）</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> String remark;<span class="comment">//备注</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="从数据库查询权限信息"><a href="#从数据库查询权限信息" class="headerlink" title="从数据库查询权限信息"></a>从数据库查询权限信息</h2><p>我们只需要根据<font color="red"><strong>用户id去查询到其所对应的权限信息</strong></font>即可。</p><p>定义一个<font color="blue"><code>MenuMapper</code></font>，在Mapper包下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MenuMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Menu&gt; &#123;</span><br><span class="line">    List&lt;String&gt; <span class="title function_">selectPermsByUserId</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件在 resources&#x2F;Mapper下创建<code>MenuMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.Mapper.MenuMapper&quot;</span>&gt;</span><span class="comment">&lt;!--注意这个命名空间别出错--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPermsByUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            DISTINCT m.`perms`</span><br><span class="line">        FROM</span><br><span class="line">            sys_user_role ur</span><br><span class="line">                LEFT JOIN `sys_role` r ON ur.`role_id` = r.`id`</span><br><span class="line">                LEFT JOIN `sys_role_menu` rm ON ur.`role_id` = rm.`role_id`</span><br><span class="line">                LEFT JOIN `sys_menu` m ON m.`id` = rm.`menu_id`</span><br><span class="line">        WHERE</span><br><span class="line">            user_id = #&#123;userid&#125;<span class="comment">&lt;!--user_id需要使用占位符--&gt;</span></span><br><span class="line">          AND r.`status` = 0</span><br><span class="line">          AND m.`status` = 0</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在配置文件中，配置如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/Mapper/**/*.xml</span></span><br><span class="line">  <span class="comment">#这表明 classpath下，Mapper包中，任意层级包，任意以xml为结尾的文件。</span></span><br></pre></td></tr></table></figure><p>然后我们要修改UserDetails的实现类</p><p>因为我们要把权限信息封装进去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="comment">//@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginUser</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; permissions;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储SpringSecurity所需要的权限信息的集合</span></span><br><span class="line">    <span class="meta">@JSONField(serialize = false)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;SimpleGrantedAuthority&gt; authorities;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginUser</span><span class="params">(User user, List&lt;String&gt; permissions)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">        <span class="built_in">this</span>.permissions = permissions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">if</span>(!Objects.isNull(authorities))<span class="keyword">return</span> authorities;</span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(permissions))<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        authorities = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String permission : permissions) &#123;</span><br><span class="line">            <span class="type">SimpleGrantedAuthority</span> <span class="variable">authority</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(permission);</span><br><span class="line">            authorities.add(authority);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getUserName() ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要说明的是：</p><ul><li><p><code>private List&lt;String&gt; permissions;</code>代表权限字符串集合。</p></li><li><p><code>private List&lt;SimpleGrantedAuthority&gt; authorities;</code>代表权限集合，我们要把<code>LoginUser</code>存入到<code>Redis</code>当中，默认情况下不会将<code>SimpleGrantedAuthority</code>进行序列化的，到时候会出问题报异常，因此需要使用<code>@JSONField(serialize = false)</code>禁止让他序列化。</p></li><li><p><code>getAuthorities()</code>：这个方法是用来获取权限信息，需要返回权限信息的集合。</p><p>方法体内就是<font color="red"><strong>把<code>List&lt;String&gt;</code>转换为<code>List&lt;SimpleGrantedAuthority&gt;</code>。</strong></font></p></li><li><p><code>SimpleGrantedAuthority</code>：这个类是<code>GrantedAuthority</code>接口的实现类，<strong>构造方法是传入一个字符串</strong>。</p></li><li><p>还新增了一个构造方法。<code>public LoginUser(User user, List&lt;String&gt; permissions)</code>。</p></li></ul><p>在<code>UserDetailsService</code>接口的实现时，查询用户的权限，并封装到<code>UserDetails</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MenuMapper menuMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">//根据传入了Passward查询用户</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getUserName,username);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> service.getOne(queryWrapper);</span><br><span class="line">        <span class="comment">//如果没有查询到用户就抛出异常</span></span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(user))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;1111&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// TODO 查询对应的权限</span></span><br><span class="line">        List&lt;String&gt; list = menuMapper.selectPermsByUserId(user.getId());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginUser</span>(user,list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="封装权限信息到Authentication中。"><a href="#封装权限信息到Authentication中。" class="headerlink" title="封装权限信息到Authentication中。"></a>封装权限信息到<code>Authentication</code>中。</h2><p>此时，<code>UserDetails</code>【实现类是<code>LoginUser</code>】中已经有了全新信息。因此只需要从中获取即可。<code>LoginUser.getAuthorities()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//首先需要获取token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> httpServletRequest.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//判断token是否为Null</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(token)) &#123;</span><br><span class="line">            filterChain.doFilter(httpServletRequest, httpServletResponse);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如何不为空，解析token，获得了UserId</span></span><br><span class="line">        String userId;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtil.parseJWT(token);</span><br><span class="line">            userId = claims.getSubject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;toen非法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据UserId查redis获取用户数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;login:&quot;</span>+userId;</span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">LoginUser</span> <span class="operator">=</span> redisCache.getCacheObject(key);</span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(LoginUser))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//然后封装Authentication对象存入SecurityContextHolder</span></span><br><span class="line">        <span class="comment">// TODO 获取权限信息封装到Authentication中</span></span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(LoginUser,<span class="literal">null</span>,LoginUser.getAuthorities());</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(httpServletRequest,httpServletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="限制访问资源所需权限"><a href="#限制访问资源所需权限" class="headerlink" title="限制访问资源所需权限"></a>限制访问资源所需权限</h2><p><code>SpringSecurity</code>为我们提供了基于注解的权限控制方案，这也是我们项目中主要采用的方式。我们可以使用注解去指定访问对应的资源所需的权限。</p><p>但是要使用它我们需要先开启相关配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br></pre></td></tr></table></figure><p>然后就可以使用对应的注解。<font color="gold"><strong>@PreAuthorize</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;system:test:index&#x27;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>权限表</p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E6%8E%88%E6%9D%83%5Cimage-20220821210526692.png" alt="image-20220821210526692"></p><h1 id="权限控制方案"><a href="#权限控制方案" class="headerlink" title="权限控制方案"></a>权限控制方案</h1><h2 id="基于注解的权限控制方案"><a href="#基于注解的权限控制方案" class="headerlink" title="基于注解的权限控制方案"></a>基于注解的权限控制方案</h2><p>参考：</p><ul><li><a href="https://blog.csdn.net/qq_35067322/article/details/124207162">https://blog.csdn.net/qq_35067322/article/details/124207162</a></li><li><a href="https://www.jianshu.com/p/9f1aab4440d2">https://www.jianshu.com/p/9f1aab4440d2</a></li></ul><p><strong>Spring Security</strong>默认是关闭方法注解的，开启它只需要通过引入<font color="gold"><code>@EnableGlobalMethodSecurity</code></font>注解即可:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span>&#123;</span><br><span class="line"><span class="comment">//... </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@EnableGlobalMethodSecurity</code> 提供了以下三种方式:</p><ul><li><code>prePostEnabled</code>：基于表达式的注解</li><li><code>securedEnabled</code>：开启基于角色的注解</li><li><code>jsr250Enabled</code>：开启对JSR250的注解。</li></ul><p>可以根据需要选择使用这三种的一种或者其中几种。</p><p>下面我们大概了解一下</p><h3 id="prePostEnabled-true"><a href="#prePostEnabled-true" class="headerlink" title="prePostEnabled = true"></a><code>prePostEnabled = true</code></h3><p>开启后支持<strong>Spring EL表达式</strong>，如果没有访问方法的权限，会抛出<code>AccessDeniedException</code>，启用了如下注解：</p><ul><li><p><font color="gold"><strong>@PreAuthorize</strong></font>：进入<font color="red"><strong>方法之前</strong></font>验证授权</p><p>可以使用SPEL表达式或者调用自带的方法，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;#userId == authentication.principal.userId or hasAuthority(‘ADMIN’)&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">changePassword</span><span class="params">(<span class="type">long</span> userId )</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>表示在<code>changePassword</code>方法执行之前，判断方法参数<code>userId</code>的值是否等于<code>principal</code>中保存的当前用户的<code>userId</code>，或者当前用户是否具有<code>ROLE_ADMIN</code>权限，两种符合其一，就可以访问该 方法。</p><p>使用方法进行校验：</p><ul><li><p><code>hasAuthority</code>：只能传入一个权限，只有用户有这个权限才可以访问资源。</p></li><li><p><code>hasAnyAuthority</code>：可以传入多个权限，只有用户有其中任意一个权限都可以访问对应资源。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;admin&#x27;,&#x27;test&#x27;,&#x27;system:dept:list&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>hasRole</code>：要求有对应的角色才可以访问，但是它内部会把我们传入的参数拼接上 <strong>ROLE_</strong> 后再去比较。所以这种情况下要用用户对应的权限也要有 <strong>ROLE_</strong> 这个前缀才可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;system:dept:list&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>用户有<code>system:dept:list</code>权限是无法访问的，得有<code>ROLE_system:dept:list</code>权限才可以。</p></blockquote></li><li><p><code>hasAnyRole</code>：有任意的角色就可以访问。</p></li></ul></li><li><p><font color="gold"><strong>@PostAuthorize</strong></font>：检查授权<font color="red"><strong>方法之后</strong></font>才被执行并且可以影响执行方法的返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostAuthorize(&quot;returnObject.username == authentication.principal.nickName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CustomUser <span class="title function_">loadUserDetail</span><span class="params">(String username)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userRoleRepository.loadUserByUserName(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><font color="gold"><strong>@PostFilter</strong></font>：在方法执行之后执行，而且这里可以调用方法的返回值，然后对返回值进行过滤或处理或修改并返回</p></li><li><p><font color="gold"><strong>@PreFilter</strong></font>：在方法执行之前执行，而且这里可以调用方法的参数，然后对参数值进行过滤或处理或修改</p></li></ul><h3 id="securedEnabled-true"><a href="#securedEnabled-true" class="headerlink" title="securedEnabled=true"></a><code>securedEnabled=true</code></h3><p>主要开启了<font color="gold"><strong>@Secured</strong></font></p><p>注解规定了访问访方法的角色列表，在列表中最少指定一种角色</p><p><code>@Secured</code>在方法上指定安全性，要求 角色&#x2F;权限等 只有对应 角色&#x2F;权限 的用户才可以调用这些方法。 如果有人试图调用一个方法，但是不拥有所需的 角色&#x2F;权限，那会将会拒绝访问将引发异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Secured(&quot;ROLE_VIEWER&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SecurityContext</span> <span class="variable">securityContext</span> <span class="operator">=</span> SecurityContextHolder.getContext();</span><br><span class="line">    <span class="keyword">return</span> securityContext.getAuthentication().getName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Secured(&#123; &quot;ROLE_DBA&quot;, &quot;ROLE_ADMIN&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUsername2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Secured(&quot;ROLE_VIEWER&quot;)</code> 表示只有拥有<code>ROLE_VIEWER</code>角色的用户，才能够访问<code>getUsername()</code>方法。</p><p><code>@Secured(&#123; &quot;ROLE_DBA&quot;, &quot;ROLE_ADMIN&quot; &#125;)</code> 表示用户拥有”<code>ROLE_DBA&quot;, &quot;ROLE_ADMIN&quot;</code> 两个角色中的任意一个角色，均可访问 <code>getUsername2</code> 方法。</p><blockquote><p>@Secured,不支持Spring EL表达式</p></blockquote><h3 id="jsr250Enabled-true"><a href="#jsr250Enabled-true" class="headerlink" title="jsr250Enabled = true"></a><code>jsr250Enabled = true</code></h3><ol><li><font color="gold"><strong>@DenyAll</strong></font>：拒绝所有权限</li><li><font color="gold"><strong>@RolesAllowed</strong></font>：在功能及使用方法上与 <code>@Secured</code> 完全相同</li><li><font color="gold"><strong>@PermitAll</strong></font>：接受所有权限</li></ol><h2 id="基于配置文件的权限控制方案"><a href="#基于配置文件的权限控制方案" class="headerlink" title="基于配置文件的权限控制方案"></a>基于配置文件的权限控制方案</h2><p> 使用配置文件进行权限控制方案，适合对<strong>静态资源</strong>进行配置。</p><p>在权限可以在配置类中进行配置。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">         http.authorizeRequests().antMatchers(<span class="string">&quot;/hello&quot;</span>).hasAuthority(<span class="string">&quot;system:test:index&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置案例：</p><p>参考：<a href="https://blog.csdn.net/Shair911/article/details/104181917/">https://blog.csdn.net/Shair911/article/details/104181917/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//任何用户都可以访问</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/index&quot;</span>).permitAll();</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/index&quot;</span>).access(<span class="string">&quot;permitAll&quot;</span>);]</span><br><span class="line"></span><br><span class="line"><span class="comment">//任何用户都不能访问</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/home&quot;</span>).denyAll();</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/home&quot;</span>).access(<span class="string">&quot;denyAll&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//认证用户可以访问（除了匿名认证）</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).authenticated();</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).access(<span class="string">&quot;authenticated&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//认证用户可以访问（除了匿名认证，记住我）</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).fullyAuthenticated();</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).access(<span class="string">&quot;fullyAuthenticated&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//记住我的认证可以访问</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).rememberMe();</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).access(<span class="string">&quot;rememberMe&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名用户可以访问</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).anonymous();</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).access(<span class="string">&quot;anonymous&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否有权限</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/index&quot;</span>).hasAuthority(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/index&quot;</span>).access(<span class="string">&quot;hasAuthority(&#x27;user&#x27;)&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否有任意一个权限</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/home&quot;</span>).hasAnyAuthority(<span class="string">&quot;update&quot;</span>, <span class="string">&quot;delete&quot;</span>, <span class="string">&quot;insert&quot;</span>);</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/home&quot;</span>).access(<span class="string">&quot;hasAnyAuthority(&#x27;update&#x27;,&#x27;delete&#x27;,&#x27;insert&#x27;)&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//spring security中的role并非是一个或多个权限的集合，而是权限的一种，通常以ROLE_开头</span></span><br><span class="line"><span class="comment">//role就是ROLE_开头的权限</span></span><br><span class="line"><span class="comment">//注意：hasRole、hasAnyRole里面的role不需要以ROLE_开头，否则会报异常</span></span><br><span class="line"><span class="comment">//注意：如果在access里面使用hasRole、hasAnyRole则ROLE_前缀可加，可不加</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/index&quot;</span>).hasRole(<span class="string">&quot;GUEST&quot;</span>);</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/index&quot;</span>).access(<span class="string">&quot;hasRole(&#x27;GUEST&#x27;)&quot;</span>);</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).hasAuthority(<span class="string">&quot;ROLE_GUEST&quot;</span>);</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/home&quot;</span>).hasAnyRole(<span class="string">&quot;GUEST&quot;</span>, <span class="string">&quot;USER&quot;</span>, <span class="string">&quot;ADMIN&quot;</span>);</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/home&quot;</span>).access(<span class="string">&quot;hasAnyRole(&#x27;ROLE_GUEST&#x27;,&#x27;ROLE_USER&#x27;,&#x27;ROLE_ADMIN&#x27;)&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="hasAuthority-源码解读"><a href="#hasAuthority-源码解读" class="headerlink" title="hasAuthority 源码解读"></a>hasAuthority 源码解读</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">SecurityExpressionRoot</span> <span class="keyword">implements</span> <span class="title class_">SecurityExpressionOperations</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SecurityExpressionRoot</span><span class="params">(Authentication authentication)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (authentication == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Authentication object cannot be null&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.authentication = authentication;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">hasAuthority</span><span class="params">(String authority)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.hasAnyAuthority(authority);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">hasAnyAuthority</span><span class="params">(String... authorities)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.hasAnyAuthorityName((String)<span class="literal">null</span>, authorities);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到 <code>hasAuthority() </code>方法存在于<code>SecurityExpressionRoot</code>类中，返回的是布尔类型。</p><p>它调用了<code>hasAnyAuthority()</code>方法。而它又进一步调用了<code>this.hasAnyAuthorityName((String)null, authorities)</code>。</p><p><code>hasAnyAuthorityName</code>源码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">hasAnyAuthorityName</span><span class="params">(String prefix, String... roles)</span> &#123;</span><br><span class="line">    Set&lt;String&gt; roleSet = <span class="built_in">this</span>.getAuthoritySet();</span><br><span class="line">    String[] var4 = roles;</span><br><span class="line">    <span class="type">int</span> <span class="variable">var5</span> <span class="operator">=</span> roles.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="number">0</span>; var6 &lt; var5; ++var6) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">role</span> <span class="operator">=</span> var4[var6];</span><br><span class="line">        <span class="type">String</span> <span class="variable">defaultedRole</span> <span class="operator">=</span> getRoleWithDefaultPrefix(prefix, role);</span><br><span class="line">        <span class="keyword">if</span> (roleSet.contains(defaultedRole)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入了两个参数：<strong>前缀字符串</strong> 和 **权限字符串(可变参数)**。</p><ol><li><code>Set&lt;String&gt; roleSet = this.getAuthoritySet();</code>获取权限集合，也就是访问该接口，需要哪些权限。</li><li><code>String[] var4 = roles;</code>，这是我们传入的权限，代表用户具有哪些权限。</li><li>然后遍历该权限数组<ol><li><code>String role = var4[var6]</code>获取权限。</li><li><code>String defaultedRole = getRoleWithDefaultPrefix(prefix, role);</code>将前缀和权限名拼接，由于传进来的前缀字符串为null,所以拼接之后不变。</li><li><code>if (roleSet.contains(defaultedRole))return true</code>，如果所需权限集合包含该权限返回true。</li></ol></li><li><code>return false;</code></li></ol><blockquote><p> 由此可见，它内部其实是调用<code>authentication</code>的<code>getAuthorities</code>方法获取用户的权限列表。然后判断我们存入的方法参数数据在权限列表中。</p></blockquote><h2 id="自定义权限校验方法"><a href="#自定义权限校验方法" class="headerlink" title="自定义权限校验方法"></a>自定义权限校验方法</h2><p>如果要自定义权限校验方法</p><p>只需要定义一个类，该类<font color="red"><strong>使用注解注入到Spring容器中</strong></font>。</p><p>然后在类中定义一个方法，让它的<font color="red"><strong>返回值为布尔类型</strong></font>即可。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;ex&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SGExpressionRoot</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasAuthority</span><span class="params">(String authority)</span>&#123;</span><br><span class="line">        <span class="comment">//获取当前用户的权限</span></span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authentication.getPrincipal();</span><br><span class="line">        List&lt;String&gt; permissions = loginUser.getPermissions();</span><br><span class="line">        <span class="comment">//判断用户权限集合中是否存在authority</span></span><br><span class="line">        <span class="keyword">return</span> permissions.contains(authority);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们使用时，需要使用<code>SPEL</code>表达式，</p><p><font color="blue"><code>@Bean的名字</code></font>就可以获取容器中的Bean，然后就可以使用当中的方法。</p><p><font color="blue"><code>@Component(&quot;ex&quot;)</code></font>可以指定Bean的名字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;@ex.hasAuthority(&#x27;system:dept:list&#x27;)&quot;)</span><span class="comment">//@ex相当于获取容器中bean的名字为ex的对象</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">使用Spring-Security进行授权的流程【三更草堂课程笔记】</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/category/Spring/"/>
    
    
    <category term="Spring-Security" scheme="http://example.com/tag/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Security登录认证详解</title>
    <link href="http://example.com/post/e123c807.html"/>
    <id>http://example.com/post/e123c807.html</id>
    <published>2022-08-18T05:52:35.000Z</published>
    <updated>2022-08-20T09:56:11.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="登录校验过程"><a href="#登录校验过程" class="headerlink" title="登录校验过程"></a>登录校验过程</h1><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%5Cimage-20211215094003288.png" alt="image-20211215094003288"></p><h1 id="原理初探"><a href="#原理初探" class="headerlink" title="原理初探"></a>原理初探</h1><p>想要知道如何实现自己的登陆流程就必须要先知道入门案例中<code>SpringSecurity</code>的流程。</p><h2 id="SpringSecurity完整流程"><a href="#SpringSecurity完整流程" class="headerlink" title="SpringSecurity完整流程"></a>SpringSecurity完整流程</h2><p><code>SpringSecurity</code>的原理其实就是一个<font color="red"><strong>过滤器链</strong></font>，内部包含了提供各种功能的过滤器。</p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%5Cimage-20211214144425527.png" alt="image-20211214144425527"></p><p><font color="red"><strong>图中只展示了核心过滤器</strong></font>，其它的非核心过滤器并没有在图中展示。</p><ul><li><code>UsernamePasswordAuthenticationFilter</code>:负责处理我们在登陆页面填写了用户名密码后的登陆请求。入门案例的认证工作主要有它负责。【判断你的用户名和密码是否正确】</li><li><code>ExceptionTranslationFilter</code>：处理过滤器链中抛出的任何<code>AccessDeniedException</code>和<code>AuthenticationException</code> 。【处理认证授权过程中的所有异常，方便统一处理】</li><li><code>FilterSecurityInterceptor</code>：负责权限校验的过滤器。【它会判断你登录成功的用户是“谁”，“你”具有什么权限，当前访问的资源需要什么权限】</li></ul><p>可以通过Debug查看当前系统中SpringSecurity过滤器链中有哪些过滤器及它们的顺序。</p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%5Cimage-20211214145824903.png" alt="image-20211214145824903"></p><p>我们可以看到一共有15个过滤器。大概了解几个过滤器：</p><p><code>DefaultLoginPageGeneratingFilter</code>：默认登录页就是这个过滤器显示出来的，如果不想要默认登录页，就去掉这个过滤器就可以了。</p><p><code>DefaultLogoutPageGeneratingFilter</code>：用来显示默认注销的页面</p><h2 id="认证流程详解"><a href="#认证流程详解" class="headerlink" title="认证流程详解"></a>认证流程详解</h2><p><code>UsernamePasswordAuthenticationFilter</code>这个过滤器来实现认证过程逻辑的。实际上不是它这一个类就实现了，它还通过其他类来帮助他实现的，下图就是该过滤器内部实现大致流程。</p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%5Cimage-20211214151515385.png" alt="image-20211214151515385"></p><p>过程详解：</p><p>当前端提交用户名和密码过来时，进入了<code>UsernamePasswordAuthenticationFilter</code>过滤器。</p><ul><li><p>在<code>UsernamePasswordAuthenticationFilter</code>过滤器里，将传进来的用户名和密码被封装成了<font color="blue"><strong><code>Authentication</code></strong></font>对象【这时候最多只有用户名和密码，权限还没有】，<font color="blue"><strong><code>Authentication</code></strong></font>对象通过<font color="green"><strong><code>ProviderManager</code>的<code>authenticate</code>方法</strong></font>进行认证。</p><ul><li><p>在<font color="green"><strong><code>ProviderManager</code></strong></font>里面，通过调用<code>DaoAuthenticationProvider</code>的<code>authenticate</code>方法进行认证。</p><ul><li><p>在<code>DaoAuthenticationProvider</code>里，调用<font color="orange"><strong><code>InMemoryUserDetailsManager</code>的<code>loadUserByUsername</code>方法</strong></font>查询用户。【传入的参数只有<font color="red"><strong>用户名字符串</strong></font>】</p><ul><li>在<font color="orange"><strong><code>InMemoryUserDetailsManager</code>的<code>loadUserByUsername</code>方法</strong></font>里执行了以下操作<ol><li>根据用户名查询对于用户以及这个用户的权限信息【<font color="red"><strong>在内存里查</strong></font>】</li><li>把对应的用户信息包括权限信息封装成<font color="DarkVoilet"><strong><code>UserDetails</code>对象</strong></font>。</li><li>返回<font color="DarkVoilet"><strong><code>UserDetails</code>对象</strong></font>。</li></ol></li></ul></li><li><p>返回给了<code>DaoAuthenticationProvider</code>，在这个对象里执行了以下操作</p><ol><li>通过<font color="DarkTurquoise"><strong><code>PasswordEncoder</code></strong></font>对比<font color="DarkVoilet"><strong><code>UserDetails</code></strong></font>中的密码和<font color="blue"><strong><code>Authentication</code></strong></font>密码是否正确。【<font color="red"><strong>校验密码（经过加密的）</strong></font>】</li><li>如果正确就把<font color="DarkVoilet"><strong><code>UserDetails</code></strong></font>的<strong>权限信息</strong>设置到<font color="blue"><strong><code>Authentication</code></strong></font>对象中。</li><li>返回<font color="blue"><strong><code>Authentication</code></strong></font>对象。</li></ol></li></ul></li></ul></li><li><p>又回到了过滤器里面<code>UsernamePasswordAuthenticationFilter</code>。</p><ol><li><p>如果上一步返回了<font color="blue"><strong><code>Authentication</code></strong></font>对象</p><p>就使用**<code>SecurityContextHolder.getContext().setAuthentication()</code>**方法存储对象。</p><p><strong>其他过滤器</strong>会通过<code>SecurityContextHolder</code>来获取当前用户信息。【当前过滤器认证完了，后面的过滤器还需要获取用户信息，比如授权过滤器】</p></li></ol></li></ul><blockquote><p>彩色字体的类均是比较重要的<font color="red"><strong>接口</strong></font>，在实现认证的过程中均需要自定义一个类来重新实现或者变更为Spring中其他实现类。</p></blockquote><p>概念速查：</p><ul><li><p><font color="blue"><strong><code>Authentication</code></strong></font>接口: 它的实现类，表示当前访问系统的用户，<font color="red"><strong>封装了用户的权限等相关信息。</strong></font></p></li><li><p><font color="green"><strong><code>AuthenticationManager</code></strong></font>接口：定义了认证Authentication的方法 ,实现类是<font color="green"><strong><code>ProviderManager</code></strong></font></p><ul><li>它的实现类是<font color="green"><strong><code>ProviderManager</code></strong></font>，它的功能主要是实现<font color="red"><strong>认证用户</strong></font>，因为在写登录接口时，可以通过配置类的方式，注入Spring容器中来使用它的**<code>authenticate</code>方法**。</li></ul></li><li><p><font color="orange"><strong><code>UserDetailsService</code></strong></font>接口：加载用户特定数据的核心接口。里面定义了一个<font color="red"><strong>根据用户名查询用户信息的方法</strong></font>。</p><ul><li>原本的实现类是<font color="orange"><strong><code>InMemoryUserDetailsManager</code></strong></font>，它是在内存中查询，因为我们需要自定义改接口。</li></ul></li><li><p><font color="DarkVoilet"><strong><code>UserDetails</code></strong></font>接口：提供核心用户信息。通过<font color="orange"><strong><code>UserDetailsService</code></strong></font>根据用户名获取处理的用户信息要封装成<font color="DarkVoilet"><strong><code>UserDetails</code></strong></font>对象返回。然后将这些信息封装到<font color="blue"><strong><code>Authentication</code></strong></font>对象中。</p><ul><li>当我们自定义<font color="orange"><strong><code>UserDetailsService</code></strong></font>接口时，需要我们定义一个<font color="red"><strong>实体类</strong></font>来实现这个接口来供<font color="orange"><strong><code>UserDetailsService</code></strong></font>接口返回。【注意是实体类】</li></ul></li></ul><h1 id="实现登录认证"><a href="#实现登录认证" class="headerlink" title="实现登录认证"></a>实现登录认证</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p><font color="blue" size=5><strong>登录</strong></font></p><p>​①自定义登录接口  <img src="/%5Cimage%5Carticle%5CSpring-Security%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%5CIMG_0414(20220818-140941).PNG" alt="IMG_0414(20220818-140941)"></p><p>​调用<code>ProviderManager</code>的方法进行认证 如果认证通过生成<code>jwt</code></p><p>​把用户信息存入<code>redis</code>中【<code>userId</code>作为Key，用户信息作为Value】</p><p>​②自定义<code>UserDetailsService </code></p><p>​【因为原本这个<strong>接口的实现类</strong>是<strong>在内存中查询用户信息</strong>，不符合我们的要求，所以需要我们自己去实现它来自定义】</p><p>​在这个实现类中去查询数据库 </p><p><font color="blue" size=5><strong>校验</strong></font>：【校验的话，需要我们自己去<strong>自定义一个过滤器</strong>】</p><img src="\image\article\Spring-Security登录认证\IMG_0415(20220818-141117).PNG" alt="IMG_0415(20220818-141117)" style="zoom: 80%;" /><p>​①定义<code>Jwt</code>认证过滤器</p><p>​获取token</p><p>​解析token获取其中的<code>userid</code></p><p>​从<code>redis</code>中获取用户信息【如果每次请求都查询数据库就很浪费时间】</p><p>​存入<code>SecurityContextHolder</code></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><ul><li><p><code>spring-boot-starter-security</code></p></li><li><p><code>JWT</code></p></li><li><p><code>spring-boot-starter-data-redis</code></p></li><li><p><code>fastjson</code></p></li><li><p><code>mybatis-plus</code></p></li><li><p><code>mysql-connector-java</code></p></li><li><p><code>lombok</code></p><p>对于<code>JWT</code>，由于版本原因还需要引入以下maven坐标。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="配置文件【数据库和redis】"><a href="#配置文件【数据库和redis】" class="headerlink" title="配置文件【数据库和redis】"></a>配置文件【<code>数据库</code>和<code>redis</code>】</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.37.131:3306/Security?characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.37</span><span class="number">.131</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span>   <span class="comment">#默认端口号</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span> <span class="comment">#默认提供了16个数据库（可以在配置文件中改） 默认操作0号数据库，可以在命令行 select 1 选择1号数据库，</span></span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="comment">#Redis连接池配置</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span> <span class="comment">#最大链接数</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">1ms</span> <span class="comment">#连接池最大阻塞等待时间</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">4</span>   <span class="comment">#连接池的最大空闲连接</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span>   <span class="comment">#连接池的最小空闲连接</span></span><br></pre></td></tr></table></figure><h3 id="添加配置类"><a href="#添加配置类" class="headerlink" title="添加配置类"></a>添加配置类</h3><p><code>Redis</code>的配置类</p><blockquote><p>Key序列化为String,Value序列化为json</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis使用FastJson序列化</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sg</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastJsonRedisSerializer</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">RedisSerializer</span>&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Charset</span> <span class="variable">DEFAULT_CHARSET</span> <span class="operator">=</span> Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; clazz;</span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FastJsonRedisSerializer</span><span class="params">(Class&lt;T&gt; clazz)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.clazz = clazz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] serialize(T t) <span class="keyword">throws</span> SerializationException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> SerializationException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bytes == <span class="literal">null</span> || bytes.length &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes, DEFAULT_CHARSET);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(str, clazz);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> JavaType <span class="title function_">getJavaType</span><span class="params">(Class&lt;?&gt; clazz)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeFactory.defaultInstance().constructType(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(value = &#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span></span><br><span class="line">    &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="type">FastJsonRedisSerializer</span> <span class="variable">serializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastJsonRedisSerializer</span>(Object.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setValueSerializer(serializer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Hash的key也采用StringRedisSerializer的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setHashValueSerializer(serializer);</span><br><span class="line"></span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>Mybatis-plus</code>，要在启动类上加上<font color="gold"><strong>@MapperScan</strong></font>注解，来配置Mapper扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.Mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Demo1Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="响应类"><a href="#响应类" class="headerlink" title="响应类"></a>响应类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseResult</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提示信息，如果有错误时，前端可以获取该字段进行提示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询到的结果数据，</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, String msg, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><p><code>JWt</code>的工具类还有<code>Redis</code>的工具类。【针对于工具类，我觉得有必要总结一个博客，以后开发肯定是常用的。代码太长就不贴了】</p><p><code>Redis</code>工具类使用<font color="gold"><strong>@Component</strong></font>注解来注入到Spring容器中。</p><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户表(User)实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;sys_user&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">40356785423868312L</span>;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;<span class="comment">//主键</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String userName;<span class="comment">//用户名</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String nickName;<span class="comment">//昵称</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">//密码</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String status;<span class="comment">//账号状态（0正常 1停用）</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String email;<span class="comment">// 邮箱</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String phonenumber;<span class="comment">//手机号</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String sex;<span class="comment">//用户性别（0男，1女，2未知）</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String avatar;<span class="comment">//头像</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String userType;<span class="comment">//用户类型（0管理员，1普通用户）</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long createBy;<span class="comment">//创建人的用户id</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Date createTime;<span class="comment">//创建时间</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> Long updateBy;<span class="comment">//更新人</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Date updateTime;<span class="comment">//更新时间</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;<span class="comment">//删除标志（0代表未删除，1代表已删除）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建一个用户表"><a href="#创建一个用户表" class="headerlink" title="创建一个用户表"></a>创建一个用户表</h3><p>建表语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `sys_user` (</span><br><span class="line">  `id` BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,</span><br><span class="line">  `user_name` VARCHAR(64) NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;用户名&#x27;,</span><br><span class="line">  `nick_name` VARCHAR(64) NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;昵称&#x27;,</span><br><span class="line">  `password` VARCHAR(64) NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;密码&#x27;,</span><br><span class="line">  `status` CHAR(1) DEFAULT &#x27;0&#x27; COMMENT &#x27;账号状态（0正常 1停用）&#x27;,</span><br><span class="line">  `email` VARCHAR(64) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">  `phonenumber` VARCHAR(32) DEFAULT NULL COMMENT &#x27;手机号&#x27;,</span><br><span class="line">  `sex` CHAR(1) DEFAULT NULL COMMENT &#x27;用户性别（0男，1女，2未知）&#x27;,</span><br><span class="line">  `avatar` VARCHAR(128) DEFAULT NULL COMMENT &#x27;头像&#x27;,</span><br><span class="line">  `user_type` CHAR(1) NOT NULL DEFAULT &#x27;1&#x27; COMMENT &#x27;用户类型（0管理员，1普通用户）&#x27;,</span><br><span class="line">  `create_by` BIGINT(20) DEFAULT NULL COMMENT &#x27;创建人的用户id&#x27;,</span><br><span class="line">  `create_time` DATETIME DEFAULT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `update_by` BIGINT(20) DEFAULT NULL COMMENT &#x27;更新人&#x27;,</span><br><span class="line">  `update_time` DATETIME DEFAULT NULL COMMENT &#x27;更新时间&#x27;,</span><br><span class="line">  `del_flag` INT(11) DEFAULT &#x27;0&#x27; COMMENT &#x27;删除标志（0代表未删除，1代表已删除）&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=INNODB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COMMENT=&#x27;用户表&#x27;</span><br></pre></td></tr></table></figure><p>OK准备工作就完成了….</p><h2 id="核心代码实现"><a href="#核心代码实现" class="headerlink" title="核心代码实现"></a>核心代码实现</h2><h3 id="数据库校验用户"><a href="#数据库校验用户" class="headerlink" title="数据库校验用户"></a>数据库校验用户</h3><p>首先你要写好<code>UserMapper</code>接口，来实现用户查询。</p><p>我们要创建一个类<code>UserDetailsServiceImpl</code>来实现<font color="orange"><strong><code>UserDetailsService</code></strong></font>接口，来让它实现在数据库里面查询，因为它原本的实现类是查询内存的。【在Service包中】</p><p>这个接口要使用<font color="gold"><strong>@Service</strong></font>注解，注入到Spring容器中。</p><p>重写**<code>loadUserByUsername</code>**方法，传入了<code>Username</code>参数</p><ol><li><p>首先要根据传入的<code>Username</code>参数，查询数据库</p></li><li><p>如果没有这个用户<code>Objects.isNull(user)</code>，就抛出异常</p></li><li><p>根据用户查询权限信息 </p></li><li><p>添加到**<code>UserDetails</code>接口的实现类**中</p><ol><li><p>在domain包中创建类<code>LoginUser</code>，实现<code>UserDetails</code>接口。</p></li><li><p>完整代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginUser</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;<span class="keyword">return</span> user.getPassword();&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;<span class="keyword">return</span> user.getUserName();&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><p><font size=4><code>UserDetailsServiceImpl</code>实现类如下</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">//根据传入了Passward查询用户</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getUserName,username);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> service.getOne(queryWrapper);</span><br><span class="line">        <span class="comment">//如果没有查询到用户就抛出异常</span></span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(user))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//TODO 查询对应的权限</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginUser</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：如果要测试，需要往用户表中写入用户数据，并且如果你想让用户的密码是明文存储，需要在密码前加{noop}。例如</p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%5Cimage-20211216123945882.png" alt="image-20211216123945882"></p><p>这样登陆的时候就可以用sg作为用户名，1234作为密码来登陆了。</p><h4 id="密码加密存储"><a href="#密码加密存储" class="headerlink" title="密码加密存储"></a>密码加密存储</h4><img src="\image\article\Spring-Security登录认证\image-20220819003356284.png" alt="image-20220819003356284" style="zoom:67%;" /><p>实际项目中我们不会把密码明文存储在数据库中。</p><p>​默认使用的<code>PasswordEncoder</code>要求数据库中的密码格式为：<code>&#123;id&#125;password </code>。它会根据id去判断密码的加密方式。但是我们一般不会采用这种方式。所以就需要替换<code>PasswordEncoder</code>。</p><p>​我们一般使用<code>SpringSecurity</code>为我们提供的<code>BCryptPasswordEncoder</code>。</p><p>​我们只需要使用把<code>BCryptPasswordEncoder</code>对象注入Spring容器中，<code>SpringSecurity</code>就会使用该<code>PasswordEncoder</code>来进行密码校验。</p><p>​我们可以定义一个<code>SpringSecurity</code>的配置类，<code>SpringSecurity</code>要求这个配置类要继承<code>WebSecurityConfigurerAdapter</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置之后，我们要将数据库<code>sys_user</code>表的用户密码，从 <strong>1234</strong>,改为加密之后的。</p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%5Cimage-20220819003102757.png" alt="image-20220819003102757"></p><p>当我们进行注册时，要将密码进行加密，我们可以将<code>PasswordEncoder</code>注入进Controller里。下面我们进行测试演示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo1ApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span> passwordEncoder.encode(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">        System.out.println(encode);<span class="comment">//$2a$10$OHOzZsC9RMCqJdWWpBzgfOfQZlEVedDXrUqHhp3HSINu4HghI59kq</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">加密后的信息是动态变化的，因为我们要使用，matches()来进行比较。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">matches</span> <span class="operator">=</span> passwordEncoder.matches(<span class="string">&quot;1234&quot;</span>, encode);</span><br><span class="line">        System.out.println(matches);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">matches2</span> <span class="operator">=</span> passwordEncoder.matches(<span class="string">&quot;12345&quot;</span>, encode);</span><br><span class="line">        System.out.println(matches2);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h3><img src="\image\article\Spring-Security登录认证\image-20220819004454194.png" alt="image-20220819004454194" style="zoom:67%;" /><p>接下我们需要自定义登陆接口。</p><ol><li><p>放行</p><p>登录接口需要<font color="red"><strong>让<code>SpringSecurity</code>对这个接口放行</strong></font>【不通过过滤器链】,让用户访问这个接口的时候不用登录也能访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...注入BCryptPasswordEncoder....</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">                <span class="comment">//关闭csrf</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="comment">//不通过Session获取SecurityContext</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 对于登录接口 允许匿名访问</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/login&quot;</span>).anonymous()<span class="comment">//允许匿名用户访问,不允许已登入用户访问</span></span><br><span class="line">                <span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口中的认证</p><ul><li><p>在接口中我们通过<font color="green"><strong><code>AuthenticationManager</code>的<code>authenticate</code></strong></font>方法来进行用户认证。</p></li><li><p>所以需要在<code>SecurityConfig</code>中配置把<code>AuthenticationManager</code>注入容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span>&#123;</span><br><span class="line">   <span class="comment">//...注入BCryptPasswordEncoder....</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//配置放行....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><font size=5><strong>流程：</strong></font></p><p>定义一个<code>Controller</code>，不多说了~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginService loginService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;Map&lt;String,String&gt;&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> user.getUserName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> user.getPassword();</span><br><span class="line">        <span class="keyword">return</span> loginService.login(userName,password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>loginService.login();</code>的核心流程：</p><p>注入**<code>AuthenticationManager</code>和<code>RedisCache</code>**</p><ul><li><p>调用<font color="green"><strong><code>AuthenticationManager</code>的<code>authenticate</code></strong></font>方法来进行用户认证。返回<font color="blue"><strong><code>Authentication</code></strong></font></p><ul><li><p>使用<code>authenticate</code>方法，需要传入<font color="blue"><strong><code>Authentication</code></strong></font>，但<font color="blue"><strong><code>Authentication</code></strong></font>是接口，因此需要去找它的实现类。这里我们使用它的实现类是<code>UsernamePasswordAuthenticationToken</code>。</p><blockquote><p><font color="red"><strong>传入的<code>Authentication</code>只有用户名和密码</strong></font>：</p><ul><li><code>principal</code> 属性为用户名</li><li><code>credentials</code> 属性为密码</li></ul></blockquote></li><li><p>使用<code>authenticate</code>方法，返回的<font color="blue"><strong><code>Authentication</code></strong></font>。</p><blockquote><p><font color="red"><strong>如果不为空的话，传出的<code>Authentication</code>：</strong></font></p><p><code>Principal</code>属性是<code>Userdetails</code></p><p><code>credentials</code> 属性为null</p></blockquote><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%5Cimage-20220819010124847.png" alt="image-20220819010124847"></p></li></ul></li><li><p>如果<font color="blue"><strong><code>Authentication</code></strong></font>为NULL，说明认证没通过，要么没查询到这个用户，要么密码比对不通过。然后就<strong>抛出异常</strong>。</p></li><li><p>如果认证通过，获取<code>UserId</code>，<code>JwtUtil</code>要将<code>UserId</code>加密成一个<code>toekn</code>。</p></li><li><p>将用户信息<font color="blue"><strong><code>Authentication</code></strong></font>，存入<code>redis</code>。</p></li></ul><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;Map&lt;String,String&gt;&gt; <span class="title function_">login</span><span class="params">(String userName, String password)</span> &#123;</span><br><span class="line">        <span class="comment">//调用`AuthenticationManager`的方法进行认证</span></span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authenticate</span> <span class="operator">=</span> authenticationManager.authenticate(<span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(userName, password));</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(authenticate))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果认证通过生成token</span></span><br><span class="line">            <span class="comment">//获取userid</span></span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authenticate.getPrincipal();</span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> loginUser.getUser().getId().toString();</span><br><span class="line">            <span class="comment">//生成token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.createJWT(userId);</span><br><span class="line">        <span class="comment">//authenticate存入redis</span></span><br><span class="line">        redisCache.setCacheObject(<span class="string">&quot;login:&quot;</span>+userId,loginUser);</span><br><span class="line">        <span class="comment">//把token响应给前端</span></span><br><span class="line">        HashMap&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;token&quot;</span>,token);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>&lt;Map&lt;String,String&gt;&gt;(<span class="number">200</span>,<span class="string">&quot;登陆成功&quot;</span>,map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="认证过滤器"><a href="#认证过滤器" class="headerlink" title="认证过滤器"></a>认证过滤器</h3><blockquote><p>为什么要写这么一个过滤器？</p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%5Cimage-20211214144425527.png" alt="image-20211214144425527"></p><p><code>SpringSecurity</code>自带的过滤器中是用来认证<font color="red">用户名和密码</font>的，之前的登录接口我们生成了一个token，当前端访问后端的时候需要携带这个token。而这个过滤器就是认证<font color="red">token</font>的。</p></blockquote><p>自定义一个<strong>过滤器</strong></p><ol><li><p>获取请求头中的<code>token</code></p><ol><li><p>如果获取的<code>token</code>字符串为空，说明前端访问后端就没有携带token。然后<font color="red"><strong>放行，return</strong></font></p><blockquote><p><strong>为什么是放行而不是抛异常呢？</strong></p><p>因为没有携带token，有可能前端是想要登录，因此不能抛异常。</p><p>就算是要访问其他资源，我们直接放行，<font color="blue"><strong><code>Authentication</code></strong></font>对象没有用户任何信息，后面的过滤器也会抛出异常。后面也不会进行认证。</p></blockquote></li></ol></li><li><p>使用<code>JwtUtil</code>对<code>token</code>进行解析取出其中的<code>userid</code>。</p><p>如果<code>token</code>解析失败，说明前端携带的token不合法，就会抛出异常。</p></li><li><p>使用<code>userid</code>去<code>redis</code>中获取对应的<code>LoginUser</code>对象。</p></li><li><p>然后封装<font color="blue"><strong><code>Authentication</code></strong></font>对象存入<code>SecurityContextHolder</code>。</p><p>在封装<font color="blue"><strong><code>Authentication</code></strong></font>时，使用的实现类是<code>UsernamePasswordAuthenticationToken</code>，使用的构造方法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsernamePasswordAuthenticationToken</span> <span class="keyword">extends</span> <span class="title class_">AbstractAuthenticationToken</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">530L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object principal;</span><br><span class="line">    <span class="keyword">private</span> Object credentials;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//.....</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernamePasswordAuthenticationToken</span><span class="params">(Object principal, Object credentials, Collection&lt;? extends GrantedAuthority&gt; authorities)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(authorities);</span><br><span class="line">        <span class="built_in">this</span>.principal = principal;</span><br><span class="line">        <span class="built_in">this</span>.credentials = credentials;</span><br><span class="line">        <span class="built_in">super</span>.setAuthenticated(<span class="literal">true</span>);<span class="comment">//标志为已认证状态，这样就不用再让`UsernamePasswordAuthenticationFilter`过滤器再进行认证了。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//.....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//首先需要获取token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> httpServletRequest.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//判断token是否为Null</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(token)) &#123;</span><br><span class="line">            filterChain.doFilter(httpServletRequest, httpServletResponse);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如何不为空，解析token，获得了UserId</span></span><br><span class="line">        String userId;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtil.parseJWT(token);</span><br><span class="line">            userId = claims.getSubject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;toen非法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据UserId查redis获取用户数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;login:&quot;</span>+userId;</span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">LoginUser</span> <span class="operator">=</span> redisCache.getCacheObject(key);</span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(LoginUser))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//然后封装Authentication对象存入SecurityContextHolder</span></span><br><span class="line">        <span class="comment">//TODO 获取权限信息封装到Authentication中</span></span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(LoginUser,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(httpServletRequest,httpServletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><p>该过滤器实现的接口并不是之前的<code>Filter</code>，而是去继承<code>OncePerRequestFilter</code>。</p><p><code>OncePerRequestFilter</code>是Spring Boot里面的一个过滤器<strong>抽象类</strong>，这个过滤器抽象类通常被用于继承实现并在每次请求时<strong>只执行一次过滤</strong>。<font color="red"><strong>他能够确保在一次请求只通过一次filter，而不需要重复执行</strong></font></p><p>而<code>Servlet</code>的<code>Filter</code>可能会执行多次。</p></blockquote><p>然后我们将过滤器加到<code>UsernamePasswordAuthenticationFilter</code>的前面，在配置类中进行配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h3><p>定义一个登陆接口，然后获取<code>SecurityContextHolder</code>中的认证信息，删除<code>redis</code>中对应的数据即可。</p><p><strong>Controller层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginService loginService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">logout</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loginService.logout();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Service层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">logout</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取Authentication</span></span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authentication</span> <span class="operator">=</span> (UsernamePasswordAuthenticationToken) SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">Loginuser</span> <span class="operator">=</span> (LoginUser) authentication.getPrincipal();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> Loginuser.getUser();</span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> user.getId().toString();</span><br><span class="line">        <span class="comment">//清除cache</span></span><br><span class="line">        redisCache.deleteObject(<span class="string">&quot;login:&quot;</span>+userId);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(<span class="number">200</span>,<span class="string">&quot;注销成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>是不是感觉有点乱，让我们缕一缕。先说一下我们<font color="red"><strong>对哪些接口进行了实现，或者是更改</strong></font></p><ul><li><p>我们自定义了<font color="orange"><strong><code>UserDetailsService</code></strong></font>接口，来实现数据库查询。当中用到了**<code>UserDetails</code>接口的实现类——<code>LoginUser</code>**。</p></li><li><p>在<font color="orange"><strong><code>UserDetailsService</code></strong></font>接口是上一层面，我们需要对密码进行解密解析并对比。因为我们使用了**<code>PasswordEncoder</code>接口的其他实现类<code>BCryptPasswordEncoder</code>**。</p></li><li><p>在实现登录接口的时候</p><ul><li><p>需要<font color="green"><strong><code>AuthenticationManager</code>的<code>authenticate</code>方法</strong></font>进行认证。</p></li><li><p>传入<font color="blue"><strong><code>Authentication</code></strong></font>接口的实现类是<code>UsernamePasswordAuthenticationToken</code>。构造方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">UsernamePasswordAuthenticationToken</span><span class="params">(Object principal, Object credentials)</span></span><br></pre></td></tr></table></figure></li><li><p>这表示该<font color="blue"><strong><code>Authentication</code></strong></font>是<font color="red"><strong>未认证的</strong></font>。之后会通过<code>UsernamePasswordAuthenticationFilter</code>过滤器来认证。</p></li></ul></li><li><p>在实现认证过滤器时，</p><ul><li><p>需要使用<code>SecurityContextHolder.getContext().setAuthentication()</code>方法，将用户信息<font color="blue"><strong><code>Authentication</code></strong></font>存进去。方便其他Filter使用。</p></li><li><p>传入<font color="blue"><strong><code>Authentication</code></strong></font>接口的实现类是<code>UsernamePasswordAuthenticationToken</code>。构造方法是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">UsernamePasswordAuthenticationToken</span><span class="params">(Object principal, Object credentials, Collection&lt;? extends GrantedAuthority&gt; authorities)</span></span><br></pre></td></tr></table></figure></li><li><p>这表示该<font color="blue"><strong><code>Authentication</code></strong></font>是<font color="red"><strong>认证的</strong></font>。之后就不会通过<code>UsernamePasswordAuthenticationFilter</code>过滤器来认证。</p></li></ul></li></ul><h2 id="图例演示"><a href="#图例演示" class="headerlink" title="图例演示"></a>图例演示</h2><ol><li><p>当我们登录时</p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%5CIMG_0418(20220819-175440)-16609042254092.PNG" alt="IMG_0418(20220819-175440)"></p></li><li><p>登录之后，前端访问其他资源</p><ul><li><p>携带token</p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%5CIMG_0421(20220819-181345).PNG" alt="IMG_0421(20220819-181345)"></p><blockquote><p>通过DEBUG发现，如果携带token。</p><ul><li><p>context域中存入<font color="red"><strong>已认证的Authentication</strong></font>，就不会访问<code>UserDetailsServiceImpl</code>。</p></li><li><p>context域中存入<font color="red"><strong>未认证的Authentication</strong></font>，就会访问<code>UserDetailsServiceImpl</code>，来进行认证。</p></li></ul><p>至于为什么，我也不清楚….(￣ ‘i ￣;)</p></blockquote></li><li><p>未携带token</p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%5Cimage-20220819181740017.png" alt="image-20220819181740017"></p></li></ul></li></ol><p>​<font color="blue" size=5>如果有什么问题，欢迎评论区留言，思路整理了好久…..(￣ ‘i ￣;)</font></p>]]></content>
    
    
    <summary type="html">使用Spring-Security进行登录认证的流程【三更草堂课程笔记】</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/category/Spring/"/>
    
    
    <category term="Spring-Security" scheme="http://example.com/tag/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Security入门</title>
    <link href="http://example.com/post/15408d89.html"/>
    <id>http://example.com/post/15408d89.html</id>
    <published>2022-08-17T15:35:05.000Z</published>
    <updated>2022-08-19T10:46:49.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>Spring Security</strong> 是 Spring 家族中的一个安全管理框架。相比与另外一个安全框架<strong>Shiro</strong>，它提供了更丰富的功能，社区资源也比Shiro丰富。</p><p>​一般来说中大型的项目都是使用<strong>SpringSecurity</strong> 来做安全框架。小项目有Shiro的比较多，因为相比与SpringSecurity，Shiro的上手更加的简单。</p><p>​ 一般Web应用的需要进行<strong>认证</strong>和<strong>授权</strong>。</p><p>​<strong>认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户</strong></p><p>​<strong>授权：经过认证后判断当前用户是否有权限进行某个操作</strong></p><p>​而认证和授权也是SpringSecurity作为安全框架的核心功能。</p><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建一个SpringBoot工程，然后创建一个Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们启动时，访问 <code>localhost:8080/hello</code>【<font color="red"><strong>注意一定要使用<code>http</code>协议，如果使用<code>https</code>协议会报错</strong></font>】</p><p>会自动重定向至<code>localhost:8080/login</code></p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E5%85%A5%E9%97%A8%5Cimage-20220817234613736.png" alt="image-20220817234613736"></p><p>用户名默认为<code>user</code>。密码会在控制台给出。</p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E5%85%A5%E9%97%A8%5Cimage-20220817234730431.png" alt="image-20220817234730431"></p><p>输入用户名和密码就会访问到<code>localhost:8080/hello</code></p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E5%85%A5%E9%97%A8%5Cimage-20220817235027303.png" alt="image-20220817235027303"></p><p>如果我们不加SpringSecurity的坐标，那我们就可以直接进行访问资源。这个登录界面是SpringSecure自带的。</p>]]></content>
    
    
    <summary type="html">安全管理框架Spring Security入门，【三更草堂课程笔记】</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/category/Spring/"/>
    
    
    <category term="Spring-Security" scheme="http://example.com/tag/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>好玩的Python代码[摘录]（二）</title>
    <link href="http://example.com/post/e6afebad.html"/>
    <id>http://example.com/post/e6afebad.html</id>
    <published>2022-08-17T08:01:22.000Z</published>
    <updated>2022-08-20T09:14:20.292Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、python中的format格式拼接字符串"><a href="#1、python中的format格式拼接字符串" class="headerlink" title="1、python中的format格式拼接字符串"></a>1、python中的format格式拼接字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;a&#125;,&#123;b&#125;&#x27;</span>.<span class="built_in">format</span>(**d))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125;,&#123;1&#125;,&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;d[<span class="string">&#x27;a&#x27;</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1,2</span><br><span class="line">a,b,a</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="2、python控制台输出带颜色的文字方法"><a href="#2、python控制台输出带颜色的文字方法" class="headerlink" title="2、python控制台输出带颜色的文字方法"></a>2、python控制台输出带颜色的文字方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#格式：　　设置颜色开始 ：\033[显示方式;前景色;背景色m</span></span><br><span class="line"><span class="comment">#说明：</span></span><br><span class="line">前景色            背景色           颜色</span><br><span class="line">---------------------------------------</span><br><span class="line"><span class="number">30</span>                <span class="number">40</span>              黑色</span><br><span class="line"><span class="number">31</span>                <span class="number">41</span>              红色</span><br><span class="line"><span class="number">32</span>                <span class="number">42</span>              绿色</span><br><span class="line"><span class="number">33</span>                <span class="number">43</span>              黃色</span><br><span class="line"><span class="number">34</span>                <span class="number">44</span>              蓝色</span><br><span class="line"><span class="number">35</span>                <span class="number">45</span>              紫红色</span><br><span class="line"><span class="number">36</span>                <span class="number">46</span>              青蓝色</span><br><span class="line"><span class="number">37</span>                <span class="number">47</span>              白色</span><br><span class="line">显示方式           意义</span><br><span class="line">-------------------------</span><br><span class="line"><span class="number">0</span>                终端默认设置</span><br><span class="line"><span class="number">1</span>                高亮显示</span><br><span class="line"><span class="number">4</span>                使用下划线</span><br><span class="line"><span class="number">5</span>                闪烁</span><br><span class="line"><span class="number">7</span>                反白显示</span><br><span class="line"><span class="number">8</span>                不可见</span><br><span class="line"> </span><br><span class="line"><span class="comment">#例子：</span></span><br><span class="line">\033[<span class="number">1</span>;<span class="number">31</span>;40m    &lt;!--<span class="number">1</span>-高亮显示 <span class="number">31</span>-前景色红色  <span class="number">40</span>-背景色黑色--&gt;</span><br><span class="line">\033[0m          &lt;!--采用终端默认设置，即取消颜色设置--&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例子</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;紫红字体 \033[1;35m hello world \033[0m!&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;褐色背景绿色字体 \033[1;32;43m hello world \033[0m!&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\033[1;33;44mhello world\033[0m&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/%5Cimage%5Carticle%5C%E5%87%A0%E5%8D%81%E4%B8%AAPython%E6%AF%94%E8%BE%83%E5%A5%BD%E7%8E%A9%E7%9A%84%E4%BB%A3%E7%A0%81-%E6%90%AC%E8%BF%90%E5%88%AB%E4%BA%BA%E7%9A%84%5C20200615143709116.png" alt="在这里插入图片描述"></p><h2 id="3、控制台输出白色方框"><a href="#3、控制台输出白色方框" class="headerlink" title="3、控制台输出白色方框"></a>3、控制台输出白色方框</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;█&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="4、有序字典"><a href="#4、有序字典" class="headerlink" title="4、有序字典"></a>4、有序字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line">d1 = collections.OrderedDict()  <span class="comment"># 创建一个有序字典</span></span><br><span class="line">d1[<span class="string">&#x27;a&#x27;</span>] = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">d1[<span class="string">&#x27;b&#x27;</span>] = <span class="string">&#x27;B&#x27;</span></span><br><span class="line">d1[<span class="string">&#x27;c&#x27;</span>] = <span class="string">&#x27;C&#x27;</span></span><br><span class="line">d1[<span class="string">&#x27;d&#x27;</span>] = <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d1.items():</span><br><span class="line">    <span class="built_in">print</span>(k, v)</span><br></pre></td></tr></table></figure><h2 id="5、Python在Windows系统下实现TTS（文字转语音）"><a href="#5、Python在Windows系统下实现TTS（文字转语音）" class="headerlink" title="5、Python在Windows系统下实现TTS（文字转语音）"></a>5、Python在Windows系统下实现TTS（文字转语音）</h2><p>导入包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip install pypiwin32</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> win32com.client</span><br><span class="line">spk = win32com.client.Dispatch(<span class="string">&quot;SAPI.SpVoice&quot;</span>)</span><br><span class="line">spk.Speak(<span class="string">u&quot;my name is ldc,what is your name&quot;</span>)</span><br><span class="line">spk.Speak(<span class="string">u&quot;大家好&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="6、定义一个简单闹钟"><a href="#6、定义一个简单闹钟" class="headerlink" title="6、定义一个简单闹钟"></a>6、定义一个简单闹钟</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip install pypiwin32 -i https://pypi.python.org/simple</span></span><br><span class="line"><span class="keyword">import</span> win32com.client</span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="keyword">import</span> winsound</span><br><span class="line"></span><br><span class="line">spk = win32com.client.Dispatch(<span class="string">&quot;SAPI.SpVoice&quot;</span>)</span><br><span class="line"><span class="comment"># 定义闹钟时间</span></span><br><span class="line">clocktime = [[<span class="number">19</span>, <span class="number">19</span>], [<span class="number">11</span>, <span class="number">10</span>], [<span class="number">12</span>, <span class="number">10</span>], [<span class="number">18</span>, <span class="number">47</span>]]  </span><br><span class="line">runinghour = <span class="number">1</span>  <span class="comment"># 定义运行时间</span></span><br><span class="line">times = runinghour * <span class="number">3600</span>  <span class="comment"># 次数</span></span><br><span class="line"><span class="built_in">print</span>(times)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, times):</span><br><span class="line">    time_now = [time.localtime(time.time()).tm_hour, time.localtime(time.time()).tm_min]</span><br><span class="line">    <span class="keyword">if</span> time_now <span class="keyword">in</span> clocktime:</span><br><span class="line">        <span class="built_in">print</span>(time_now)</span><br><span class="line">        winsound.Beep(<span class="number">1000</span>, <span class="number">1000</span>)</span><br><span class="line">        spk.Speak(<span class="string">u&quot;快去看下饭好了没有？&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">60</span>)  <span class="comment"># 每分钟对比一次时间</span></span><br></pre></td></tr></table></figure><h2 id="7、根据年月获取当月天数"><a href="#7、根据年月获取当月天数" class="headerlink" title="7、根据年月获取当月天数"></a>7、根据年月获取当月天数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_month_days</span>(<span class="params">year, month</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据年份，月份信息显示此月份天数</span></span><br><span class="line"><span class="string">    :param year: 年份：</span></span><br><span class="line"><span class="string">    :param month: 月份（1～12）：</span></span><br><span class="line"><span class="string">    :return: 当月天数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> month &gt;<span class="number">12</span> <span class="keyword">or</span> month &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> month == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">29</span> <span class="keyword">if</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="number">28</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> month <span class="keyword">in</span> (<span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">30</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">31</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;2020-04&#x27;</span>.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">year = <span class="built_in">int</span>(a[<span class="number">0</span>])</span><br><span class="line">month = <span class="built_in">int</span>(a[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(get_month_days(year,month))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">30</span>   </span><br></pre></td></tr></table></figure><h2 id="8、获取当前时间月份的首日与最后一天"><a href="#8、获取当前时间月份的首日与最后一天" class="headerlink" title="8、获取当前时间月份的首日与最后一天"></a>8、获取当前时间月份的首日与最后一天</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_month_start_and_end</span>(<span class="params">date=datetime.datetime.now(<span class="params"></span>)</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取当前时间的月份首日与最后一天</span></span><br><span class="line"><span class="string">    :param date:</span></span><br><span class="line"><span class="string">    :return: (首日，最后一天)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    year, month = <span class="built_in">str</span>(date).split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>], <span class="built_in">str</span>(date).split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    end = calendar.monthrange(<span class="built_in">int</span>(year), <span class="built_in">int</span>(month))[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;year&#125;</span>-<span class="subst">&#123;month&#125;</span>-01&#x27;</span>, <span class="string">f&#x27;<span class="subst">&#123;year&#125;</span>-<span class="subst">&#123;month&#125;</span>-<span class="subst">&#123;end&#125;</span>&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9、-二维列表、二维数组行求和与列求和"><a href="#9、-二维列表、二维数组行求和与列求和" class="headerlink" title="9、 二维列表、二维数组行求和与列求和"></a>9、 二维列表、二维数组行求和与列求和</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二维数组，对列和行求和</span></span><br><span class="line">a = [</span><br><span class="line">    [<span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">1</span>, <span class="number">4.1</span>],</span><br><span class="line">    [<span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="string">&#x27;123&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>,<span class="number">7</span>],</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aa</span>(<span class="params">x, y</span>):</span><br><span class="line">    x = <span class="number">0</span> <span class="keyword">if</span> <span class="built_in">isinstance</span>(x, <span class="built_in">str</span>) <span class="keyword">else</span> x</span><br><span class="line">    y = <span class="number">0</span> <span class="keyword">if</span> <span class="built_in">isinstance</span>(y, <span class="built_in">str</span>) <span class="keyword">else</span> y</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对行求和</span></span><br><span class="line">row_sum = [reduce(aa, i) <span class="keyword">for</span> i <span class="keyword">in</span> a]</span><br><span class="line"><span class="comment"># 对列求和，只能处理相同长度的子元素</span></span><br><span class="line">column_sum_1 = [reduce(aa, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">zip</span>(*a)]</span><br><span class="line"><span class="comment"># 对列求和，可以处理不同长度的子元素</span></span><br><span class="line">column_sum_2 = <span class="built_in">list</span>(<span class="built_in">dict</span>(pd.DataFrame(a).fillna(<span class="number">0</span>).apply(<span class="keyword">lambda</span> x: <span class="string">&#x27;&#x27;</span> <span class="keyword">if</span> <span class="built_in">any</span>(<span class="built_in">isinstance</span>(d, <span class="built_in">str</span>) <span class="keyword">for</span> d <span class="keyword">in</span> x) <span class="keyword">else</span> <span class="built_in">round</span>(x.<span class="built_in">sum</span>(), <span class="number">2</span>))).values())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;行求和：&#123;&#125;\r\n列求和(相同长度)：&#123;&#125;\r\n列求和：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(row_sum, column_sum_1, column_sum_2))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">行求和：[5.1, 4, 20]</span><br><span class="line">列求和(相同长度)：[0, 0, 0, 4, 12.1]</span><br><span class="line">列求和：[&#x27;&#x27;, 0, &#x27;&#x27;, &#x27;&#x27;, 12.1, 6.0, 7.0]</span><br></pre></td></tr></table></figure><h2 id="10、获取时间字符串的月份数"><a href="#10、获取时间字符串的月份数" class="headerlink" title="10、获取时间字符串的月份数"></a>10、获取时间字符串的月份数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_months</span>(<span class="params">start_month_str, end_month_str</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    # 获取时间字符串中的月份数</span></span><br><span class="line"><span class="string">    :param start_month_str: 开始字符串</span></span><br><span class="line"><span class="string">    :param end_month_str: 结束字符串</span></span><br><span class="line"><span class="string">    :return: 月份数</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    end_month_date = datetime.strptime(end_month_str, <span class="string">&#x27;%Y-%m&#x27;</span>)</span><br><span class="line">    start_month_date = datetime.strptime(start_month_str, <span class="string">&#x27;%Y-%m&#x27;</span>)</span><br><span class="line">    end_year, end_month = end_month_date.year, end_month_date.month</span><br><span class="line">    start_year, start_month = start_month_date.year, start_month_date.month</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (end_year - start_year) *<span class="number">12</span> + (end_month - start_month) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">end_month_str = <span class="string">&#x27;2021-02&#x27;</span></span><br><span class="line">start_month_str = <span class="string">&#x27;2020-07&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(get_months(start_month_str, end_month_str))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><h2 id="11、字符串不足补零"><a href="#11、字符串不足补零" class="headerlink" title="11、字符串不足补零"></a>11、字符串不足补零</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>.zfill(<span class="number">15</span>)) <span class="comment"># 补0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>.rjust(<span class="number">15</span>)) <span class="comment"># 右对齐，补空格</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>.ljust(<span class="number">15</span>)) <span class="comment"># 左对齐，补空格</span></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">0000hello world</span><br><span class="line">    hello world</span><br><span class="line">hello world  </span><br></pre></td></tr></table></figure><h2 id="12、时间戳转字符串日期"><a href="#12、时间戳转字符串日期" class="headerlink" title="12、时间戳转字符串日期"></a>12、时间戳转字符串日期</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">t1 = time.time()</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime(t1)))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">1621741567.082192</span></span><br><span class="line"><span class="number">2021</span>-05-<span class="number">23</span> <span class="number">11</span>:<span class="number">46</span>:07</span><br></pre></td></tr></table></figure><p>使用函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@contact: 微信 1257309054</span></span><br><span class="line"><span class="string">@file: 时间戳转日期.py</span></span><br><span class="line"><span class="string">@time: 2022/6/27 17:16</span></span><br><span class="line"><span class="string">@author: LDC</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确10位长度的时间戳可精确到秒，11-14位长度则是包含了毫秒</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">int_to_datetime</span>(<span class="params">intValue</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">str</span>(intValue)) == <span class="number">10</span>:</span><br><span class="line">        <span class="comment"># 精确到秒</span></span><br><span class="line">        timeValue = time.localtime(intValue)</span><br><span class="line">        tempDate = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, timeValue)</span><br><span class="line">        datetimeValue = datetime.datetime.strptime(tempDate, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">10</span> &lt; <span class="built_in">len</span>(<span class="built_in">str</span>(intValue)) <span class="keyword">and</span> <span class="built_in">len</span>(<span class="built_in">str</span>(intValue)) &lt; <span class="number">15</span>:</span><br><span class="line">        <span class="comment"># 精确到毫秒</span></span><br><span class="line">        k = <span class="built_in">len</span>(<span class="built_in">str</span>(intValue)) - <span class="number">10</span></span><br><span class="line">        timetamp = datetime.datetime.fromtimestamp(intValue / (<span class="number">1</span> * <span class="number">10</span> ** k))</span><br><span class="line">        datetimeValue = timetamp.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S.%f&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> datetimeValue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">time1 = <span class="number">1656321420</span></span><br><span class="line">time2 = <span class="number">1656321086560</span></span><br><span class="line"><span class="built_in">print</span>(int_to_datetime(time1))</span><br><span class="line"><span class="built_in">print</span>(int_to_datetime(time2))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">2022-06-27 17:17:00</span></span><br><span class="line"><span class="string">2022-06-27 17:11:26.560000</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="13、列表转字符串"><a href="#13、列表转字符串" class="headerlink" title="13、列表转字符串"></a>13、列表转字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;,&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,a)))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">`<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>`</span><br></pre></td></tr></table></figure><h2 id="14、pip国内镜像源"><a href="#14、pip国内镜像源" class="headerlink" title="14、pip国内镜像源"></a>14、pip国内镜像源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pip install 库名 -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">清华：-i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line">阿里云：-i http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">中国科技大学 -i https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line"></span><br><span class="line">华中理工大学：-i http://pypi.hustunique.com/</span><br><span class="line"></span><br><span class="line">山东理工大学：-i http://pypi.sdutlinux.org/ </span><br><span class="line"></span><br><span class="line">豆瓣：-i http://pypi.douban.com/simple/</span><br></pre></td></tr></table></figure><h2 id="15、python把时间字符串转换成刚刚、1天前、3个月前、1年前"><a href="#15、python把时间字符串转换成刚刚、1天前、3个月前、1年前" class="headerlink" title="15、python把时间字符串转换成刚刚、1天前、3个月前、1年前"></a>15、python把时间字符串转换成刚刚、1天前、3个月前、1年前</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">date_interval</span>(<span class="params">date_str</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    获取时间间隔</span></span><br><span class="line"><span class="string">    1分钟前，2分钟前，10分钟前，1小时前，2小时前，1天前，2天前，3天前，1个月前，3个月前，1年前，3年前</span></span><br><span class="line"><span class="string">    :param date_str: 时间字符串</span></span><br><span class="line"><span class="string">    :return: 字符串</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    date_str = time.strptime(date_str, <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">    <span class="comment"># 将时间元组转换为时间戳</span></span><br><span class="line">    t = time.mktime(date_str)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当前时间</span></span><br><span class="line">    seconds = time.time() - t</span><br><span class="line"></span><br><span class="line">    years = <span class="built_in">int</span>(seconds // (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">365</span>))</span><br><span class="line">    <span class="keyword">if</span> years:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;&#125;年前&#x27;</span>.<span class="built_in">format</span>(years)</span><br><span class="line">    months = <span class="built_in">int</span>(seconds // (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>))</span><br><span class="line">    <span class="keyword">if</span> months:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;&#125;月前&#x27;</span>.<span class="built_in">format</span>(months)</span><br><span class="line">    days = <span class="built_in">int</span>(seconds // (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>))</span><br><span class="line">    <span class="keyword">if</span> days:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;&#125;天前&#x27;</span>.<span class="built_in">format</span>(days)</span><br><span class="line">    hours = <span class="built_in">int</span>(seconds // (<span class="number">60</span> * <span class="number">60</span>))</span><br><span class="line">    <span class="keyword">if</span> hours:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;&#125;小时前&#x27;</span>.<span class="built_in">format</span>(hours)</span><br><span class="line">    minutes = <span class="built_in">int</span>(seconds // (<span class="number">60</span>))</span><br><span class="line">    <span class="keyword">if</span> minutes:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;&#125;分钟前&#x27;</span>.<span class="built_in">format</span>(minutes)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;刚刚&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    date1 = <span class="string">&#x27;2019-07-10 15:27:51&#x27;</span></span><br><span class="line">    date2 = <span class="string">&#x27;2021-07-10 15:27:51&#x27;</span></span><br><span class="line">    date3 = <span class="string">&#x27;2021-08-10 15:27:51&#x27;</span></span><br><span class="line">    date4 = <span class="string">&#x27;2021-08-12 11:01:51&#x27;</span></span><br><span class="line">    date5 = datetime.datetime.now() + datetime.timedelta(seconds=-<span class="number">3</span>)</span><br><span class="line">    date5 = date5.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(date_interval(date1))</span><br><span class="line">    <span class="built_in">print</span>(date_interval(date2))</span><br><span class="line">    <span class="built_in">print</span>(date_interval(date3))</span><br><span class="line">    <span class="built_in">print</span>(date_interval(date4))</span><br><span class="line">    <span class="built_in">print</span>(date_interval(date5))</span><br></pre></td></tr></table></figure><h2 id="16、python获取电脑磁盘、CPU、内存使用情况"><a href="#16、python获取电脑磁盘、CPU、内存使用情况" class="headerlink" title="16、python获取电脑磁盘、CPU、内存使用情况"></a>16、python获取电脑磁盘、CPU、内存使用情况</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"><span class="comment">#  pip install psutil</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取本机磁盘使用率和剩余空间G信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_disk_info</span>():</span><br><span class="line">    <span class="comment"># 循环磁盘分区</span></span><br><span class="line">    content = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> disk <span class="keyword">in</span> psutil.disk_partitions():</span><br><span class="line">        <span class="comment"># 读写方式 光盘 or 有效磁盘类型</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;cdrom&#x27;</span> <span class="keyword">in</span> disk.opts <span class="keyword">or</span> disk.fstype == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        disk_name_arr = disk.device.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        disk_name = disk_name_arr[<span class="number">0</span>]</span><br><span class="line">        disk_info = psutil.disk_usage(disk.device)</span><br><span class="line">        <span class="comment"># 磁盘剩余空间，单位G</span></span><br><span class="line">        free_disk_size = disk_info.free//<span class="number">1024</span>//<span class="number">1024</span>//<span class="number">1024</span></span><br><span class="line">        <span class="comment"># 当前磁盘使用率和剩余空间G信息</span></span><br><span class="line">        info = <span class="string">&quot;&#123;&#125;盘使用率：&#123;&#125;%%， 剩余空间：&#123;&#125;G &quot;</span>.<span class="built_in">format</span>(disk_name, <span class="built_in">str</span>(disk_info.percent), free_disk_size)</span><br><span class="line">        <span class="comment"># 拼接多个磁盘的信息</span></span><br><span class="line">        content = content + info</span><br><span class="line">    <span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># cpu信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cpu_info</span>():</span><br><span class="line">    cpu_percent = psutil.cpu_percent(interval=<span class="number">1</span>)</span><br><span class="line">    cpu_info = <span class="string">&quot;CPU使用率：%i%%&quot;</span> % cpu_percent</span><br><span class="line">    <span class="built_in">print</span>(cpu_info)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内存信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_memory_info</span>():</span><br><span class="line">    virtual_memory = psutil.virtual_memory()</span><br><span class="line">    used_memory = virtual_memory.used/<span class="number">1024</span>/<span class="number">1024</span>/<span class="number">1024</span></span><br><span class="line">    free_memory = virtual_memory.free/<span class="number">1024</span>/<span class="number">1024</span>/<span class="number">1024</span></span><br><span class="line">    memory_percent = virtual_memory.percent</span><br><span class="line">    memory_info = <span class="string">&quot;内存使用：%0.2fG，使用率%0.1f%%，剩余内存：%0.2fG&quot;</span> % (used_memory, memory_percent, free_memory)</span><br><span class="line">    <span class="built_in">print</span>(memory_info)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    get_disk_info()</span><br><span class="line">    get_cpu_info()</span><br><span class="line">    get_memory_info()</span><br></pre></td></tr></table></figure><h2 id="17、max比较字典列表"><a href="#17、max比较字典列表" class="headerlink" title="17、max比较字典列表"></a>17、max比较字典列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">使用max函数比较字典列表对象</span></span><br><span class="line"><span class="string">需求：找出用户组最大id的字典</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">com_id</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    比较用用户ids列表</span></span><br><span class="line"><span class="string">    :param f: 字典</span></span><br><span class="line"><span class="string">    :return: 返回最大的用户id</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(f[<span class="string">&#x27;user_ids&#x27;</span>])</span><br><span class="line"></span><br><span class="line">friends_added = [</span><br><span class="line">        &#123;<span class="string">&#x27;user_ids&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>], <span class="string">&#x27;create_at&#x27;</span>: <span class="string">&#x27;2020-01-01&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;user_ids&#x27;</span>: [<span class="number">3</span>, <span class="number">6</span>], <span class="string">&#x27;create_at&#x27;</span>: <span class="string">&#x27;2020-01-02&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;user_ids&#x27;</span>: [<span class="number">2</span>, <span class="number">1</span>], <span class="string">&#x27;create_at&#x27;</span>: <span class="string">&#x27;2020-02-02&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;user_ids&#x27;</span>: [<span class="number">4</span>, <span class="number">1</span>], <span class="string">&#x27;create_at&#x27;</span>: <span class="string">&#x27;2020-02-02&#x27;</span>&#125;,</span><br><span class="line">    ]</span><br><span class="line"><span class="comment"># max函数中使用key参数，指定自定义函数来比较</span></span><br><span class="line">item = <span class="built_in">max</span>(friends_added, key=com_id)</span><br><span class="line">item_1 = <span class="built_in">max</span>(friends_added, key=<span class="keyword">lambda</span> f: <span class="built_in">max</span>(f[<span class="string">&#x27;user_ids&#x27;</span>])) <span class="comment"># com_id可以转成lambda函数</span></span><br><span class="line"><span class="built_in">print</span>(item)</span><br><span class="line"><span class="built_in">print</span>(item_1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;user_ids&#x27;</span>: [<span class="number">3</span>, <span class="number">6</span>], <span class="string">&#x27;create_at&#x27;</span>: <span class="string">&#x27;2020-01-02&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;user_ids&#x27;</span>: [<span class="number">3</span>, <span class="number">6</span>], <span class="string">&#x27;create_at&#x27;</span>: <span class="string">&#x27;2020-01-02&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="18、-列表取奇数下标值"><a href="#18、-列表取奇数下标值" class="headerlink" title="18、 列表取奇数下标值"></a>18、 列表取奇数下标值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;奇数下标值&#x27;</span>,list1[<span class="number">1</span>::<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">奇数下标值 [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="19、列表取偶数下标值"><a href="#19、列表取偶数下标值" class="headerlink" title="19、列表取偶数下标值"></a>19、列表取偶数下标值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;偶数下标值&#x27;</span>,list1[::<span class="number">2</span>])</span><br><span class="line">偶数下标值 [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="20、列表相同元素分类、分组"><a href="#20、列表相同元素分类、分组" class="headerlink" title="20、列表相同元素分类、分组"></a>20、列表相同元素分类、分组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">a =[<span class="built_in">list</span>(group) <span class="keyword">for</span> key, group <span class="keyword">in</span> itertools.groupby(data)]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">[[<span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>], [<span class="number">1</span>], [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]]</span><br></pre></td></tr></table></figure><h2 id="21、numpy二维数组获取某一列"><a href="#21、numpy二维数组获取某一列" class="headerlink" title="21、numpy二维数组获取某一列"></a>21、numpy二维数组获取某一列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>],</span><br><span class="line">    [<span class="number">13.2</span>, <span class="number">14.8</span>, <span class="number">15.9</span>, <span class="number">16.10</span>, <span class="number">16.11</span>, <span class="number">17.12</span>],</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">a_np = np.array(a)  <span class="comment"># 把二维列表转成numpy数组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一行&#x27;</span>, a_np[<span class="number">0</span>].tolist())  <span class="comment"># 获取第一行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一列&#x27;</span>, a_np[:, <span class="number">0</span>].tolist())  <span class="comment"># 获取第一列</span></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">第一行 [<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>, <span class="number">5.0</span>, <span class="number">6.0</span>]</span><br><span class="line">第一列 [<span class="number">1.0</span>, <span class="number">7.0</span>, <span class="number">13.2</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">原文链接:https://liangdongchang.blog.csdn.net/article/details/884251</summary>
    
    
    
    <category term="Python" scheme="http://example.com/category/Python/"/>
    
    
    <category term="Python组件" scheme="http://example.com/tag/Python%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>好玩的Python代码[摘录]（一）</title>
    <link href="http://example.com/post/a7b132c6.html"/>
    <id>http://example.com/post/a7b132c6.html</id>
    <published>2022-08-17T07:01:22.000Z</published>
    <updated>2022-08-20T09:13:33.469Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文中还有 web开发常用的组件代码，由于我不做Python web 开发。所以去掉了，原文一共是有120多个代码的。</p><p>如果需要请支持原文作者！</p><p>原文链接:<a href="https://liangdongchang.blog.csdn.net/article/details/884251">https://liangdongchang.blog.csdn.net/article/details/884251</a></p></blockquote><h2 id="1-生成6位数字随机验证码"><a href="#1-生成6位数字随机验证码" class="headerlink" title="1. 生成6位数字随机验证码"></a>1. 生成6位数字随机验证码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">num_code</span>(<span class="params">length=<span class="number">6</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成长度为length的数字随机验证码</span></span><br><span class="line"><span class="string">    :param length: 验证码长度</span></span><br><span class="line"><span class="string">    :return: 验证码</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(random.choice(string.digits) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, length))</span><br></pre></td></tr></table></figure><h2 id="2、生成二维码"><a href="#2、生成二维码" class="headerlink" title="2、生成二维码"></a>2、生成二维码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> qrcode</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maker_qrcode</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成二维码</span></span><br><span class="line"><span class="string">    :param url: 需要生成二维码的url</span></span><br><span class="line"><span class="string">    :return: 返回图片字节流</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    image = qrcode.make(url)  <span class="comment"># 创建二维码片</span></span><br><span class="line"></span><br><span class="line">    buffer = io.BytesIO()</span><br><span class="line">    <span class="comment"># 将图片内容丢入容器</span></span><br><span class="line">    image.save(buffer, <span class="string">&#x27;png&#x27;</span>)</span><br><span class="line">    <span class="comment"># 返回容器内的字节</span></span><br><span class="line">    <span class="keyword">return</span> buffer.getvalue()</span><br><span class="line">    </span><br><span class="line">或者</span><br><span class="line"><span class="keyword">from</span> .settings <span class="keyword">import</span> BASE_DIR</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_qrcode</span>(<span class="params">name, url</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成机器扫码支付二维码</span></span><br><span class="line"><span class="string">    :param name: 图片名称</span></span><br><span class="line"><span class="string">    :param url: 支付路由</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    img = qrcode.make(url, border=<span class="number">0</span>)  <span class="comment"># 创建二维码片</span></span><br><span class="line">    save_path = BASE_DIR + <span class="string">&#x27;/&#x27;</span> + name + <span class="string">&#x27;.png&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(save_path)</span><br><span class="line">    img.save(save_path)</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-微信群发"><a href="#3-微信群发" class="headerlink" title="3.微信群发"></a>3.微信群发</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf8</span></span><br><span class="line"><span class="keyword">import</span> itchat, time</span><br><span class="line"></span><br><span class="line">itchat.auto_login(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">SINCERE_WISH = <span class="string">u&#x27;祝%s新年快乐！&#x27;</span></span><br><span class="line"></span><br><span class="line">friendList = itchat.get_friends(update=<span class="literal">True</span>)[<span class="number">35</span>:]</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>  index,friend <span class="keyword">in</span> <span class="built_in">enumerate</span>(friendList):</span><br><span class="line">    <span class="built_in">print</span>(index,friend[<span class="string">&#x27;DisplayName&#x27;</span>],friend[<span class="string">&#x27;NickName&#x27;</span>])</span><br><span class="line">    itchat.send(SINCERE_WISH % (friend[<span class="string">&#x27;DisplayName&#x27;</span>]</span><br><span class="line">                                <span class="keyword">or</span> friend[<span class="string">&#x27;NickName&#x27;</span>]), friend[<span class="string">&#x27;UserName&#x27;</span>])</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;备注名称&#x27;</span>,friend[<span class="string">&#x27;DisplayName&#x27;</span>],<span class="string">&#x27;昵称&#x27;</span>,friend[<span class="string">&#x27;NickName&#x27;</span>],<span class="string">&#x27;用户名&#x27;</span>,friend[<span class="string">&#x27;UserName&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----end----&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># 发送文本</span></span><br><span class="line"><span class="string">itchat.send(&#x27;Hello, WeChat!&#x27;)</span></span><br><span class="line"><span class="string"># 发送图片</span></span><br><span class="line"><span class="string">itchat.send_image(&#x27;my_picture.png&#x27;)</span></span><br><span class="line"><span class="string"># 发送视频</span></span><br><span class="line"><span class="string">itchat.send_video(&#x27;my_video.mov&#x27;)</span></span><br><span class="line"><span class="string"># 发送文件</span></span><br><span class="line"><span class="string">itchat.send_file(&#x27;my_file.zip&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="4、微信自动回复"><a href="#4、微信自动回复" class="headerlink" title="4、微信自动回复"></a>4、微信自动回复</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> itchat</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#图灵机器人</span></span><br><span class="line"><span class="comment">#http://www.tuling123.com/member/robot/1380138/center/frame.jhtml?page=0&amp;child=0获取apikey</span></span><br><span class="line">KEY = <span class="string">&#x27;你的KEY&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_response</span>(<span class="params">msg</span>):</span><br><span class="line">    apiUrl = <span class="string">&#x27;http://www.tuling123.com/openapi/api&#x27;</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;key&#x27;</span>    : KEY,</span><br><span class="line">        <span class="string">&#x27;info&#x27;</span>   : msg,</span><br><span class="line">        <span class="string">&#x27;userid&#x27;</span> : <span class="string">&#x27;wechat-robot&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.post(apiUrl, data=data).json()</span><br><span class="line">        <span class="keyword">return</span> r.get(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@itchat.msg_register(<span class="params">itchat.content.TEXT</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tuling_reply</span>(<span class="params">msg</span>):</span><br><span class="line">    defaultReply = <span class="string">&#x27;I received: &#x27;</span> + msg[<span class="string">&#x27;Text&#x27;</span>]</span><br><span class="line">    robots=[<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>]</span><br><span class="line">    reply = get_response(msg[<span class="string">&#x27;Text&#x27;</span>])+random.choice(robots)</span><br><span class="line">    <span class="keyword">return</span> reply <span class="keyword">or</span> defaultReply</span><br><span class="line"></span><br><span class="line">itchat.auto_login(enableCmdQR=<span class="literal">False</span>)</span><br><span class="line">itchat.run()</span><br></pre></td></tr></table></figure><h2 id="5、数据库中给表创建数据"><a href="#5、数据库中给表创建数据" class="headerlink" title="5、数据库中给表创建数据"></a>5、数据库中给表创建数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createData</span>(<span class="params">dataDict,tableName</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    给数据表创建数据</span></span><br><span class="line"><span class="string">    :param dataDict: 字典</span></span><br><span class="line"><span class="string">    :param tableName: 表名</span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">#连接数据库</span></span><br><span class="line">    conn = pymysql.connect(</span><br><span class="line">        host=<span class="string">&#x27;192.168.0.188&#x27;</span>, <span class="comment">#数据库所在地址URL</span></span><br><span class="line">        user=<span class="string">&#x27;root&#x27;</span>, <span class="comment">#用户名</span></span><br><span class="line">        password=<span class="string">&#x27;123456&#x27;</span>, <span class="comment">#密码</span></span><br><span class="line">        database=<span class="string">&#x27;名称&#x27;</span>, <span class="comment">#数据库名称</span></span><br><span class="line">        port=<span class="number">3306</span>,  <span class="comment">#端口号</span></span><br><span class="line">        charset=<span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment">#拿到查询游标</span></span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    clos,value = <span class="built_in">zip</span>(*dataDict.items())</span><br><span class="line">    sql = <span class="string">&quot;INSERT INTO `%s`(%s) VALUES (%s)&quot;</span> % (tableName,</span><br><span class="line">                                                <span class="string">&#x27;,&#x27;</span>.join(clos),</span><br><span class="line">                                                <span class="string">&#x27;,&#x27;</span>.join([<span class="string">&#x27;%s&#x27;</span>] * <span class="built_in">len</span>(value))</span><br><span class="line">                                                )</span><br><span class="line">    <span class="built_in">print</span>(sql)</span><br><span class="line">    cursor.execute(sql, value)</span><br><span class="line">    conn.commit()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Done&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="6-捕捉异常"><a href="#6-捕捉异常" class="headerlink" title="6.捕捉异常"></a>6.捕捉异常</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 异常类型 <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">异常类型</span><br><span class="line">Exception  全部异常</span><br><span class="line">AttributeError 试图访问一个对象没有的属性，比如foo.x，但是foo没有属性x</span><br><span class="line">IOError 输入/输出异常；基本上是无法打开文件</span><br><span class="line">ImportError 无法引入模块或包；基本上是路径问题或名称错误</span><br><span class="line">IndentationError 语法错误（的子类） ；代码没有正确对齐</span><br><span class="line">IndexError 下标索引超出序列边界，比如当x只有三个元素，却试图访问x[<span class="number">5</span>]</span><br><span class="line">KeyError 试图访问字典里不存在的键</span><br><span class="line">KeyboardInterrupt Ctrl+C被按下</span><br><span class="line">NameError 使用一个还未被赋予对象的变量</span><br><span class="line">SyntaxError Python代码非法，代码不能编译(个人认为这是语法错误，写错了）</span><br><span class="line">TypeError 传入对象类型与要求的不符合</span><br><span class="line">UnboundLocalError 试图访问一个还未被设置的局部变量，基本上是由于另有一个同名的全局变量，导致你以为正在访问它</span><br><span class="line">ValueError 传入一个调用者不期望的值，即使值的类型是正确的</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7、获取当前时间"><a href="#7、获取当前时间" class="headerlink" title="7、获取当前时间"></a>7、获取当前时间</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">current_time = <span class="built_in">str</span>(datetime.datetime.now())[:<span class="number">19</span>]</span><br><span class="line"><span class="built_in">print</span>(current_time)</span><br><span class="line"></span><br><span class="line">输出格式如：<span class="number">2018</span>-<span class="number">10</span>-<span class="number">20</span> <span class="number">10</span>:01:<span class="number">43</span></span><br><span class="line">local_time = time.strftime(<span class="string">&#x27;%Y%m%d%H%M%S&#x27;</span>, time.localtime(time.time()))</span><br><span class="line"><span class="built_in">print</span>(local_time)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8、linux后台运行python程序"><a href="#8、linux后台运行python程序" class="headerlink" title="8、linux后台运行python程序"></a>8、linux后台运行python程序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> /home/project_venv/user/bin/python3 -u /home/user/user_server.py &gt;&gt; /home/user/user.log 2&gt;&amp;1 &amp;   </span><br></pre></td></tr></table></figure><h2 id="9、写-x2F-读CSV文件，查看是否存在，若存在就从csv中删除"><a href="#9、写-x2F-读CSV文件，查看是否存在，若存在就从csv中删除" class="headerlink" title="9、写&#x2F;读CSV文件，查看是否存在，若存在就从csv中删除"></a>9、写&#x2F;读CSV文件，查看是否存在，若存在就从csv中删除</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_invite_code</span>(<span class="params">random_code_pool=<span class="literal">None</span>, length=<span class="number">6</span>, num=<span class="number">10</span>, is_append=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    创建随机邀请码,并写入txt文件</span></span><br><span class="line"><span class="string">    :param: random_code_pool 随机邀请码</span></span><br><span class="line"><span class="string">    :param: length 邀请码长度</span></span><br><span class="line"><span class="string">    :param: num 邀请码个数</span></span><br><span class="line"><span class="string">    :param: is_append True追加,False 覆盖</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> random_code_pool:</span><br><span class="line">        code_pool = string.ascii_uppercase + string.digits</span><br><span class="line">        random_code_pool = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">            s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">                s += random.choice(code_pool)</span><br><span class="line">            <span class="keyword">if</span> s <span class="keyword">and</span> s <span class="keyword">not</span> <span class="keyword">in</span> random_code_pool:</span><br><span class="line">                random_code_pool.append(s)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入方法。是追加还是覆盖</span></span><br><span class="line">    write_method = <span class="string">&#x27;a+&#x27;</span> <span class="keyword">if</span> is_append <span class="keyword">else</span> <span class="string">&#x27;w&#x27;</span></span><br><span class="line">    <span class="comment"># 写入文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./invite_code.csv&#x27;</span>, write_method, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        writer = csv.writer(f)</span><br><span class="line">        <span class="keyword">for</span> rowData <span class="keyword">in</span> random_code_pool:</span><br><span class="line">            <span class="comment"># 按行写入</span></span><br><span class="line">            writer.writerow((rowData,))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_invite_code</span>(<span class="params">code</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    查看邀请码是否存在txt文件中，</span></span><br><span class="line"><span class="string">    若存在就返回True，并在txt文件中删除</span></span><br><span class="line"><span class="string">    若不存在就返回False</span></span><br><span class="line"><span class="string">    :param code:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    code_pool = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./invite_code.csv&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>,errors=<span class="string">&#x27;ignore&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        allFileInfo = csv.reader(f)</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> allFileInfo:</span><br><span class="line">            code_pool.append(row[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> code <span class="keyword">in</span> code_pool:</span><br><span class="line">        <span class="comment"># 删除查询的code</span></span><br><span class="line">        code_pool.pop(code_pool.index(code))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 重新写入文件</span></span><br><span class="line">        create_invite_code(code_pool,is_append=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># create_invite_code(length=9,num=100)</span></span><br><span class="line">    <span class="built_in">print</span>(check_invite_code(<span class="string">&#x27;WJ4PSTJG2&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10、删除指定格式的文件"><a href="#10、删除指定格式的文件" class="headerlink" title="10、删除指定格式的文件"></a>10、删除指定格式的文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_specified_format_file</span>(<span class="params">file_dir, format_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    删除指定格式的文件</span></span><br><span class="line"><span class="string">    :param file_dir: 文件根目录</span></span><br><span class="line"><span class="string">    :param format_name: 格式</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(file_dir):</span><br><span class="line">        <span class="comment"># print(root) #当前目录路径</span></span><br><span class="line">        <span class="comment"># print(dirs) #当前路径下所有子目录</span></span><br><span class="line">        <span class="comment"># print(files) #当前路径下所有非目录子文件</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> re.match(format_name, file):</span><br><span class="line">                <span class="built_in">print</span>(os.path.join(root, file))</span><br><span class="line">                os.remove(os.path.join(root, file))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">remove_specified_format_file(<span class="string">r&#x27;D:\学习\LDC\java&#x27;</span>, <span class="string">r&#x27;\._*&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="11、计算文件总数"><a href="#11、计算文件总数" class="headerlink" title="11、计算文件总数"></a>11、计算文件总数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file_count</span>(<span class="params">file_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :param file_dir: 文件根目录</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(file_dir):</span><br><span class="line">        <span class="comment"># print(root) #当前目录路径</span></span><br><span class="line">        <span class="comment"># print(dirs) #当前路径下所有子目录</span></span><br><span class="line">        <span class="comment"># print(files) #当前路径下所有非目录子文件</span></span><br><span class="line">        count += <span class="built_in">len</span>(files)</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(file_count(<span class="string">r&#x27;D:\学习\LDC\java\Java学习\newEstore\estore\js&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="12、计算文件夹大小"><a href="#12、计算文件夹大小" class="headerlink" title="12、计算文件夹大小"></a>12、计算文件夹大小</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file_size</span>(<span class="params">file_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    删除指定格式的文件</span></span><br><span class="line"><span class="string">    :param file_dir: 文件根目录</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    size = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(file_dir):</span><br><span class="line">        <span class="comment"># print(root) #当前目录路径</span></span><br><span class="line">        <span class="comment"># print(dirs) #当前路径下所有子目录</span></span><br><span class="line">        <span class="comment"># print(files) #当前路径下所有非目录子文件</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            size += os.path.getsize(os.path.join(root, file))</span><br><span class="line"><span class="comment"># M为单位</span></span><br><span class="line">    <span class="keyword">return</span> size / <span class="number">1024</span> / <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_name = <span class="string">r&#x27;D:\学习&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(file_size(file_name))</span><br></pre></td></tr></table></figure><h2 id="13、时间格式字符串相减"><a href="#13、时间格式字符串相减" class="headerlink" title="13、时间格式字符串相减"></a>13、时间格式字符串相减</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = <span class="built_in">str</span>(datetime.datetime.now())[:<span class="number">19</span>]</span><br><span class="line">time.sleep(<span class="number">60</span>)</span><br><span class="line">end = <span class="built_in">str</span>(datetime.datetime.now())[:<span class="number">19</span>]</span><br><span class="line"><span class="built_in">print</span>(start,end)</span><br><span class="line">link_start = datetime.datetime.strptime(start, <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">link_end = datetime.datetime.strptime(end, <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">link_min = <span class="built_in">round</span>((link_end - link_start).seconds / <span class="number">60</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(link_min,<span class="string">&#x27;分钟&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="14、显示循环进度条"><a href="#14、显示循环进度条" class="headerlink" title="14、显示循环进度条"></a>14、显示循环进度条</h2><p>参考：<a href="https://blog.csdn.net/zejianli/article/details/77915751">https://blog.csdn.net/zejianli/article/details/77915751</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm,trange</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">text = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> tqdm([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>]):</span><br><span class="line">    text = text + char</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_bar</span>(<span class="params">percent, index, total,start_time, start_str=<span class="string">&#x27;&#x27;</span>, end_str=<span class="string">&#x27;&#x27;</span>, total_length=<span class="number">100</span></span>):</span><br><span class="line">    <span class="comment"># 进度条</span></span><br><span class="line">    percent_length = <span class="built_in">int</span>(percent)</span><br><span class="line">    bar = <span class="string">&#x27;\r&#x27;</span> + start_str + (<span class="string">&#x27;\033[1;31;41m \033[0m&#x27;</span> * percent_length + <span class="string">&#x27;\033[1;37;47m \033[0m&#x27;</span> * (</span><br><span class="line">                total_length - percent_length)) + <span class="string">f&#x27;  <span class="subst">&#123;<span class="built_in">round</span>(index / total * <span class="number">100</span>, <span class="number">2</span>)&#125;</span>%  &#x27;</span> + <span class="string">f&#x27; <span class="subst">&#123;index&#125;</span>|<span class="subst">&#123;end_str&#125;</span>&#x27;</span>+ <span class="string">f&#x27;   |已进行时间: <span class="subst">&#123;<span class="built_in">round</span>(time.time() - start_time, <span class="number">2</span>)&#125;</span>秒&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(bar, end=<span class="string">&#x27;&#x27;</span>, flush=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data_set = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">23</span>)]</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    total = <span class="built_in">len</span>(data_set)</span><br><span class="line">    end_str = <span class="string">&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(total)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> data_set:</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        process_bar(i * <span class="number">100</span> / total, i, total, start_time, start_str=<span class="string">&#x27;&#x27;</span>, end_str=end_str, total_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式三</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">d = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(d)):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    sys.stdout.write(<span class="string">&#x27;\r&gt;&gt; Downloading  %.2f%%&#x27;</span> % (<span class="built_in">float</span>(i) / <span class="built_in">float</span>(<span class="built_in">len</span>(d)) * <span class="number">100.0</span>))</span><br><span class="line">sys.stdout.flush()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="15、把列表中的字典转成csv文件"><a href="#15、把列表中的字典转成csv文件" class="headerlink" title="15、把列表中的字典转成csv文件"></a>15、把列表中的字典转成csv文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">lists = [&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;,&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">3</span>&#125;]</span><br><span class="line">df = pd.DataFrame(lists)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">df.to_csv(<span class="string">&#x27;result2.csv&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="16、linux根据端口杀进程"><a href="#16、linux根据端口杀进程" class="headerlink" title="16、linux根据端口杀进程"></a>16、linux根据端口杀进程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">killport</span>(<span class="params">port</span>):</span><br><span class="line">    command = <span class="string">&#x27;&#x27;&#x27;kill -9 $(netstat -nlp | grep :&#x27;&#x27;&#x27;</span> + <span class="built_in">str</span>(port) + <span class="string">&#x27;&#x27;&#x27; | awk &#x27;&#123;print $7&#125;&#x27; | awk -F&quot;/&quot; &#x27;&#123; print $1 &#125;&#x27;)&#x27;&#x27;&#x27;</span></span><br><span class="line">    os.system(command)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始执行</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    port = <span class="number">4237</span></span><br><span class="line">    killport(port)</span><br></pre></td></tr></table></figure><h2 id="17、判断是什么系统"><a href="#17、判断是什么系统" class="headerlink" title="17、判断是什么系统"></a>17、判断是什么系统</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> platform</span><br><span class="line">PlATFORM = platform.system()</span><br><span class="line"><span class="keyword">if</span> PlATFORM == <span class="string">&quot;Linux&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;其他&#x27;</span>) </span><br></pre></td></tr></table></figure><h2 id="18、日志输出模块"><a href="#18、日志输出模块" class="headerlink" title="18、日志输出模块"></a>18、日志输出模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="comment"># 全局函数</span></span><br><span class="line">PlATFORM = platform.system()</span><br><span class="line"><span class="keyword">if</span> (PlATFORM == <span class="string">&quot;Linux&quot;</span>):</span><br><span class="line">    <span class="comment"># linux系统,文件保存在var下</span></span><br><span class="line">    SERVER_LOG_PATH = <span class="string">&#x27;/var/mylog.log&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># windows系统,文件保存在D盘下</span></span><br><span class="line">    SERVER_LOG_PATH = <span class="string">&#x27;D:\mylog.log&#x27;</span></span><br><span class="line"><span class="comment"># 定义一个logging的对象，命名为mylog</span></span><br><span class="line">LOGGER = logging.getLogger(<span class="string">&#x27;mylog&#x27;</span>)</span><br><span class="line"><span class="comment"># 设置级别为WARNING</span></span><br><span class="line">LOGGER.setLevel(logging.WARNING)</span><br><span class="line"><span class="comment"># 创建一个handler，用于写入日志文件</span></span><br><span class="line">fh = logging.FileHandler(SERVER_LOG_PATH, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">fh.setLevel(logging.WARNING)</span><br><span class="line"><span class="comment"># 定义handler的输出格式</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>, datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">fh.setFormatter(formatter)</span><br><span class="line"><span class="comment"># 给Logger添加handler</span></span><br><span class="line">LOGGER.addHandler(fh)</span><br><span class="line"><span class="comment"># 不在控制台显示</span></span><br><span class="line">LOGGER.propagate = <span class="literal">False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="19、字典排序"><a href="#19、字典排序" class="headerlink" title="19、字典排序"></a>19、字典排序</h2><p>字典在内存中发布是无序的，当想对键值或者键名进行排序时可以先把字典转成元组，这可以达到排序的目的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">score = &#123;<span class="string">&#x27;小明&#x27;</span>: &#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">90</span>, &#125;,</span><br><span class="line">     <span class="string">&#x27;小红&#x27;</span>: &#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">61</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">59</span>, &#125;,</span><br><span class="line">     <span class="string">&#x27;小黑&#x27;</span>: &#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">70</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">65</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">70</span>, &#125;,</span><br><span class="line">     <span class="string">&#x27;小白&#x27;</span>: &#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">80</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">65</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">80</span>, &#125;,</span><br><span class="line">     &#125;</span><br><span class="line"><span class="comment"># 对姓名进行排序，即对键名进行排序</span></span><br><span class="line">b = <span class="built_in">sorted</span>(score.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">show_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> info <span class="keyword">in</span> b:</span><br><span class="line">    <span class="comment"># print(info)</span></span><br><span class="line">    key, value = info[<span class="number">0</span>], info[<span class="number">1</span>]</span><br><span class="line">    show_str += <span class="string">&#x27;姓名：&#123;&#125;,平均分：&#123;&#125;，成绩：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(key,value[<span class="string">&#x27;avg_score&#x27;</span>], value) + <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;对姓名进行排序&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(show_str)</span><br><span class="line"><span class="comment"># 对平均分进行排序</span></span><br><span class="line">b = <span class="built_in">sorted</span>(score.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>][<span class="string">&#x27;avg_score&#x27;</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">show_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> info <span class="keyword">in</span> b:</span><br><span class="line">    <span class="comment"># print(info)</span></span><br><span class="line">    key, value = info[<span class="number">0</span>], info[<span class="number">1</span>]</span><br><span class="line">    show_str += <span class="string">&#x27;姓名：&#123;&#125;,平均分：&#123;&#125;，成绩：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(key,value[<span class="string">&#x27;avg_score&#x27;</span>], value) + <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;对平均分进行排序&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(show_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对英语成绩进行排序</span></span><br><span class="line">b = <span class="built_in">sorted</span>(score.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>][<span class="string">&#x27;English&#x27;</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">show_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> info <span class="keyword">in</span> b:</span><br><span class="line">    <span class="comment"># print(info)</span></span><br><span class="line">    key, value = info[<span class="number">0</span>], info[<span class="number">1</span>]</span><br><span class="line">    show_str += <span class="string">&#x27;姓名：&#123;&#125;,平均分：&#123;&#125;，成绩：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(key,value[<span class="string">&#x27;avg_score&#x27;</span>], value) + <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;对英语成绩进行排序&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(show_str)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">对姓名进行排序</span><br><span class="line">姓名：小黑,平均分：70，成绩：&#123;&#x27;avg_score&#x27;: 70, &#x27;English&#x27;: 75, &#x27;Math&#x27;: 65, &#x27;Chniese&#x27;: 70&#125;</span><br><span class="line">姓名：小红,平均分：60，成绩：&#123;&#x27;avg_score&#x27;: 60, &#x27;English&#x27;: 60, &#x27;Math&#x27;: 61, &#x27;Chniese&#x27;: 59&#125;</span><br><span class="line">姓名：小白,平均分：80，成绩：&#123;&#x27;avg_score&#x27;: 80, &#x27;English&#x27;: 95, &#x27;Math&#x27;: 65, &#x27;Chniese&#x27;: 80&#125;</span><br><span class="line">姓名：小明,平均分：90，成绩：&#123;&#x27;avg_score&#x27;: 90, &#x27;English&#x27;: 90, &#x27;Math&#x27;: 90, &#x27;Chniese&#x27;: 90&#125;</span><br><span class="line"></span><br><span class="line">对平均分进行排序</span><br><span class="line">姓名：小明,平均分：90，成绩：&#123;&#x27;avg_score&#x27;: 90, &#x27;English&#x27;: 90, &#x27;Math&#x27;: 90, &#x27;Chniese&#x27;: 90&#125;</span><br><span class="line">姓名：小白,平均分：80，成绩：&#123;&#x27;avg_score&#x27;: 80, &#x27;English&#x27;: 95, &#x27;Math&#x27;: 65, &#x27;Chniese&#x27;: 80&#125;</span><br><span class="line">姓名：小黑,平均分：70，成绩：&#123;&#x27;avg_score&#x27;: 70, &#x27;English&#x27;: 75, &#x27;Math&#x27;: 65, &#x27;Chniese&#x27;: 70&#125;</span><br><span class="line">姓名：小红,平均分：60，成绩：&#123;&#x27;avg_score&#x27;: 60, &#x27;English&#x27;: 60, &#x27;Math&#x27;: 61, &#x27;Chniese&#x27;: 59&#125;</span><br><span class="line"></span><br><span class="line">对英语成绩进行排序</span><br><span class="line">姓名：小白,平均分：80，成绩：&#123;&#x27;avg_score&#x27;: 80, &#x27;English&#x27;: 95, &#x27;Math&#x27;: 65, &#x27;Chniese&#x27;: 80&#125;</span><br><span class="line">姓名：小明,平均分：90，成绩：&#123;&#x27;avg_score&#x27;: 90, &#x27;English&#x27;: 90, &#x27;Math&#x27;: 90, &#x27;Chniese&#x27;: 90&#125;</span><br><span class="line">姓名：小黑,平均分：70，成绩：&#123;&#x27;avg_score&#x27;: 70, &#x27;English&#x27;: 75, &#x27;Math&#x27;: 65, &#x27;Chniese&#x27;: 70&#125;</span><br><span class="line">姓名：小红,平均分：60，成绩：&#123;&#x27;avg_score&#x27;: 60, &#x27;English&#x27;: 60, &#x27;Math&#x27;: 61, &#x27;Chniese&#x27;: 59&#125;</span><br></pre></td></tr></table></figure><h2 id="20、对列表中字典按多个键值排序"><a href="#20、对列表中字典按多个键值排序" class="headerlink" title="20、对列表中字典按多个键值排序"></a>20、对列表中字典按多个键值排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line">data = [</span><br><span class="line">    &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">300</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">255</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">256</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">455</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">322</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">676</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line">data = <span class="built_in">sorted</span>(data, key=itemgetter(<span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;position&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;&#x27;code&#x27;: 1, &#x27;position&#x27;: 300, &#x27;time&#x27;: &#x27;1620442242&#x27;&#125;, </span><br><span class="line">&#123;&#x27;code&#x27;: 1, &#x27;position&#x27;: 322, &#x27;time&#x27;: &#x27;1620442242&#x27;&#125;, </span><br><span class="line">&#123;&#x27;code&#x27;: 1, &#x27;position&#x27;: 500, &#x27;time&#x27;: &#x27;1620442242&#x27;&#125;, </span><br><span class="line">&#123;&#x27;code&#x27;: 2, &#x27;position&#x27;: 255, &#x27;time&#x27;: &#x27;1620442242&#x27;&#125;, </span><br><span class="line">&#123;&#x27;code&#x27;: 3, &#x27;position&#x27;: 256, &#x27;time&#x27;: &#x27;1620442242&#x27;&#125;, </span><br><span class="line">&#123;&#x27;code&#x27;: 5, &#x27;position&#x27;: 455, &#x27;time&#x27;: &#x27;1620442242&#x27;&#125;, </span><br><span class="line">&#123;&#x27;code&#x27;: 6, &#x27;position&#x27;: 676, &#x27;time&#x27;: &#x27;1620442242&#x27;&#125;]</span><br></pre></td></tr></table></figure><h2 id="21、时间格式与字符串互转、比较大小"><a href="#21、时间格式与字符串互转、比较大小" class="headerlink" title="21、时间格式与字符串互转、比较大小"></a>21、时间格式与字符串互转、比较大小</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前时间转字符串</span></span><br><span class="line">now = datetime.datetime.strftime(datetime.datetime.now(), <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line"><span class="comment"># 字符串转时间格式</span></span><br><span class="line">now = datetime.datetime.strptime(now, <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">a = now + datetime.timedelta(minutes=-<span class="number">15</span>)</span><br><span class="line"><span class="comment"># 时间比较大小</span></span><br><span class="line"><span class="keyword">if</span> a &lt; now:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;yes&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="22、python把’-u’开头的字符串转中文"><a href="#22、python把’-u’开头的字符串转中文" class="headerlink" title="22、python把’\u’开头的字符串转中文"></a>22、python把’\u’开头的字符串转中文</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str_data = <span class="string">&#x27;\\u7528\\u6237 ID \\u6216\\u5bc6\\u7801\\u9519\\u8bef&#x27;</span></span><br><span class="line"><span class="comment"># 字符串.encode(&#x27;utf-8&#x27;).decode(&#x27;unicode_escape&#x27;)</span></span><br><span class="line">str_data_to_zh = str_data.encode(<span class="string">&#x27;utf-8&#x27;</span>).decode(<span class="string">&#x27;unicode_escape&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(str_data_to_zh)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">用户 ID 或密码错误</span><br></pre></td></tr></table></figure><h2 id="23、python翻译模块"><a href="#23、python翻译模块" class="headerlink" title="23、python翻译模块"></a>23、python翻译模块</h2><p>可以把英文翻译成中文，也可以把中文翻译成英文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pip install  translate</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> translate <span class="keyword">import</span> Translator</span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca&#x27;</span></span><br><span class="line">translator = Translator(to_lang=<span class="string">&quot;chinese&quot;</span>)</span><br><span class="line">translation = translator.translate(name)</span><br><span class="line"><span class="built_in">print</span>(translation)</span><br><span class="line"></span><br><span class="line">translator= Translator(from_lang=<span class="string">&quot;chinese&quot;</span>,to_lang=<span class="string">&quot;english&quot;</span>)</span><br><span class="line">translation = translator.translate(<span class="string">&quot;我想你&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(translation)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#大熊猫，熊猫，熊猫熊，浣熊，大熊猫</span></span><br><span class="line"><span class="comment">#I missed you.</span></span><br></pre></td></tr></table></figure><h2 id="24、python实现字符串转字典"><a href="#24、python实现字符串转字典" class="headerlink" title="24、python实现字符串转字典"></a>24、python实现字符串转字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">target_str = <span class="string">&#x27;&#123;&quot;h&quot;: 1, &quot;e&quot;: 2, &quot;l&quot;: 3, &quot;l&quot;: 4, &quot;o&quot;: 5&#125;&#x27;</span></span><br><span class="line">target_str2 = <span class="string">&quot;&#123;&#x27;h&#x27;: 1, &#x27;e&#x27;: 2, &#x27;l&#x27;: 3, &#x27;l&#x27;: 4, &#x27;o&#x27;: 5&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式1：使用json，缺点，字符串中不能出现单引号</span></span><br><span class="line"><span class="comment"># 由于 json 语法规定 数组或对象之中的字符串必须使用双引号，不能使用单引号</span></span><br><span class="line"><span class="comment"># 官网https://www.json.org/json-en.html上有一段描述是</span></span><br><span class="line"><span class="comment"># A string is a sequence of zero or more Unicode characters, wrapped in double quotes, using backslash escapes</span></span><br><span class="line"><span class="built_in">print</span>(json.loads(target_str))</span><br><span class="line"><span class="comment"># print(json.loads(target_str2))   # 使用json转这个字符串会报错 Expecting property name enclosed in double quotes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2：使用eval函数，缺点，不安全</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(target_str))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(target_str2))</span><br><span class="line"><span class="comment"># print(eval(&quot;__import__(&#x27;os&#x27;).system(&#x27;dir&#x27;)&quot;))  # 会列出当前的目录文件，如果字符串是一些删除命令，则可以把整个目录清空！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式3，使用ast.literal_eval，没有json与eval的缺点，推荐使用这个</span></span><br><span class="line"><span class="built_in">print</span>(ast.literal_eval(target_str))</span><br><span class="line"><span class="built_in">print</span>(ast.literal_eval(target_str2))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;h&#x27;: 1, &#x27;e&#x27;: 2, &#x27;l&#x27;: 4, &#x27;o&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;h&#x27;: 1, &#x27;e&#x27;: 2, &#x27;l&#x27;: 4, &#x27;o&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;h&#x27;: 1, &#x27;e&#x27;: 2, &#x27;l&#x27;: 4, &#x27;o&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;h&#x27;: 1, &#x27;e&#x27;: 2, &#x27;l&#x27;: 4, &#x27;o&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;h&#x27;: 1, &#x27;e&#x27;: 2, &#x27;l&#x27;: 4, &#x27;o&#x27;: 5&#125;</span><br></pre></td></tr></table></figure><h2 id="25、使用python给Excel指定行添加数据"><a href="#25、使用python给Excel指定行添加数据" class="headerlink" title="25、使用python给Excel指定行添加数据"></a>25、使用python给Excel指定行添加数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl, sys</span><br><span class="line"></span><br><span class="line">wb = openpyxl.load_workbook(<span class="string">&#x27;b.xlsx&#x27;</span>)</span><br><span class="line">sheet = wb[<span class="string">&#x27;Sheet1&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在excel表格第二行添加新数据</span></span><br><span class="line">addrow = <span class="number">1</span>   <span class="comment"># 增加一行</span></span><br><span class="line">row = <span class="number">2</span>  <span class="comment"># 在第二行新增一行</span></span><br><span class="line">name = <span class="string">&#x27;b-back.xlsx&#x27;</span> <span class="comment"># 新的表名</span></span><br><span class="line"></span><br><span class="line">wb1 = openpyxl.Workbook()</span><br><span class="line">sheet1 = wb1[<span class="string">&#x27;Sheet&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制前row行</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, row):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, sheet.max_column + <span class="number">1</span>):</span><br><span class="line">        sheet1.cell(row=i, column=j).value = sheet.cell(row=i, column=j).value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制后row行</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row, sheet.max_row + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, sheet.max_column + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i == row:</span><br><span class="line">            <span class="comment"># 给第row行添加新的数据</span></span><br><span class="line">            sheet1.cell(row=row, column=j).value = <span class="string">&#x27;新增&#x27;</span></span><br><span class="line">        sheet1.cell(row=i + addrow, column=j).value = sheet.cell(row=i, column=j).value</span><br><span class="line"></span><br><span class="line">wb1.save(name)</span><br></pre></td></tr></table></figure><p><img src="/%5Cimage%5Carticle%5C%E5%87%A0%E5%8D%81%E4%B8%AAPython%E6%AF%94%E8%BE%83%E5%A5%BD%E7%8E%A9%E7%9A%84%E4%BB%A3%E7%A0%81-%E6%90%AC%E8%BF%90%E5%88%AB%E4%BA%BA%E7%9A%84%5C20200526120005871.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">原文链接:https://liangdongchang.blog.csdn.net/article/details/884251</summary>
    
    
    
    <category term="Python" scheme="http://example.com/category/Python/"/>
    
    
    <category term="Python组件" scheme="http://example.com/tag/Python%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java-IO流</title>
    <link href="http://example.com/post/e530945c.html"/>
    <id>http://example.com/post/e530945c.html</id>
    <published>2022-08-16T08:12:29.000Z</published>
    <updated>2022-08-16T09:22:55.901Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/%5Cimage%5Carticle%5CJava-IO%E6%B5%81%5CIMG_0413(20220816-161354).PNG" alt="IMG_0413(20220816-161354)"></p><ul><li><p>比较基础的是<font color="blue"><strong>字节流</strong></font> <code>InputStream</code>和<code>OutputStream</code>。</p><p>创建对象要传入<font color="red"><strong>路径字符串或者File对象</strong></font></p></li><li><p>为了方便读取字符，所以才有了<font color="blue"><strong>字符流</strong></font>。<code>InputStreamReader</code>和<code>OutputStreamWriter</code>。</p><p>创建对象要传入<font color="red"><strong>字节流对象</strong></font></p><ul><li><p>转换流的名字比较长，为了简化书写，才有了<code>FileReader</code>和<code>FileWriter</code>。专门处理文本文件。</p><p>创建对象要传入<font color="red"><strong>路径字符串</strong></font></p></li></ul></li><li><p>为了更快的读写字节，所以才有了<font color="blue"><strong>字节缓存流</strong></font>。<code>BufferedInputStream</code>和<code>BufferedOutputStream</code>。它只是在字节流上加了缓存效果，</p><p>创建对象需要传入<font color="red"><strong>字节流对象</strong></font></p></li><li><p>为了更快读取字符，有了<font color="blue"><strong>字符缓存流</strong></font>。<code>BufferedWriter</code>和<code>BufferedReader</code>。它是在字符流上加了缓冲效果。</p><p>创建对象要传入<font color="red"><strong>字符流对象</strong></font></p></li></ul><h1 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h1><h2 id="三种构造方法：-路径：D-java-txt"><a href="#三种构造方法：-路径：D-java-txt" class="headerlink" title="三种构造方法：(路径：D:\java.txt)"></a>三种构造方法：(<strong>路径：D:\java.txt</strong>)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\java.txt&quot;</span>);<span class="comment">//直接给定路径字符串</span></span><br><span class="line">System.out.println(file);<span class="comment">//D:\java.txt</span></span><br><span class="line"></span><br><span class="line"><span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\&quot;</span>,<span class="string">&quot;java.txt&quot;</span>);<span class="comment">//父路径字符串+子路径名字符串。</span></span><br><span class="line">System.out.println(file1);</span><br><span class="line"></span><br><span class="line"><span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\&quot;</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">file3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(file2,<span class="string">&quot;java.txt&quot;</span>);<span class="comment">//父抽象路径名+子路径字符串</span></span><br><span class="line">System.out.println(file3);</span><br><span class="line"><span class="comment">//这三个构造方法做了同样的事情</span></span><br></pre></td></tr></table></figure><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="createNewFile"><a href="#createNewFile" class="headerlink" title="createNewFile()"></a>createNewFile()</h3><p> 如果文件存在，则创建文件再返回true，否则不创建，返回false;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\IO流\\File\\itcase\\java2.txt&quot;</span>);<span class="comment">//将路径封装</span></span><br><span class="line">System.out.println(file.createNewFile());</span><br></pre></td></tr></table></figure><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir()"></a>mkdir()</h3><p>创建一个文件夹，类似createNewFile()【注意：即使创建的文件夹名有文件后缀，创建的也是文件夹，比如JAVA.txt文件夹】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\IO流\\File\\itcase&quot;</span>,<span class="string">&quot;javaSE&quot;</span>);</span><br><span class="line">System.out.println(file1.mkdir());</span><br></pre></td></tr></table></figure><h3 id="mkdirs"><a href="#mkdirs" class="headerlink" title="mkdirs()"></a>mkdirs()</h3><p>创建多级目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\IO流\\File\\itcase&quot;</span>);<span class="comment">//父目录</span></span><br><span class="line"><span class="type">File</span> <span class="variable">file3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(file2,<span class="string">&quot;JAVAEE\\javaee\\javaweb&quot;</span>);<span class="comment">//子目录</span></span><br><span class="line">System.out.println(file3.mkdirs());</span><br></pre></td></tr></table></figure><p><img src="/%5Cimage%5Carticle%5CJava-IO%E6%B5%81%5Cimage-20220816162640221.png" alt="image-20220816162640221"></p><h2 id="判断方法"><a href="#判断方法" class="headerlink" title="判断方法"></a>判断方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\JinJie\\day03\\File\\itcast&quot;</span>);</span><br><span class="line">System.out.println(f.isDirectory());<span class="comment">//isDirectory() 返回此抽象路径名表示的file是否为目录。</span></span><br><span class="line">System.out.println(f.isFile());<span class="comment">//是否是文件</span></span><br><span class="line">System.out.println(f.isAbsolute());<span class="comment">//是否是绝对路径</span></span><br><span class="line">System.out.println(f.exists());<span class="comment">//是否存在</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;\\IO流\\File\\itcase&quot;</span>);</span><br><span class="line">System.out.println(file.getAbsolutePath());<span class="comment">//返回绝对路径</span></span><br><span class="line">System.out.println(file.getPath());<span class="comment">//获取路径  抽象路径---&gt;路径字符串  </span></span><br><span class="line">System.out.println(file.getName());<span class="comment">//返回此路径名表示的文件夹名或文件名  </span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">D:\IO流\File\itcase</span></span><br><span class="line"><span class="comment">\IO流\File\itcase</span></span><br><span class="line"><span class="comment">itcase</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h2><img src="\image\article\Java-IO流\image-20220816162651470.png" alt="image-20220816162651470" style="zoom:80%;" /><h3 id="list"><a href="#list" class="headerlink" title="list()"></a>list()</h3><p>返回该目录下的文件名称字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\IO流\\File\\itcase&quot;</span>);</span><br><span class="line">String[] list = file1.list();<span class="comment">//返回该目录下的文件名称字符串</span></span><br><span class="line"><span class="keyword">for</span> (String s:list)&#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.mp4</span></span><br><span class="line"><span class="comment">java.txt</span></span><br><span class="line"><span class="comment">java2.txt</span></span><br><span class="line"><span class="comment">JAVAEE</span></span><br><span class="line"><span class="comment">javaSE</span></span><br><span class="line"><span class="comment">javase.txt</span></span><br><span class="line"><span class="comment">QQ截图20220102223216.png</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="listFiles"><a href="#listFiles" class="headerlink" title="listFiles()"></a>listFiles()</h3><p>返回该目录下的文件对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\IO流\\File\\itcase&quot;</span>);</span><br><span class="line">File[] listFiles = file1.listFiles();<span class="comment">//返回该目录下的文件对象</span></span><br><span class="line"><span class="keyword">for</span> (File file2: listFiles)&#123;</span><br><span class="line">    System.out.print(file2.getPath()+<span class="string">&quot;\\\\&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file2.isFile())System.out.println(file2.getName()+<span class="string">&quot;是文件&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">D:\JavaText\test1\src\IO流\File\itcase\1.mp4\\1.mp4是文件</span></span><br><span class="line"><span class="comment">D:\JavaText\test1\src\IO流\File\itcase\java.txt\\java.txt是文件</span></span><br><span class="line"><span class="comment">D:\JavaText\test1\src\IO流\File\itcase\java2.txt\\java2.txt是文件</span></span><br><span class="line"><span class="comment">D:\JavaText\test1\src\IO流\File\itcase\JAVAEE\\</span></span><br><span class="line"><span class="comment">D:\JavaText\test1\src\IO流\File\itcase\javaSE\\</span></span><br><span class="line"><span class="comment">D:\JavaText\test1\src\IO流\File\itcase\javase.txt\\</span></span><br><span class="line"><span class="comment">D:\JavaText\test1\src\IO流\File\itcase\QQ截图20220102223216.png\\QQ截图20220102223216.png是文件</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="删除方法"><a href="#删除方法" class="headerlink" title="删除方法"></a>删除方法</h2><h3 id="delete"><a href="#delete" class="headerlink" title="delete()"></a>delete()</h3><p>如果删除文件夹，若此文件夹不是空文件夹，将删除失败。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\JinJie\\day03\\File\\itcast&quot;</span>);</span><br><span class="line"><span class="comment">//删除文件夹</span></span><br><span class="line"><span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(file,<span class="string">&quot;javase.txt&quot;</span>);</span><br><span class="line">System.out.println(file1.delete());</span><br><span class="line"><span class="comment">//删除文件</span></span><br><span class="line"><span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(file,<span class="string">&quot;java.txt&quot;</span>);</span><br><span class="line">System.out.println(file2.delete());</span><br></pre></td></tr></table></figure><h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><p>我们把这种数据的传输，可以看做是一种数据的流动，按照流动的方向，以内存为基准，分为 输入input 和 输出 output ，即流向内存是输入流，流出内存的输出流。 </p><p>根据数据的流向分为：<strong>输入流</strong>和<strong>输出流</strong>。 </p><ul><li><strong>输入流</strong> ：把数据从 其他设备 上读取到 内存 中的流。 </li><li><strong>输出流</strong> ：把数据从 内存 中写出到 其他设备 上的流。</li></ul><p>格局数据的类型分为：<strong>字节流</strong>和<strong>字符流</strong>。 </p><ul><li><strong>字节流</strong> ：以字节为单位，读写数据的流。 </li><li><strong>字符流</strong> ：以字符为单位，读写数据的流</li></ul><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><h3 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h3><p><code>FileOutputStream</code>类是文件输出流，用于将数据写出到文件。<code>FileOutputStream</code>继承了<code>OutputStream</code></p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>参数：</p><ul><li><code>FileOutputStream(File file)</code> ：创建文件输出流以写入由指定的 File对象表示的文件。  </li><li><code>FileOutputStream(File file, boolean append)</code> ：创建文件输出流以写入由指定的 File对象表示的文件。  </li><li><code>FileOutputStream(String name)</code> ：创建文件输出流以指定的名称写入文件。  </li><li><code>FileOutputStream(String name, boolean append)</code> ：创建文件输出流以指定的名称写入文件。</li></ul><blockquote><p>在该路径下</p><ul><li>如果没有这个文件，会<strong>创建该文件</strong>。</li><li>如果有这个文 件，会<strong>清空这个文件的数据</strong>。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//public FileOutputStream(String name)</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\IO流\\字节流\\java.txt&quot;</span>);</span><br><span class="line"><span class="comment">//public FileOutputStream(File file)</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\JinJie\\day03\\字节流\\java.txt&quot;</span>));</span><br></pre></td></tr></table></figure><p><font color="red"><strong>数据追加续写</strong></font></p><p><strong><code>public FileOutputStream(File file/String name, boolean append)</code></strong></p><p>参数中需要传入一个boolean类型的值， <strong>true</strong> 表示追加数据， <strong>false</strong> 表示清空原有数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\JinJie\\day03\\字节\\java.txt&quot;</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><p>三种写入数据的方法</p><ul><li><code>void write(byte[] b)</code> ：将 b.length个字节从指定的字节数组写入此文件输出流。  </li><li><code>void write(byte[] b, int off, int len)</code> ：将 len字节从位于偏移量 off的指定字节数组写入此文件输出流。  </li><li><code>void write(int b)</code> ：将指定的字节写入此文件输出流。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建文件输出流以指定名称写入文件</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\IO流\\字节流\\java.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写字节流的三种方式</span></span><br><span class="line">        <span class="comment">//方式一  </span></span><br><span class="line">        fos.write(<span class="number">90</span>);<span class="comment">//ASCII值</span></span><br><span class="line">        <span class="comment">//方式二</span></span><br><span class="line">        fos.write(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">33</span>,<span class="number">23</span>,<span class="number">67</span>,<span class="number">89</span>&#125;);<span class="comment">//一次写一个数组的数据</span></span><br><span class="line">    <span class="comment">//方式三</span></span><br><span class="line">        fos.write(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">30</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">61</span>,<span class="number">62</span>,<span class="number">63</span>&#125;,<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//从off开始，写长度为len的数据</span></span><br><span class="line">        fos.close();<span class="comment">//关闭此文件输出流并释放资源。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写入字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;我叫张三！！！&quot;</span>;</span><br><span class="line">fos.write(str.getBytes());<span class="comment">//getBytes()返回字符串对应的字节数组。</span></span><br></pre></td></tr></table></figure><p>写入换行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">不同系统识别换行不一样:</span></span><br><span class="line"><span class="comment">Windows:\r\n</span></span><br><span class="line"><span class="comment">linux:\n</span></span><br><span class="line"><span class="comment">mac:\r</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">fos.write(<span class="string">&quot;hello,world!\r\n&quot;</span>.getBytes());</span><br></pre></td></tr></table></figure><h3 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h3><p><code>FileInputStream </code>类是文件输入流，从文件中读取字节。<code>FileInputStream</code>继承了<code>InputStream</code>。</p><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>FileInputStream(File file)</code> ：通过打开与实际文件的连接创建一个 <code>FileInputStream</code> ，该文件由文件系统中的 File对象 file命名。   </li><li><code>FileInputStream(String name) </code>：通过打开与实际文件的连接来创建一个 <code>FileInputStream</code> ，该文件由文件系统中的路径名 name命名。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\IO流\\字节流&quot;</span>);</span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\IO流\\字节流&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h4><ul><li><code>int read()</code> ：从该输入流读取一个字节的数据。  </li><li><code>int read(byte[] b) </code>：从该输入流读取最多 b.length个字节的数据为字节数组。 </li><li><code>int read(byte[] b, int off, int len) </code>：从该输入流读取最多 len字节的数据为字节数组。</li></ul><p> read 方法，每次可以读取一个字节的数据，提升为int类型，<strong>读取到文件末尾，返回 -1</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> by;</span><br><span class="line"><span class="keyword">while</span> ((by=fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">    System.out.println((<span class="type">char</span>) by);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>read(byte[] b) ，每次读取b的长度个字节到数组中，<strong>返回读取到的有效字节个数</strong>，<strong>读取到末尾时，返回 -1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\IO流\\字节流\\java.txt&quot;</span>);</span><br><span class="line"><span class="type">byte</span>[] by = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="keyword">while</span> ((len=fis.read(by))!=-<span class="number">1</span>)&#123;</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(by,<span class="number">0</span>,len));</span><br><span class="line">&#125;</span><br><span class="line">fis.close();</span><br></pre></td></tr></table></figure><p><font color="blue" size=4> <strong>案例：复制图片</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">copyimage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\dell\\Desktop\\QQ截图20220102202037.png&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\IO流\\字节流\\image.png&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] by = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> read;</span><br><span class="line">        <span class="keyword">while</span> ((read = fis.read(by))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(by,<span class="number">0</span>,read);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，<strong>可能不会显示完整的字符</strong>，那是因为<strong>一个中文字符可能占用多个字节存储</strong>。所以Java提供一些字符流类，以字符为单位读写数据，<font color="red"><strong>专门用于处理文本文件</strong></font>。</p><p><strong>汉字在存储的时候，无论选择哪种编码存储，第一个字节都是负数</strong><br>如果一个汉字存储:</p><ul><li>如果是<strong>GBK</strong>编码，占用<strong>2个字节</strong></li><li>如果是<strong>UTF-8</strong>,占用<strong>三个字节</strong></li></ul><p>字节流操作中文字符不方便<br><strong>字符流 &#x3D; 字节流+编码表</strong></p><h3 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h3><p><code>OutputStreamWriter</code> 是字符流通向字节流的桥梁：可使用指定的 <strong>charset</strong> 将要写入流中的字符编码成字节。它使用的<strong>字符集可以由名称指定或显式给定</strong>，否则<strong>将接受平台默认的字符集</strong>。</p><h4 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>OutputStreamWriter(OutputStream out)</code>： 创建使用默认字符编码的 <code>OutputStreamWriter</code>。</li><li><code>OutputStreamWriter(OutputStream out, Charset cs) </code>： 创建使用<strong>给定字符集</strong>的 <code>OutputStreamWriter</code>。 </li><li><code>OutputStreamWriter(OutputStream out, CharsetEncoder enc) </code>：创建使用给定<strong>字符集编码器</strong>的 <code>OutputStreamWriter</code>。 </li><li><code>OutputStreamWriter(OutputStream out, String charsetName) </code>：创建使用<strong>指定字符集</strong>的 <code>OutputStreamWriter</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\JinJie\\day03\\字符流\\java.txt&quot;</span></span><br><span class="line">        ),<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\IO流\\字符流\\java.txt&quot;</span></span><br><span class="line">                ), StandardCharsets.UTF_8);</span><br></pre></td></tr></table></figure><h4 id="常用方法-3"><a href="#常用方法-3" class="headerlink" title="常用方法"></a>常用方法</h4><p>每次调用 write()  方法都会导致在给定字符（或字符集）上调用编码转换器。在写入底层输出流之前，<strong>得到的这些字节将在缓冲区中累积</strong>。可以指定此缓冲区的大小，不过，默认的缓冲区对多数用途来说已足够大。注意，<strong>传递给  write() 方法的字符没有缓冲</strong>。 </p><ul><li><code>write(char[] cbuf,  int off, int len)</code>：写入字符数组的某一部分。</li><li><code>write(int c)</code>：写入单个字符。</li><li><code>write(String str,int off, int len)</code>：写入字符串的某一部分。</li><li><code>getEncoding()</code>：返回此流使用的字符编码的名称。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">osw.write(<span class="string">&quot;啦啦啦啦！&quot;</span>);</span><br><span class="line">osw.write(<span class="string">&quot;我叫田佳澍&quot;</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">osw.write(<span class="number">101</span>);</span><br><span class="line">osw.write(<span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="number">101</span>,<span class="number">102</span>,<span class="number">103</span>,<span class="number">104</span>&#125;);</span><br><span class="line">osw.close();</span><br></pre></td></tr></table></figure><h3 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h3><p><code>InputStreamReader</code> 是字节流通向字符流的桥梁：它使用指定的 <code>charset</code> 读取字节并将其解码为字符。它使用的字符集可以由名称指定或显式给定，或者可以接受平台默认的字符集。</p><h4 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h4><p>和<code>InputStreamWrite</code>r类似</p><ul><li><code>InputStreamReader(InputStream in)</code>：创建一个使用默认字符集的<code> InputStreamReader</code>。</li><li><code>InputStreamReader(InputStream in, Charset cs) </code>：创建使用给定字符集的 <code>InputStreamReader</code>。 </li><li><code>InputStreamReader(InputStream in, CharsetDecoder dec) </code>：创建使用给定字符集解码器的 <code>InputStreamReader</code>。 </li><li><code>InputStreamReader(InputStream in, String charsetName)</code>：创建使用指定字符集的 <code>InputStreamReader</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\JinJie\\day03\\字符流\\java.txt&quot;</span>),<span class="string">&quot;GBK&quot;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="常用方法-4"><a href="#常用方法-4" class="headerlink" title="常用方法"></a>常用方法</h4><ul><li><code>getEncoding()</code> 返回此流使用的字符编码的名称。 </li><li><code>int read()</code> 读取单个字符。 </li><li><code>int read(char[] cbuf, int offset, int length)</code> 将字符读入数组中的某一部分。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">while</span> ((i=isr.read(chars))!=-<span class="number">1</span>)&#123;</span><br><span class="line">    System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(chars,<span class="number">0</span>,i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FileReader-amp-FileWriter"><a href="#FileReader-amp-FileWriter" class="headerlink" title="FileReader&amp;FileWriter"></a>FileReader&amp;FileWriter</h3><p><strong>便捷字符输入输出流</strong>，转换流的名字比较长，而我们常见的操作都是按照本地默认编码实现的，所以，为了简化书写，转换流提供了对应的子类</p><ul><li><code>FileReader</code>:用于读取字符文件的便捷类  <strong>继承<code>InputStreamReader</code> 方法一样</strong><br>      <strong><code>FileReader(String fileName)</code></strong>    </li><li><code>FileWrite</code>r:用于写入字符文件的便捷类    <strong>继承<code>OutputStreamWriter</code> 方法一样</strong><br><strong><code>FileWriter(String fileName)</code></strong></li></ul><p><strong>构造时使用系统默认的字符编码和默认字节缓冲区。</strong></p><p><font color="blue" size=4><strong>案例：复制字符文件</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\JinJie\\day01\\Arraysclass.java&quot;</span>);</span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\JinJie\\day03\\字符流\\copy.java&quot;</span>);</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="type">char</span>[] ch = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span> ((len=fr.read(ch))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        fw.write(ch,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">    fw.close();</span><br><span class="line">    fr.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关闭和刷新"><a href="#关闭和刷新" class="headerlink" title="关闭和刷新"></a>关闭和刷新</h4><p>因为内置缓冲区的原因，<strong>如果不关闭输出流，无法写出字符到文件中</strong>。但是<strong>关闭的流对象，是无法继续写出数据的</strong>。如果我们既想写出数据，又想继续使用流，就需要 flush 方法了。 </p><ul><li>flush ：刷新缓冲区，流对象可以继续使用。 </li><li>close :先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\IO流\\字符流\\java.txt&quot;</span>);</span><br><span class="line">fw.write(<span class="string">&quot;刷新&quot;</span>);</span><br><span class="line">fw.flush();</span><br><span class="line">fw.write(<span class="string">&quot;关闭&quot;</span>);</span><br><span class="line">fw.close();</span><br></pre></td></tr></table></figure><h2 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h2><p>字节缓冲流  **缓冲区大小是默认的，默认值<font color="red">8192</font>**。目的就是加快读取和写入数据的速度</p><p>缓冲流本身并没有IO功能，<strong>只是在别的流上加上缓冲效果从而提高了效率</strong>。当对文件或其他目标频繁读写或操作效率低，效能差时。这时使用缓冲流能够更高效的读写信息。因为缓冲流先将数据缓存起来，然后一起写入或读取出来。所以说，缓冲流还是很重要的，在IO操作时加上缓冲流提升性能。</p><h3 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h3><p><strong>字节缓冲输入流</strong></p><ul><li><code>BufferedInputStream(InputStream in) </code>：创建一个 <code>BufferedInputStream</code> 并保存其参数，即输入流 in，以便将来使用。 </li><li><code>BufferedInputStream(InputStream in, int size) </code>： 创建具有指定缓冲区大小的 <code>BufferedInputStream</code> 并保存其参数，即输入流 in，以便将来使用。</li></ul><p><strong>字节缓冲输出流</strong></p><ul><li><code>BufferedOutputStream(OutputStream out) </code>：创建一个新的缓冲输出流，以将数据写入指定的底层输出流。 </li><li><code>BufferedOutputStream(OutputStream out, int size) </code>：创建一个新的缓冲输出流，以将具有指定缓冲区大小的数据写入指定的底层输出流。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\JinJie\\day03\\字节流\\java.txt&quot;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\JinJie\\day03\\字节流\\java.txt&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>使用数组缓冲流速度&gt;不使用数组的缓冲流&gt;普通字节流</p><p><strong>缓冲流读写方法与基本的流是一致的</strong></p></blockquote><h2 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h2><h3 id="构造方法-5"><a href="#构造方法-5" class="headerlink" title="构造方法"></a>构造方法</h3><p><strong>字符缓冲输入流</strong></p><ul><li><code>BufferedReader(Reader in) </code>：创建一个使用默认大小输入缓冲区的缓冲字符输入流。 </li><li><code>BufferedReader(Reader in, int sz) </code>： 创建一个使用指定大小输入缓冲区的缓冲字符输入流。</li></ul><p> <strong>字符缓冲输出流</strong></p><ul><li><code>BufferedWriter(Writer out) </code>：创建一个使用默认大小输出缓冲区的缓冲字符输出流。 </li><li><code>BufferedWriter(Writer out, int sz) </code>：创建一个使用给定大小输出缓冲区的新缓冲字符输出流。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\JinJie\\day03\\字符流\\java.txt&quot;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\JinJie\\day03\\字符流\\java.txt&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="特有方法"><a href="#特有方法" class="headerlink" title="特有方法"></a>特有方法</h3><p>字符缓冲流的<strong>基本方法</strong>与<strong>普通字符流调用方式一致</strong></p><ul><li><code>BufferedReader</code>： public String <strong>readLine()</strong> : 读一行文字。 </li><li><code>BufferedWrite</code>r： public void <strong>newLine()</strong> : 写一行行分隔符,由系统属性定义符号</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\JinJie\\day03\\字符流\\Demo1.java&quot;</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;D:\\JavaText\\test1\\src\\JinJie\\day03\\copy.java&quot;</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    String s;</span><br><span class="line">    <span class="keyword">while</span> ((s=br.readLine())!=<span class="literal">null</span>)&#123;<span class="comment">//一次读取一行，不包括任何终止符。如果流已经到末尾，则返回null</span></span><br><span class="line">        bw.write(s);</span><br><span class="line">        bw.newLine();<span class="comment">//添加换行符，根据不同系统，换行符不同。</span></span><br><span class="line">    &#125;</span><br><span class="line">    bw.close();</span><br><span class="line">    br.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">File类、字节流、字符流、字节缓存流、字符缓存流、便捷字符输入输出流</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/category/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="IO流" scheme="http://example.com/tag/IO%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>Java-Socket编程——TCP</title>
    <link href="http://example.com/post/aa5a87da.html"/>
    <id>http://example.com/post/aa5a87da.html</id>
    <published>2022-08-15T12:16:45.000Z</published>
    <updated>2022-08-16T12:58:30.954Z</updated>
    
    <content type="html"><![CDATA[<p>所谓<code>socket</code> 通常也称作<strong>”套接字“</strong>，用于描述<code>IP</code>地址和端口，是一个通信链的句柄。应用程序通常通过”套接字”向网络发出请求或者应答网络请求。</p><p><font size= 5><strong><code>InetAddress</code></strong></font></p><p><code>InetAddress</code>可以获取对应<code>ip</code>或者对应域名的相关信息，例如<code>ip</code>信息和域名信息</p><p>只说一下用的比较多的吧</p><p>获取<code>InetAddress</code>对象，只能使用工厂构造方法获取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取本地主机的相关信息。</span></span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">localHost</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">localhost</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line"><span class="comment">//获取主机名为 DESKTOP-GQI06FR 的相关信息</span></span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">inetAddress</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;DESKTOP-GQI06FR&quot;</span>);</span><br><span class="line"><span class="comment">//获取网站相关信息</span></span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">inetAddress</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>InetAddress</code>对象的使用，常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ip</span></span><br><span class="line"><span class="type">String</span> <span class="variable">hostAddress</span> <span class="operator">=</span> localHost.getHostAddress();<span class="comment">//获取IP地址</span></span><br><span class="line"><span class="comment">//主机名称</span></span><br><span class="line"><span class="type">String</span> <span class="variable">hostName</span> <span class="operator">=</span> localHost.getHostName();<span class="comment">//获取主机名称 或者 域名</span></span><br></pre></td></tr></table></figure><h1 id="TCP客户端"><a href="#TCP客户端" class="headerlink" title="TCP客户端"></a>TCP客户端</h1><p>以发送简单的字符串为例。</p><p>TCP发送数据的步骤</p><ol><li>创建客户端的Socket对象(Socket)</li><li>获取输出流，写数据</li><li>释放资源</li></ol><p><font size= 4><strong>首先创建Socket对象</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">50000</span>);</span><br></pre></td></tr></table></figure><p>常用的构造方法有两个：</p><ul><li><code>Socket (InetAddress address, int port)</code>创建流套接字并将其连接到指定<code>IP</code>地址的指定端口号</li><li><code>Socket (String host, int port)</code>创建流套接字并将其连接到指定主机上的指定端口号</li></ul><p><font size= 4><strong>获取字节输出流</strong></font></p><p>你可以使用普通的<strong>输出流</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br></pre></td></tr></table></figure><p>你还可以使用<strong>字符缓存流</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br></pre></td></tr></table></figure><p>还可以使用<strong>字节缓存流</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(socket.getOutputStream());</span><br></pre></td></tr></table></figure><p><font size= 4><strong>获取字节输入流</strong></font></p><p>获取输入流可以获取<strong>反馈信息</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">clientInputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br></pre></td></tr></table></figure><blockquote><p>字符缓存流和字节缓冲流和上面的类似。</p></blockquote><p><font size= 4><strong>写数据</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">String</span> <span class="variable">next</span> <span class="operator">=</span> sc.next();</span><br><span class="line"><span class="comment">//使用 普通的输出流</span></span><br><span class="line">stream.write(next.getBytes());</span><br></pre></td></tr></table></figure><p><font size=4><strong>释放资源</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stream.close();</span><br><span class="line">socket.close();</span><br></pre></td></tr></table></figure><h1 id="TCP服务端"><a href="#TCP服务端" class="headerlink" title="TCP服务端"></a>TCP服务端</h1><p><font size=4><strong>创建服务器端的<code>socket</code>对象(<code>ServerSocket</code>)</strong></font></p><p><code>ServerSocket (int port)</code>创建<strong>绑定到指定端口</strong>的服务器套接字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9000</span>);</span><br></pre></td></tr></table></figure><p><font size=4><strong>Socket accept()侦听要连接到此套接字并接受它</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Socket</span> <span class="variable">accept</span> <span class="operator">=</span> server.accept();</span><br></pre></td></tr></table></figure><blockquote><p>accept()  阻塞式监听，会一直等待客户端连接</p></blockquote><p><font size=4><strong>获取字节输入流和字节输出流</strong></font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InputStream stream = accept.getInputStream();</span><br><span class="line">OutputStream outputStream = accept.getOutputStream();</span><br></pre></td></tr></table></figure><p><font size=4><strong>接收数据</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="keyword">while</span> ((len = stream.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buffer, <span class="number">0</span>, len);</span><br><span class="line">    System.out.println(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写的缺点是，假如有中文，超过了1024，然后就断掉了。断掉之后就<strong>乱码</strong>了。</p><p><font color="blue"><strong>管道流</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="keyword">while</span> ((len = stream.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">    baos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(baos.toString());</span><br></pre></td></tr></table></figure><p><font size=4><strong>关闭资源</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">accept.close();</span><br><span class="line">stream.close();</span><br><span class="line">outputStream.close();</span><br><span class="line">server.close();</span><br></pre></td></tr></table></figure><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>客户端发送消息字符串，服务端接收消息字符串。客户端输入“exit”结束发送，服务端发送“接收完毕”反馈，客户端接收反馈。</p><p><strong>客户端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;localhost&quot;</span>,<span class="number">10001</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(outputStream));</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        String text;</span><br><span class="line">        <span class="keyword">while</span> (!(text=sc.next()).equals(<span class="string">&quot;exit&quot;</span>))&#123;</span><br><span class="line">            bw.write(text);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        socket.shutdownOutput();<span class="comment">//不使用的话，服务端就会发送阻塞，不会发送反馈，客户端也就会发送阻塞。</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;END&quot;</span>);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        System.out.println(line);</span><br><span class="line"></span><br><span class="line">        socket.close();</span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>服务端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">10001</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">accept</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> accept.getInputStream();</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream));</span><br><span class="line">        String text;</span><br><span class="line">        <span class="keyword">while</span> ((text = reader.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(text);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> accept.getOutputStream();</span><br><span class="line">        outputStream.write(<span class="string">&quot;接收完毕！&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;END&quot;</span>);</span><br><span class="line">        accept.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>关于<code>shutdownOutput()</code>的作用：</p><p><code>socket.shutdownOutput()</code>：关闭客户端的输出流。相当于给流中加入一个结束标志-1，这个时候服务器端的输入流的<code>readLine()</code>相当于读到了一个-1【null】，所以，就会结束<code>while ((text = reader.readLine())!=null)</code>循环，接着往下执行。</p></blockquote><p><img src="/%5Cimage%5Carticle%5CJava-Socket%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%94TCP%5Cimage-20220816205526066.png" alt="image-20220816205526066"></p><blockquote><p><strong>IO流相关操作，参考我另一篇博客——Java-IO流</strong></p></blockquote>]]></content>
    
    
    <summary type="html">使用Java-Socket的基本操作。</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/category/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Socket编程" scheme="http://example.com/tag/Socket%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python-Socket编程 —— TCP</title>
    <link href="http://example.com/post/7d13d7e5.html"/>
    <id>http://example.com/post/7d13d7e5.html</id>
    <published>2022-08-15T06:27:49.000Z</published>
    <updated>2022-08-15T12:18:31.444Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><strong>Socket是应用层与TCP&#x2F;IP协议族通信的中间软件抽象层</strong>。</p><p>复杂的TCP&#x2F;IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，<strong>让Socket去组织数据，以符合指定的协议。</strong></p><p><img src="/%5Cimage%5Carticle%5CPython-Socket%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89%5Cimage-20220815163449720.png" alt="image-20220815163449720"></p><p>要进行socket编程，发送网络消息，我们可以使用 Python 内置的 socket 库 。</p><p>目前的socket编程，使用的最多的就是通过TCP协议进行网络通讯的。</p><p>TCP进行通讯的程序双方，分为服务端和客户端。</p><p>TCP 协议进行通讯的双方，是需要先建立一个虚拟连接的。然后双方程序才能发送业务数据信息。</p><p>建立TCP虚拟连接是通过著名的 <strong>三次握手</strong> 进行的。</p><h1 id="TCP服务端程序"><a href="#TCP服务端程序" class="headerlink" title="TCP服务端程序"></a><strong>TCP服务端程序</strong></h1><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><h3 id="首先需要导入socket-库"><a href="#首先需要导入socket-库" class="headerlink" title="首先需要导入socket 库"></a>首先需要导入socket 库</h3><p>Python里面对Socket接口的调用全部封装到了socket库里了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><h3 id="定义配置项"><a href="#定义配置项" class="headerlink" title="定义配置项"></a>定义配置项</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 等待客户端来连接</span></span><br><span class="line">IP = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line"><span class="comment"># 端口号</span></span><br><span class="line">PORT = <span class="number">50000</span></span><br><span class="line"><span class="comment"># 定义一次从socket缓冲区最多读入512个字节数据</span></span><br><span class="line">BUFLEN = <span class="number">512</span></span><br></pre></td></tr></table></figure><p>这个IP是指<font color='red'><strong>“哪个IP可以连接你这个服务端“</strong></font></p><p>如果<code>IP = &#39;0.0.0.0&#39;</code>就表示所有IP地址都可以连接这个服务端。</p><h3 id="实例化一个Socket对象"><a href="#实例化一个Socket对象" class="headerlink" title="实例化一个Socket对象"></a>实例化一个<code>Socket</code>对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">listenSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"><span class="comment"># socket绑定地址和端口 </span></span><br><span class="line">listenSocket.bind((IP, PORT))</span><br><span class="line"><span class="comment"># 参数 8 表示 最多接受多少个等待连接的客户端</span></span><br><span class="line">listenSocket.listen(<span class="number">8</span>)</span><br></pre></td></tr></table></figure><ul><li>参数 <code>AF_INET</code> 表示<strong>该socket网络层使用<font color="red">IP</font>协议</strong></li><li>参数 <code>SOCK_STREAM</code> 表示<strong>该socket传输层使用<font color="red">TCP</font>协议</strong></li></ul><p><code>listenSocket.bind((IP, PORT))</code>绑定IP和PORT后，表示将监听该端口号和IP地址。</p><p><code>listenSocket.listen(8)</code>，然后就进入<strong>等待连接</strong>的状态，最多接受8个客户端。</p><h3 id="获取请求"><a href="#获取请求" class="headerlink" title="获取请求"></a>获取请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataSocket, addr = listenSocket.accept()</span><br></pre></td></tr></table></figure><p>返回的是一个元组，用两个变量接收</p><ul><li>dataSocket：是一个<strong>新的Socket对象</strong>。</li><li>addr：是客户端地址，包括（IP地址，端口号），例如：<code>(&#39;127.0.0.1&#39;, 61799)</code>。</li></ul><blockquote><p>注意：当调用了  accept()  方法，服务端程序就处于了<strong>阻塞状态</strong>，一直等待连接，如果没有连接，下面的代码就不会执行。直到接收到了连接。</p></blockquote><h3 id="接收数据并处理"><a href="#接收数据并处理" class="headerlink" title="接收数据并处理"></a>接收数据并处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 尝试读取对方发送的消息</span></span><br><span class="line">    <span class="comment"># BUFLEN 指定从接收缓冲里最多读取多少字节</span></span><br><span class="line">    recved = dataSocket.recv(BUFLEN)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果返回空bytes，表示对方关闭了连接</span></span><br><span class="line">    <span class="comment"># 退出循环，结束消息收发</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> recved:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取的字节数据是bytes类型，需要解码为字符串</span></span><br><span class="line">    info = recved.decode()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;收到对方信息： <span class="subst">&#123;info&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送的数据类型必须是bytes，所以要编码</span></span><br><span class="line">    dataSocket.send(<span class="string">f&#x27;服务端接收到了信息 <span class="subst">&#123;info&#125;</span>&#x27;</span>.encode())</span><br></pre></td></tr></table></figure><p><code>recv(BUFLEN)</code>方法返回的是 <strong>字节串</strong>类似Java的<strong>字节流</strong>，如果客户端关闭了，那么就会返回<code>b&#39;&#39;</code>。</p><ul><li><p><code>str.decode(encoding=&#39;UTF-8&#39;,errors=&#39;strict&#39;) </code>字符串解码 </p><ul><li><p>默认使用<code>UTF-8</code></p></li><li><p>errors – 设置不同错误的处理方案。默认为 <code>strict</code>,意为编码错误引起一个UnicodeError。</p><p> 其他可能得值有  <code>ignore</code>, <code>replace</code>, <code>xmlcharrefreplace</code>, <code>backslashreplace</code> 以及通过  codecs.register_error() 注册的任何值。</p></li></ul></li><li><p><code>str.encode(encoding=&#39;UTF-8&#39;,errors=&#39;strict&#39;)</code>字符串编码【参数和<code>decode()</code>一样】</p></li></ul><blockquote><p>收发数据不一定是字符串，可以是其他数据，比如 图片音频等…</p><p>recv(BUFLEN) 方法也会使程序处于<strong>阻塞状态</strong>，一直等待的是数据，而accept() 等待的是连接。</p></blockquote><h3 id="最后关闭连接"><a href="#最后关闭连接" class="headerlink" title="最后关闭连接"></a>最后关闭连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端也调用close()关闭socket</span></span><br><span class="line">dataSocket.close()</span><br><span class="line">listenSocket.close()</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  === TCP 服务端程序 server.py ===</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入socket 库</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主机地址为空字符串，表示绑定本机所有网络接口ip地址</span></span><br><span class="line"><span class="comment"># 等待客户端来连接</span></span><br><span class="line">IP = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line"><span class="comment"># 端口号</span></span><br><span class="line">PORT = <span class="number">50000</span></span><br><span class="line"><span class="comment"># 定义一次从socket缓冲区最多读入512个字节数据</span></span><br><span class="line">BUFLEN = <span class="number">512</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个socket对象</span></span><br><span class="line"><span class="comment"># 参数 AF_INET 表示该socket网络层使用IP协议</span></span><br><span class="line"><span class="comment"># 参数 SOCK_STREAM 表示该socket传输层使用TCP协议</span></span><br><span class="line">listenSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># socket绑定地址和端口</span></span><br><span class="line">listenSocket.bind((IP, PORT))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使socket处于监听状态，等待客户端的连接请求</span></span><br><span class="line"><span class="comment"># 参数 8 表示 最多接受多少个等待连接的客户端</span></span><br><span class="line">listenSocket.listen(<span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;服务端启动成功，在<span class="subst">&#123;PORT&#125;</span>端口等待客户端连接...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dataSocket, addr = listenSocket.accept()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;接受一个客户端连接:&#x27;</span>, addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 尝试读取对方发送的消息</span></span><br><span class="line">    <span class="comment"># BUFLEN 指定从接收缓冲里最多读取多少字节</span></span><br><span class="line">    recved = dataSocket.recv(BUFLEN)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果返回空bytes，表示对方关闭了连接</span></span><br><span class="line">    <span class="comment"># 退出循环，结束消息收发</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> recved:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取的字节数据是bytes类型，需要解码为字符串</span></span><br><span class="line">    info = recved.decode()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;收到对方信息： <span class="subst">&#123;info&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送的数据类型必须是bytes，所以要编码</span></span><br><span class="line">    dataSocket.send(<span class="string">f&#x27;服务端接收到了信息 <span class="subst">&#123;info&#125;</span>&#x27;</span>.encode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端也调用close()关闭socket</span></span><br><span class="line">dataSocket.close()</span><br><span class="line">listenSocket.close()</span><br></pre></td></tr></table></figure><h1 id="TCP客户端程序"><a href="#TCP客户端程序" class="headerlink" title="TCP客户端程序"></a><strong>TCP客户端程序</strong></h1><p>经过服务端程序讲解，客户端的程序就不做详解。一样，直接上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  === TCP 客户端程序 client.py ===</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">IP = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">SERVER_PORT = <span class="number">50000</span></span><br><span class="line">BUFLEN = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个socket对象，指明协议</span></span><br><span class="line">dataSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接服务端socket</span></span><br><span class="line">dataSocket.connect((IP, SERVER_PORT))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 从终端读入用户输入的字符串</span></span><br><span class="line">    toSend = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span>  toSend ==<span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 发送消息，也要编码为 bytes</span></span><br><span class="line">    dataSocket.send(toSend.encode())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待接收服务端的消息</span></span><br><span class="line">    recved = dataSocket.recv(BUFLEN)</span><br><span class="line">    <span class="comment"># 如果返回空bytes，表示对方关闭了连接</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> recved:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 打印读取的信息</span></span><br><span class="line">    <span class="built_in">print</span>(recved.decode())</span><br><span class="line"></span><br><span class="line">dataSocket.close()</span><br></pre></td></tr></table></figure><blockquote><p>其实，客户端的connect() 方法对应着服务端的 accept()方法，进行了三次握手。</p></blockquote>]]></content>
    
    
    <summary type="html">使用Python内置的socket库进行网络编程，接发字符串。</summary>
    
    
    
    <category term="Python" scheme="http://example.com/category/Python/"/>
    
    
    <category term="Socket编程" scheme="http://example.com/tag/Socket%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java泛型机制（三）深入理解泛型</title>
    <link href="http://example.com/post/1eb4aa8d.html"/>
    <id>http://example.com/post/1eb4aa8d.html</id>
    <published>2022-08-11T08:17:29.000Z</published>
    <updated>2022-08-11T08:46:40.601Z</updated>
    
    <content type="html"><![CDATA[<p>泛型不能万能的，有些事情，泛型真做不了。</p><h1 id="泛型类型能不能实例化？"><a href="#泛型类型能不能实例化？" class="headerlink" title="泛型类型能不能实例化？"></a>泛型类型能不能实例化？</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T test = new T(); // ERROR</span><br></pre></td></tr></table></figure><p>因为在 Java 编译期<font color="red"><strong>没法确定泛型参数化类型</strong></font>，也就<font color="red"><strong>找不到对应的类字节码文件</strong></font>，所以自然就不行了。</p><p>此外由于<code>T</code> 被擦除为 <code>Object</code>，如果可以 <code>new T()</code> 则就变成了 <code>new Object()</code>，失去了本意。  </p><h1 id="泛型数组"><a href="#泛型数组" class="headerlink" title="泛型数组"></a>泛型数组</h1><p>泛型数组相关的申明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt;[] list11 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;[<span class="number">10</span>]; <span class="comment">//编译错误，非法创建 </span></span><br><span class="line">List&lt;String&gt;[] list12 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;?&gt;[<span class="number">10</span>]; <span class="comment">//编译错误，需要强转类型 </span></span><br><span class="line">List&lt;String&gt;[] list13 = (List&lt;String&gt;[]) <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;?&gt;[<span class="number">10</span>]; <span class="comment">//OK，但是会有警告 </span></span><br><span class="line">List&lt;?&gt;[] list14 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;[<span class="number">10</span>]; <span class="comment">//编译错误，非法创建 </span></span><br><span class="line">List&lt;?&gt;[] list15 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;?&gt;[<span class="number">10</span>]; <span class="comment">//OK </span></span><br><span class="line">List&lt;String&gt;[] list6 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>[<span class="number">10</span>]; <span class="comment">//OK，但是会有警告</span></span><br></pre></td></tr></table></figure><p>因为在 Java 中是不能创建一个确切的泛型类型的数组的，除非是采用通配符的方式且要做显式类型转换才可以。</p><p>需要说明的是， 只是不允许创建这些数组， 而声明类型为 <code>ArrayList&lt;String&gt;[]</code> 的变量仍是合法的。<strong>不过不能用 <code>new ArrayList&lt;String&gt;[10]</code> 初始化这个变量。</strong></p><p>因为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Pair&lt;String&gt;[] pairs = <span class="keyword">new</span> <span class="title class_">Pair</span>&lt;String&gt;[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//擦除之后</span></span><br><span class="line">Pair[] pairs = <span class="keyword">new</span> <span class="title class_">Pair</span>[<span class="number">10</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组会记住他的元素类型。这是一个安全措施。对于这样的数组，将他转换为Object[]。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Pair[] pairs = <span class="keyword">new</span> <span class="title class_">Pair</span>[<span class="number">10</span>];</span><br><span class="line">Object[] objects = pairs;</span><br><span class="line">objects[<span class="number">0</span>] = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">编译器不会报错，但数组会记住他的元素类型，运行后会报ArrayStoreException.</span></span><br><span class="line"><span class="comment">pairs会记得他是Pair数组，但他并不记得自己是Pair&lt;String&gt;数组还是Pair&lt;Interger&gt;数组</span></span><br><span class="line"><span class="comment">如果我们在Pair&lt;String&gt;数组中放入Pair&lt;Interget&gt;是不会得到ArrayStoreException异常，但这是不安全的。因此参数化类型的数组是完全禁止的。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>讨巧的使用场景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericsDemo30</span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;  </span><br><span class="line">        Integer i[] = fun1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>) ;   <span class="comment">// 返回泛型数组  </span></span><br><span class="line">        fun2(i) ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T[] fun1(T...arg)&#123;  <span class="comment">// 接收可变参数  </span></span><br><span class="line">        <span class="keyword">return</span> arg ;            <span class="comment">// 返回泛型数组  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">fun2</span><span class="params">(T param[])</span>&#123;   <span class="comment">// 输出  </span></span><br><span class="line">        System.out.print(<span class="string">&quot;接收泛型数组：&quot;</span>) ;  </span><br><span class="line">        <span class="keyword">for</span>(T t:param)&#123;  </span><br><span class="line">            System.out.print(t + <span class="string">&quot;、&quot;</span>) ;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="如何实例化一个泛型类和泛型数组"><a href="#如何实例化一个泛型类和泛型数组" class="headerlink" title="如何实例化一个泛型类和泛型数组"></a>如何实例化一个泛型类和泛型数组</h1><p> 如果我们确实需要实例化一个泛型，应该如何做呢？<font color="red" size=5>反射！</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">newTclass</span> <span class="params">(Class &lt; T &gt; clazz)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> newTclass(String.class);<span class="comment">//实例化一个泛型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那我们如何实例化泛型数组呢？<font color="red" size=5>还是反射！</font></p><p>我们可以通过使用 <code>java.lang.reflect.Array.newInstance(Class&lt;T&gt; componentType, int length)</code> 方法来创建一个具有指定类型和维度的数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayWithTypeToken</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T[] array;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayWithTypeToken</span><span class="params">(Class&lt;T&gt; type, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">        array = (T[]) Array.newInstance(type, size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> index, T item)</span> &#123;</span><br><span class="line">        array[index] = item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> array[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T[] create() &#123;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        ArrayWithTypeToken&lt;Integer&gt; arrayToken = <span class="keyword">new</span> <span class="title class_">ArrayWithTypeToken</span>&lt;Integer&gt;(Integer.class, <span class="number">100</span>);</span><br><span class="line">        Integer[] array = arrayToken.create();<span class="comment">//实例化一个泛型数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="如何理解泛型类中的静态方法和静态变量？"><a href="#如何理解泛型类中的静态方法和静态变量？" class="headerlink" title="如何理解泛型类中的静态方法和静态变量？"></a>如何理解泛型类中的静态方法和静态变量？</h1><p>泛型类中的静态方法和静态变量不可以使用泛型类所声明的泛型类型参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span>&lt;T&gt; &#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T one;   <span class="comment">//编译错误    </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  T <span class="title function_">show</span><span class="params">(T one)</span>&#123; <span class="comment">//编译错误    </span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为泛型类中的<strong>泛型参数的实例化</strong>是在<strong>定义对象的时候指定</strong>的，而<strong>静态变量和静态方法不需要使用对象来调用。</strong></p><p>对象都没有创建，如何确定这个泛型参数是何种类型，所以当然是错误的。</p><p>但注意区分以下情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span>&lt;T&gt; &#123;    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T &gt;T <span class="title function_">show</span><span class="params">(T one)</span>&#123; <span class="comment">//这是正确的    </span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为这是一个泛型方法，在泛型方法中使用的T是自己在方法中定义的 T，而不是泛型类中的T。</p>]]></content>
    
    
    <summary type="html">泛型数组，泛型类能不能实例化？以及如何理解泛型类中的静态方法和静态变量?</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/category/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="泛型" scheme="http://example.com/tag/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
</feed>
