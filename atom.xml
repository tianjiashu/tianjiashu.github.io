<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucky Dog&#39;s blogs</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-08-11T07:41:11.579Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java泛型机制（二）深入理解泛型——类型擦除</title>
    <link href="http://example.com/post/ae19fff4.html"/>
    <id>http://example.com/post/ae19fff4.html</id>
    <published>2022-08-10T14:03:18.000Z</published>
    <updated>2022-08-11T07:41:11.579Z</updated>
    
    <content type="html"><![CDATA[<p><strong>JAVA虚拟机没有泛型类型或方法的概念</strong></p><p>编译器通过<strong>擦除</strong>类型变量将泛型类和方法转换为普通类和普通的方法。</p><p>JAVA泛型出来的比较晚，被设计的主要目标是允许泛型代码和遗留代码之间能够相互操作。也就是说<code>java</code>中的泛型是<font color="red"><strong>“伪泛型”</strong></font></p><h1 id="如何理解Java中的泛型是伪泛型？泛型中类型擦除"><a href="#如何理解Java中的泛型是伪泛型？泛型中类型擦除" class="headerlink" title="如何理解Java中的泛型是伪泛型？泛型中类型擦除"></a><strong>如何理解Java中的泛型是伪泛型？泛型中类型擦除</strong></h1><p>​<code>Java</code>泛型这个特性是从<code>JDK 1.5</code>才开始加入的，因此为了兼容之前的版本，Java泛型的实现采取了“<strong>伪泛型</strong>”的策略，即Java在语法上支持泛型，但是在<font color="red"><strong>编译阶段</strong></font>会进行所谓的“<strong>类型擦除</strong>”（Type Erasure）。</p><p><font color="red"><strong>类型擦除</strong></font>：将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型）【<code>E</code> —&gt;  <code>Object</code>】，就像完全没有泛型一样。理解类型擦除对于用好泛型是很有帮助的，尤其是一些看起来“疑难杂症”的问题，弄明白了类型擦除也就迎刃而解了。</p><p><font color="red"><strong>类型擦除原则</strong></font>：</p><ul><li><p>类型参数声明 —&gt; 被消除   例：<code>public List&lt;E&gt;&#123;...&#125;</code>  —–&gt;  <code>public List&#123;...&#125;</code></p></li><li><p>根据类型参数的上下界推断并替换所有的类型参数为原生态类型</p><ul><li><p>类型参数是<font color="blue"><strong>无限制通配符</strong></font>或<font color="blue"><strong>没有上下界限定</strong></font>则替换为Object</p><p> 例：类型声明为<code>&lt;E&gt;或&lt;?&gt;</code>  <strong>:</strong><code>private E name</code>   ——&gt;   <code>private Object name</code></p></li><li><p><font color="blue"><strong>存在上下界限定</strong></font>则根据子类替换原则取**类型参数的最左边限定类型(即第一个)**（即父类）。</p><p>例: 类型声明为<code>&lt;E extends Number&gt;</code> <strong>:</strong>   <code>private E age</code>   ——&gt;   <code>private Number age</code></p></li></ul></li><li><p>为了保证类型安全，必要时插入强制类型转换代码。</p></li><li><p>自动产生<strong>“桥接方法”</strong>以保证擦除类型后的代码仍然具有泛型的“多态性”</p></li></ul><h2 id="类型擦除示例"><a href="#类型擦除示例" class="headerlink" title="类型擦除示例"></a>类型擦除示例</h2><ul><li><p>擦除类定义中的类型参数</p><ul><li><p>无限制类型擦除</p><p><img src="/%5Cimage%5Carticle%5CJava%E6%B3%9B%E5%9E%8B%E6%9C%BA%E5%88%B6%EF%BC%88%E4%BA%8C%EF%BC%89%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B%5Cjava-basic-generic-1.png" alt="java-basic-generic-1"></p></li><li><p>有限制类型擦除</p><p><img src="/%5Cimage%5Carticle%5CJava%E6%B3%9B%E5%9E%8B%E6%9C%BA%E5%88%B6%EF%BC%88%E4%BA%8C%EF%BC%89%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B%5Cjava-basic-generic-2.png" alt="java-basic-generic-2"></p></li><li><p>多个有限制类型擦除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span> &amp; Cloneable &gt;&#123;<span class="comment">//替换为第一个限定类型</span></span><br><span class="line">    <span class="keyword">private</span> T first;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">show</span><span class="params">(T a,T b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.compareTo(b)==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=======================擦除之后的===============================</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Comparable first;<span class="comment">//替换为限定类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">show</span><span class="params">(Comparable a,Comparable b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.compareTo(b)==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>擦除返回类型时，编译器会插入<strong>类型强制转换</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用时</span></span><br><span class="line">Pair&lt;Integer&gt; pair = <span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;();</span><br><span class="line"><span class="type">Integer</span> <span class="variable">first</span> <span class="operator">=</span> pair.getFirst();</span><br><span class="line"><span class="comment">//擦除之后</span></span><br><span class="line"><span class="type">Pair</span> <span class="variable">pair</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pair</span>();</span><br><span class="line"><span class="type">Integer</span> <span class="variable">first</span> <span class="operator">=</span> (Integer) pair.getFirst();<span class="comment">//插入一个强制类型转换</span></span><br></pre></td></tr></table></figure></li><li><p>参数类型<strong>不需要强制转换</strong>,因为它被擦除为Object。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Pair&lt;String&gt; pair1 = <span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;();</span><br><span class="line">pair1.setFirst(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line"><span class="comment">//-------------------------------</span></span><br><span class="line"><span class="type">Pair</span> <span class="variable">pair1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pair</span>();</span><br><span class="line">pair1.setFirst(<span class="string">&quot;1234&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>擦除方法定义中的类型参数</p><p><img src="/%5Cimage%5Carticle%5CJava%E6%B3%9B%E5%9E%8B%E6%9C%BA%E5%88%B6%EF%BC%88%E4%BA%8C%EF%BC%89%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B%5Cjava-basic-generic-3.png" alt="java-basic-generic-3"></p></li></ul><h1 id="如何证明类型擦除"><a href="#如何证明类型擦除" class="headerlink" title="如何证明类型擦除"></a>如何证明类型擦除</h1><p><font size= 4><strong>例一  原始类型相等</strong></font></p><p>定义两个<code>ArrayList</code>。</p><p>一个泛型是<code>String</code>，只能添加<code>String </code>类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; stringlist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><p>一个泛型是<code>Integer</code>，只能添加<code>Integer</code>类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; integerlist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><p>比较他俩<code>Class</code>对象。我们会发现结果为true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(stringlist.getClass() == integerlist.getClass());<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><strong>同一对象的<code>Class</code>对象是等同的</strong>，因此由此可以得出，即使泛型不一样，但他们的原始类型是相等的。</p><blockquote><p><font size=4><strong>关于Class对象</strong></font></p><p>​这个<code>Class</code>对象是在编译之后生成的，之所以相等，是因为泛型被擦除为了原始类型。</p><p>​每个通过关键字class标识的类，在内存中有且只有一个与之对应的Class对象来描述其类型信息，无论创建多少个实例对象，其依据的都是用一个Class对象。</p></blockquote><p><font size= 4><strong>例二  通过反射添加其它类型元素</strong></font></p><p>定义一个<code>ArrayList&lt;Integer&gt;</code>，通过<code>add()</code>方法只能添加<code>Integer</code>类型的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();         </span><br><span class="line">list.add(<span class="number">1</span>);  </span><br></pre></td></tr></table></figure><p>但我们可以&#x3D;&#x3D;<strong>通过反射绕过泛型检查</strong>&#x3D;&#x3D;，进而添加其他类型的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.getClass().getMethod(<span class="string">&quot;add&quot;</span>, Object.class).invoke(list, <span class="string">&quot;asd&quot;</span>);</span><br></pre></td></tr></table></figure><p>这说明了<code>Integer</code>泛型实例在编译之后被擦除掉了，只保留了原始类型。</p><blockquote><p><font size=4><strong>为什么反射可以绕过泛型检查？</strong></font></p><p>因为，<strong>泛型检查是在<font color="blue">编译期间</font><strong>进行的，而</strong>反射获取的是已经<font color="blue">编译之后</font>的</strong>。之所以能通过反射添加其他类型元素，就是因为编译之后，泛型被擦除掉了，回归成了<font color="purple"><strong>原始类型</strong></font>，可以理解为等价于<code>ArrayList&lt;Object&gt; list = new Arraylist&lt;&gt;();</code>，可以添加任何类型的元素，因为泛型被擦除成了Object</p></blockquote><h1 id="什么是原始类型？如何理解？"><a href="#什么是原始类型？如何理解？" class="headerlink" title="什么是原始类型？如何理解？"></a>什么是原始类型？如何理解？</h1><p><strong>原始类型</strong> 就是&#x3D;&#x3D;擦除去了泛型信息，最后在字节码中的类型变量的真正类型&#x3D;&#x3D;，无论何时定义一个泛型，相应的原始类型都会被自动提供，类型变量擦除，并使用其<strong>限定类型（无限定的变量用Object）替换</strong>。</p><p>其实在泛型类中，不指定泛型的时候，也差不多，只不过这个时候的泛型为Object，就比如<code>ArrayList</code>中，如果不指定泛型，那么这个<code>ArrayList</code>可以存储任意的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ArrayList</span> <span class="variable">arrayList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">arrayList.add(<span class="number">1</span>);</span><br><span class="line">arrayList.add(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">arrayList.add(<span class="number">12.2</span>);</span><br></pre></td></tr></table></figure><h1 id="如何理解泛型的编译期检查？"><a href="#如何理解泛型的编译期检查？" class="headerlink" title="如何理解泛型的编译期检查？"></a>如何理解泛型的编译期检查？</h1><p>当我们定义一个<code>ArrangList</code>，并指定泛型为<code>String</code>类型，然后就只能<strong>添加</strong>或者<strong>获取</strong><code>String</code>类型的数据。当添加其他类型的数据时，就会报错，这是为什么呢？这是因为存在编译期检查。</p><p>&#x3D;&#x3D;Java编译器是通过先<strong>检查代码中泛型的类型</strong>，然后在进行<strong>类型擦除</strong>，再进行<strong>编译</strong>。&#x3D;&#x3D;</p><p>类型擦除后，原始类型为<code>Object</code>，但不允许任意引用类型添加，这恰恰说明了关于泛型变量的使用，是会在<strong>编译之前检查</strong>的。</p><h2 id="类型检查针对谁？"><a href="#类型检查针对谁？" class="headerlink" title="类型检查针对谁？"></a>类型检查针对谁？</h2><p><strong>类型检查就是针对<font color="red">引用</font>的，谁是一个引用，用这个引用调用泛型方法，就会对这个引用调用的方法进行类型检测，而无关它真正引用的对象</strong>。</p><p>例一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(); <span class="comment">//有警告</span></span><br><span class="line">list1.add(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">list1.add(<span class="number">123</span>);<span class="comment">//报错!</span></span><br></pre></td></tr></table></figure><p>类型检查针对<code>ArrayList&lt;String&gt;</code>这个引用。当调用这个引用的方法<code>add()</code>，就根据<code>&lt;String&gt;</code>这个类型进行检查。</p><p>例二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ArrayList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(); <span class="comment">//有警告</span></span><br><span class="line">list2.add(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">list2.add(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>以上没有报错，类型检查针对<code>ArrayList</code>，当调用方法<code>add()</code>时，由于没有指定泛型，所以使用<code>Object</code>进行检查。</p><h2 id="泛型中参数化类型不考虑继承关系"><a href="#泛型中参数化类型不考虑继承关系" class="headerlink" title="泛型中参数化类型不考虑继承关系"></a>泛型中参数化类型不考虑继承关系</h2><p><strong>情况一<code>ArrayList&lt;String&gt; list1 = new ArrayList&lt;Object&gt;();</code>：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Object&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Object&gt;();  </span><br><span class="line">list1.add(<span class="keyword">new</span> <span class="title class_">Object</span>());  </span><br><span class="line">list1.add(<span class="keyword">new</span> <span class="title class_">Object</span>());  </span><br><span class="line">ArrayList&lt;String&gt; list2 = list1; <span class="comment">//编译错误</span></span><br></pre></td></tr></table></figure><p>我们假设以上编译成功····</p><p><code>list.get()</code>获取的是<code>String</code>类型。但我们之前添加的是<code>Object</code>类型，我们知道，Java中对象直接向下转型的【<font color="red"><strong>只有向上转型过的对象才能向下转型</strong></font>】。</p><p>这样就会有<code>ClassCastException</code>了。所以为了避免这种极易出现的错误，Java不允许进行这样的引用传递。(也违背了设计的初衷)</p><p><strong>情况二<code>ArrayList&lt;Object&gt; list2 = new ArrayList&lt;String&gt;();</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();  </span><br><span class="line">list1.add(<span class="keyword">new</span> <span class="title class_">String</span>());  </span><br><span class="line">list1.add(<span class="keyword">new</span> <span class="title class_">String</span>());</span><br><span class="line"></span><br><span class="line">ArrayList&lt;Object&gt; list2 = list1; <span class="comment">//编译错误</span></span><br></pre></td></tr></table></figure><p>这样的情况比第一种情况好的多，最起码，在我们用<code>list2</code>取值的时候不会出现<code>ClassCastException</code>，因为是从<code>String</code>转换为<code>Object</code>。可是，这样做有什么意义呢，泛型出现的原因，就是为了解决类型转换的问题。</p><p>我们使用了泛型，到头来，还是要自己强转，违背了泛型设计的初衷。所以<code>java</code>不允许这么干。再说，你如果又用<code>list2</code>往里面add()新的对象，那么到时候取得时候，我怎么知道我取出来的到底是<code>String</code>类型的，还是<code>Object</code>类型的呢？</p><h1 id="如何理解泛型的多态【桥方法】"><a href="#如何理解泛型的多态【桥方法】" class="headerlink" title="如何理解泛型的多态【桥方法】"></a>如何理解泛型的多态【桥方法】</h1><h2 id="为什么类型擦除会造成多态的冲突？"><a href="#为什么类型擦除会造成多态的冲突？" class="headerlink" title="为什么类型擦除会造成多态的冲突？"></a>为什么类型擦除会造成多态的冲突？</h2><p>现在有这样一个泛型类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span>&lt;T&gt; &#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T value;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getValue</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> value;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(T value)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.value = value;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义一个类继承这个泛型类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DateInter</span> <span class="keyword">extends</span> <span class="title class_">Pair</span>&lt;Date&gt; &#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">//重写覆盖</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Date value)</span> &#123;  </span><br><span class="line">        <span class="built_in">super</span>.setValue(value);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">//重写覆盖</span></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getValue</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getValue();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，有这样的一个事实，类<code>DateInter</code>继承了一个泛型类<code>Pair&lt;T&gt;</code>。</p><p>类型擦除后，父类的的泛型类型全部变为了原始类型Object，所以父类编译之后会变成下面的样子：</p><img src="\image\article\Java泛型机制（二）深入理解泛型\image-20220811144206244.png" alt="image-20220811144206244" style="zoom:67%;" /><p>让我们回忆一下什么是<strong>重写</strong>，什么是<strong>重载</strong></p><blockquote><p>重写：指子类实现了一个与父类在方法声明上<strong>完全相同</strong>的一个方法。</p><p>重载：存在于同一个类中，指一个方法与已经存在的方法名称上相同，但是<strong>参数</strong>类型、个数、顺序至少有一个不同。</p></blockquote><p><code>setValue</code>方法，在父类类型擦除之后，还算是重写吗？</p><p>父类的参数类型是<code>Object</code>，子类的参数类型是<code>Date</code>。</p><p>这根本不是重写，而是重载。</p><p>我们的本意是：<strong>进行重写，实现多态。</strong></p><p>但是事实是：<strong>类型擦除后，只能变为了重载。</strong></p><p>这样，<font color="red" size=5><strong>类型擦除就和多态有了冲突。</strong></font></p><h2 id="JVM如何解决类型擦除和多态的冲突？"><a href="#JVM如何解决类型擦除和多态的冲突？" class="headerlink" title="JVM如何解决类型擦除和多态的冲突？"></a><code>JVM</code>如何解决类型擦除和多态的冲突？</h2><p><code>JVM</code>为了解决类型擦除和多态的冲突，采用了特殊的方法：&#x3D;&#x3D;<strong>桥方法</strong>&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span>&lt;T&gt; &#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T value;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getValue</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> value;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(T value)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.value = value;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DateInter</span> <span class="keyword">extends</span> <span class="title class_">Pair</span>&lt;Date&gt; &#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Date value)</span> &#123;  </span><br><span class="line">        <span class="built_in">super</span>.setValue(value);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getValue</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getValue();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上，代码经过编译后，<strong>编译器</strong>会自动给我们生成<strong>桥方法</strong>，<code>Pair&lt;T&gt;</code>经过泛型擦除后变成了原始类型，因为不做展示，让我们来看看子类<code>DateInter</code>,经过编译后是什么样子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DateInter</span> <span class="keyword">extends</span> <span class="title class_">Pair</span>&lt;Date&gt; &#123;  </span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Date value)</span> &#123;  </span><br><span class="line">        ...  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getValue</span><span class="params">()</span> &#123;  </span><br><span class="line">        ...  </span><br><span class="line">    &#125;  </span><br><span class="line"><span class="comment">//以下两个方法就是编译器给我们生成的“桥方法”。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object value)</span> &#123;  </span><br><span class="line">        setValue(value);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> getValue();  </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，原本两个方法，编译之后成了四个方法，这多出来的方法就是<strong>桥方法</strong>，这个<strong>桥方法</strong>，不就相当于<strong>重写</strong>了父类的方法吗，实现了多态。</p><p>这就是 <strong>虚拟机巧妙的使用了桥方法，来解决了类型擦除和多态的冲突。</strong></p><p><font color="red" size= 5><strong>但是还是有一个问题：</strong></font></p><p><img src="/%5Cimage%5Carticle%5CJava%E6%B3%9B%E5%9E%8B%E6%9C%BA%E5%88%B6%EF%BC%88%E4%BA%8C%EF%BC%89%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B%5Cimage-20220811151617944.png" alt="image-20220811151617944"></p><p>当我们自己写代码时，两个方法的方法签名是一样的。这是不允许的，编译器无法通过，但为了解决<strong>类型擦除和多态的冲突</strong>，编译器却生成了他不允许的方法。</p><p>但实际上，<code>JVM </code>会用方法名、参数类型和返回类型来确定一个方法，所以针对方法签名相同的两个方法，返回值类型不相同的时候，<code>JVM</code>是能分辨的。</p><p>所以编译器为了实现泛型的多态允许自己做这个看起来“不合法”的事情，然后交给虚拟器去区别。</p><blockquote><p>方法签名：方法名+方法参数列表【重载过程中，使用方法签名可以唯一确定一个方法】</p></blockquote><p><font color="red" size=5><strong>还有一点需要说明的是</strong></font></p><p>这里面的<code>setValue</code>和<code>getValue</code>这两个<strong>桥方法</strong>的意义又有不同。</p><ul><li><p><code>setValue</code>方法是为了解决类型擦除与多态之间的冲突。</p></li><li><p><code>getValue</code>却有普遍的意义</p><p>如果这是一个普通的继承关系，那么父类的<code>getValue</code>方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.getValue();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而子类重写的方法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Date <span class="title function_">getValue</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.getValue();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这在普通的类继承中也是普遍存在的重写，这就是<strong>协变</strong>。</p></li></ul><p>参考:</p><ul><li>《java核心技术》</li><li><a href="https://pdai.tech/md/java/basic/java-basic-x-generic.html">https://pdai.tech/md/java/basic/java-basic-x-generic.html</a></li><li><a href="https://blog.csdn.net/qijingwang/article/details/119358511">https://blog.csdn.net/qijingwang/article/details/119358511</a></li><li><a href="https://blog.csdn.net/hao_yan_bing/article/details/89447792">https://blog.csdn.net/hao_yan_bing/article/details/89447792</a></li></ul>]]></content>
    
    
    <summary type="html">Java中的泛型是伪泛型？什么是类型擦除？如何证明类型擦除？什么是原始类型？如何理解编译器检查？JVM是如何解决类型擦除和多态之间的冲突的？</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/category/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="泛型" scheme="http://example.com/tag/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java泛型机制（一）泛型基础</title>
    <link href="http://example.com/post/474fbc8a.html"/>
    <id>http://example.com/post/474fbc8a.html</id>
    <published>2022-08-09T07:54:25.000Z</published>
    <updated>2022-08-11T07:37:29.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="泛型概述"><a href="#泛型概述" class="headerlink" title="泛型概述"></a>泛型概述</h1><p>泛型程序设计  意味着  **编写的代码可以被很多不同类型的对象所<font color="red">重用</font>**！</p><p>Java泛型这个特性是从<code>JDK 1.5</code>开始的。因此为了兼容之前的版本，Java泛型的实现采取了“<strong>伪泛型</strong>”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“<strong>类型擦除</strong>”（Type Erasure），将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样。【类型擦除之后会讲解】。</p><p>其实，引入泛型的意义就是为了<strong>代码复用</strong></p><h2 id="为什么要使用泛型？"><a href="#为什么要使用泛型？" class="headerlink" title="为什么要使用泛型？"></a>为什么要使用泛型？</h2><p>泛型的好处是在编译的时候检查类型安全，并且所有的强制转换都是自动和隐式的，提高代码的重用率。</p><ul><li><p><strong>保证了类型的安全性【类型转换问题】</strong></p><p>在没有泛型之前，从集合中读取到的每一个对象都必须进行类型转换，如果不小心插入了错误的类型对象，在运行时的转换处理就会出错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ArrayList</span> <span class="variable">arrayList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();<span class="comment">//没有指定泛型，可以添加任何类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Object o : arrayList) &#123;</span><br><span class="line">    <span class="comment">//那当我们取的时候只能使用Object类型接收，那我们要是使用某个类型的方法时，我们需要进行强制类型转换</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> (String) o;  <span class="comment">//你确定一定可以强制类型转换成功吗？</span></span><br><span class="line">    System.out.println(s.length());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red"><strong>泛型中参数化类型不考虑继承关系</strong></font>的原因也就是因为如果考虑了继承关系，也就违背了泛型设计的初衷。</p><p>【详解见Java泛型机制（二）深入理解泛型——类型擦除】</p></li><li><p><strong>消除强制转换</strong></p><p>消除源代码中的许多强制类型转换，这使得代码更加可读，并且减少了出错机会。</p></li><li><p><strong>避免了不必要的装箱、拆箱操作，提高程序的性能</strong></p><p>在非泛型编程中，将筒单类型作为Object传递时会引起Boxing（装箱）和Unboxing（拆箱）操作，这两个过程都是具有很大开销的。引入泛型后，就不必进行Boxing和Unboxing操作了，所以运行效率相对较高，特别在对集合操作非常频繁的系统中，这个特点带来的性能提升更加明显。</p></li><li><p><strong>提高了代码的重用性。</strong></p></li></ul><h1 id="泛型的基本使用"><a href="#泛型的基本使用" class="headerlink" title="泛型的基本使用"></a>泛型的基本使用</h1><p>泛型有三种使用方式，分别为：</p><ul><li>泛型类</li><li>泛型接口</li><li>泛型方法。</li></ul><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Generi</span>&lt;T&gt; &#123;<span class="comment">//此处可以随便写标识符号，T是type的简称 </span></span><br><span class="line">    <span class="keyword">private</span> T str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getStr</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStr</span><span class="params">(T str)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(T aa)</span>&#123;</span><br><span class="line">        System.out.println(aa);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span>&lt;T,U&gt;&#123;<span class="comment">//多元泛型</span></span><br><span class="line">    <span class="keyword">private</span> T first;</span><br><span class="line">    <span class="keyword">private</span> U second;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Info</span>&lt;T&gt;&#123;        <span class="comment">// 在接口上定义泛型  </span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getVar</span><span class="params">()</span> ; <span class="comment">// 定义抽象方法，抽象方法的返回值就是泛型类型  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InfoImpl</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Info</span>&lt;T&gt;&#123;   <span class="comment">// 定义泛型接口的子类  </span></span><br><span class="line">    <span class="keyword">private</span> T <span class="keyword">var</span> ;             <span class="comment">// 定义属性  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InfoImpl</span><span class="params">(T <span class="keyword">var</span>)</span>&#123;     <span class="comment">// 通过构造方法设置属性内容  </span></span><br><span class="line">        <span class="built_in">this</span>.setVar(<span class="keyword">var</span>) ;    </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVar</span><span class="params">(T <span class="keyword">var</span>)</span>&#123;  </span><br><span class="line">        <span class="built_in">this</span>.<span class="keyword">var</span> = <span class="keyword">var</span> ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getVar</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.<span class="keyword">var</span> ;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Generi2</span> &#123;<span class="comment">//这个类并不是泛型类</span></span><br><span class="line">    <span class="comment">//泛型方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(T t)</span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Generi2.&lt;String&gt;show(<span class="string">&quot;asda&quot;</span>);</span><br><span class="line">Generi2.show(<span class="string">&quot;asda&quot;</span>);<span class="comment">//&lt;String&gt;  可以省略</span></span><br></pre></td></tr></table></figure><hr><p>关于泛型方法定义：泛型方法可以定义在<strong>普通类</strong>中，也可以定义在<strong>泛型类</strong>中。</p><p>关于泛型方法调用：在调用泛型方法时，可以指定泛型，也可以不指定泛型:</p><p>先定义一个简单的泛型方法，通过演示看看<strong>指定泛型</strong>和<strong>不指定泛型</strong>的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是一个简单的泛型方法  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">add</span><span class="params">(T x,T y)</span>&#123;  </span><br><span class="line"><span class="keyword">return</span> y;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><ul><li><p>在不指定泛型的情况下，可以使用任意类型，但<strong>泛型变量的类型</strong>为该方法中的**几种类型的同一父类的<font color="red">最小级</font>**，直到Object</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Test.add(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">//这两个参数都是Integer，所以T为Integer类型  </span></span><br><span class="line"><span class="type">Number</span> <span class="variable">f</span> <span class="operator">=</span> Test.add(<span class="number">1</span>, <span class="number">1.2</span>); <span class="comment">//这两个参数一个是Integer，一个是Float，所以取同一父类的最小级，为Number  </span></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> Test.add(<span class="number">1</span>, <span class="string">&quot;asd&quot;</span>); <span class="comment">//这两个参数一个是Integer，一个是String，所以取同一父类的最小级，为Object  </span></span><br></pre></td></tr></table></figure></li><li><p>在指定泛型的情况下，该方法的几种类型必须是**<font color="red">该泛型的实例的类型</font>或者<font color="red">其子类</font>**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> Test.&lt;Integer&gt;add(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">//指定了Integer，所以只能为Integer类型或者其子类  </span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> Test.&lt;Integer&gt;add(<span class="number">1</span>, <span class="number">2.2</span>); <span class="comment">//编译错误，指定了Integer，不能为Float  </span></span><br><span class="line"><span class="type">Number</span> <span class="variable">c</span> <span class="operator">=</span> Test.&lt;Number&gt;add(<span class="number">1</span>, <span class="number">2.2</span>); <span class="comment">//指定为Number，所以可以为Integer和Float </span></span><br></pre></td></tr></table></figure></li></ul><hr><p>完整示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line"></span><br><span class="line">        <span class="comment">/**不指定泛型的时候*/</span>  </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Test.add(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">//这两个参数都是Integer，所以T为Integer类型  </span></span><br><span class="line">        <span class="type">Number</span> <span class="variable">f</span> <span class="operator">=</span> Test.add(<span class="number">1</span>, <span class="number">1.2</span>); <span class="comment">//这两个参数一个是Integer，一个是Float，所以取同一父类的最小级，为Number  </span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> Test.add(<span class="number">1</span>, <span class="string">&quot;asd&quot;</span>); <span class="comment">//这两个参数一个是Integer，一个是String，所以取同一父类的最小级，为Object  </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**指定泛型的时候*/</span>  </span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> Test.&lt;Integer&gt;add(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">//指定了Integer，所以只能为Integer类型或者其子类  </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> Test.&lt;Integer&gt;add(<span class="number">1</span>, <span class="number">2.2</span>); <span class="comment">//编译错误，指定了Integer，不能为Float  </span></span><br><span class="line">        <span class="type">Number</span> <span class="variable">c</span> <span class="operator">=</span> Test.&lt;Number&gt;add(<span class="number">1</span>, <span class="number">2.2</span>); <span class="comment">//指定为Number，所以可以为Integer和Float  </span></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是一个简单的泛型方法  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">add</span><span class="params">(T x,T y)</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> y;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类型限定"><a href="#类型限定" class="headerlink" title="类型限定"></a>类型限定</h1><p><strong>先看一个例子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>B是A的子类。然后定义一个方法<code>funA(A a)</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">funA</span><span class="params">(A a)</span> &#123;</span><br><span class="line">    <span class="comment">// ...          </span></span><br><span class="line">&#125;</span><br><span class="line">funA(A);</span><br><span class="line">funA(B);</span><br></pre></td></tr></table></figure><p>以上两个调用都不会报错。那再定义一个方法<code>funA(List&lt;A&gt; listA)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">funC</span><span class="params">(List&lt;A&gt; listA)</span> &#123;</span><br><span class="line">    <span class="comment">// ...          </span></span><br><span class="line">&#125;</span><br><span class="line">funA(<span class="keyword">new</span> <span class="title class_">List</span>&lt;A&gt;);</span><br><span class="line">funA(<span class="keyword">new</span> <span class="title class_">List</span>&lt;B&gt;);  <span class="comment">//很明显会报错 为什么呢？先说如何解决</span></span><br></pre></td></tr></table></figure><p><font color="blue" size=5><strong>如何解决？</strong></font></p><p>泛型设计初衷之一就是为了解决<strong>类型转换</strong>问题，泛型中参数化类型不考虑继承关系【不允许类型转换】，但有的时候也确实需要进行类型转换。</p><p>为了解决泛型中<strong>隐含的类型转换问题</strong>，Java泛型加入了<strong>类型参数</strong>的&#x3D;&#x3D;<strong>上下边界机制</strong>&#x3D;&#x3D;。【<font color="red">注意是<strong>类型参数</strong></font>】，为类型参数添加限制的同时，对类和对象的使用也添加了限制ˋ( ° ▽、° )。详情见下 </p><p><code>&lt;? extends A&gt;</code>表示该类型参数可以是<strong>A(上边界)<strong>或者</strong>A的子类类型</strong>。你可以这样理解，【对于<code>? extends A</code>，该类型参数须是<strong>继承了A</strong>。】编译时擦除到类型A，即用A类型代替类型参数。</p><p>使用<code>&lt;? extends A&gt;</code>可以解决以上的问题</p><p>​编译器知道了类型参数的范围—&gt;如果传入的实例类型B是在这个范围内的话—&gt;允许转换</p><p>​这时只要一次类型转换就可以了，运行时会把对象当做A的实例看待。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">funC</span><span class="params">(List&lt;? extends A&gt; listA)</span> &#123;</span><br><span class="line">    <span class="comment">// ...          </span></span><br><span class="line">&#125;</span><br><span class="line">funA(<span class="keyword">new</span> <span class="title class_">List</span>&lt;A&gt;);</span><br><span class="line">funA(<span class="keyword">new</span> <span class="title class_">List</span>&lt;B&gt;);  <span class="comment">//这样就不会报错</span></span><br></pre></td></tr></table></figure><p><font color="blue" size=5><strong>为什么会报错？</strong></font></p><p>类B是类A的子类。A是B的父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">funC</span><span class="params">(List&lt;A&gt; listA)</span> &#123;</span><br><span class="line">    <span class="comment">// ...          </span></span><br><span class="line">&#125;</span><br><span class="line">funA(<span class="keyword">new</span> <span class="title class_">List</span>&lt;B&gt;);  <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><p>这相当于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;A&gt; listA = new List&lt;B&gt;; </span><br></pre></td></tr></table></figure><p>假如这样不会报错····当我们从<code>listA</code>取值时，都是A类型。B类型转换为A类型【子类向上转型为父类，这是Java允许的】。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B element = (B)listA.get(0);</span><br></pre></td></tr></table></figure><p>但这样做是没有意义的，这违背了泛型的初衷——<strong>解决类型转换问题</strong>。就像</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;;<span class="comment">//这是Java不允许的。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String)list.get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>我们使用了泛型，到头来，还是要自己强转，违背了泛型设计的初衷。所以<code>java</code>不允许这么干。</p><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>常用的通配符有： <code>T，E，K，V，?</code></p><p>其实也可以是A、B、C、D、E等的字母代替。使用 <code>T，E，K，V，?</code>只不过是约定俗成而已。</p><p><code>T，E，K，V，?</code>  的约定如下：</p><p><code>T</code>：(type) 表示具体的一个<code>java</code>类型。</p><p><code>E</code>：代表Element。</p><p><code>K、V</code> ：分别代表<code>java</code>键值中的Key Value。</p><p><code>?</code> ：无界通配符，表示不确定的 <code>java</code> 类型</p><h2 id="上下限"><a href="#上下限" class="headerlink" title="上下限"></a>上下限</h2><p>在使用泛型的时候，我们可以为传入的泛型类型实参进行上下边界的限制，如：类型实参只准传入某种类型的父类或某种类型的子类</p><ul><li><code>&lt;?&gt;</code> 无限制通配符</li><li><code>&lt;? extends E&gt;</code>     <code>extends</code> 关键字声明了<strong>类型的上界</strong>，表示参数化的类型可能是所指定的类型，或者是&#x3D;&#x3D;此类型的<strong>子类</strong>&#x3D;&#x3D;</li><li><code>&lt;? super E&gt;</code>        <code>super</code> 关键字声明了<strong>类型的下界</strong>，表示参数化的类型可能是指定的类型，或者是&#x3D;&#x3D;此类型的<strong>父类</strong>&#x3D;&#x3D;</li></ul><p>使用原则《Effictive Java》<br>为了获得最大限度的灵活性，要在表示 生产者或者消费者 的&#x3D;&#x3D;<strong>输入参数</strong>&#x3D;&#x3D;上使用通配符，使用的规则就是：生产者有上限、消费者有下限</p><ol><li>如果参数化类型表示一个 T 的生产者，使用 &lt; ? extends T&gt;;</li><li>如果它表示一个 T 的消费者，就使用 &lt; ? super T&gt;；</li><li>如果既是生产又是消费，那使用通配符就没什么意义了，因为你需要的是精确的参数类型。</li></ol><p><font size=4><strong>上边界限定通配符 &lt; ? extends E&gt;</strong></font></p><p><code>&lt;T extends BoundingType&gt;</code>表示<code>T</code>应该是<code>BoundingType</code>的子类型。T和<code>BoundingType</code>可以是类，也可以是接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">demo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Double&gt; doubleList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        doubleList.add(<span class="number">1.2</span>);</span><br><span class="line">        doubleList.add(<span class="number">3.13</span>);</span><br><span class="line">        show(doubleList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(List&lt;? extends Number&gt; list)</span>&#123;<span class="comment">//参数类型 必须是Number的子类</span></span><br><span class="line"><span class="comment">//        list.add(10.1);</span></span><br><span class="line">        <span class="keyword">for</span> (Number number : list) &#123;</span><br><span class="line">            System.out.println(number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从以上代码可以看出，参数被限定为泛型必须是Number的子类。<font color="red" size= 5><strong>可以取出，但是不能添加</strong></font></p><p><img src="/%5Cimage%5Carticle%5CJava%E6%B3%9B%E5%9E%8B%E6%9C%BA%E5%88%B6%EF%BC%88%E4%B8%80%EF%BC%89%E6%B3%9B%E5%9E%8B%E5%9F%BA%E7%A1%80%5Cimage-20220809181958588.png" alt="image-20220809181958588"></p><ul><li><p>为什么不能添加呢？</p><p>因为，List中的元素都是Number的子类。</p><p>如果list的泛型是<code>Integer</code>类型，此时你去添加<code>Integer</code>类型的没问题。</p><p>如果list的泛型是<code>Double</code>类型，此时你去添加<code>Double</code>类型的没问题。</p><p>但是，现在不确定是什么类型的，只知道他是Number的子类，就能添加。</p><p>如果list是<code>Integer</code>类型的,那就不能添加除<code>Integer</code>之外的，那如果是<code>Double</code>呢，也一样，所以就全都不能添加啦。</p></li><li><p>那为什么可以取出呢？</p><p>因为我们从list中拿出来的必定是<code>Number</code>类型的，毕竟<code>Integer</code>等都去继承<code>Number</code>了，可以自动<strong>向上转型</strong></p></li></ul><p><font size=4><strong>下边界限定通配符 &lt; ? super E&gt;</strong></font></p><p>又叫<u>超类型通配符</u>。与extends特性完全相反。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">demo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; integerList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(List&lt;? <span class="built_in">super</span> Integer&gt; list)</span>&#123;</span><br><span class="line">        list.add(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与上限相反，<font color="red" size= 5><strong>可以添加，但是不能取出</strong></font></p><ul><li><p>为什么可以添加？</p><p>这里定义了下限是<code>Integer</code>,也就是说这个list里面的类型都是<code>Integer</code>的父类，所以我们只能添加<code>Integer</code>和他的父类。</p></li><li><p>为什么不能取出？</p><p>因为取的时候没法确实是<code>Interger</code>的哪个父类【没法向上转型】,最后都只能获取我们的根类<code>Object</code></p></li></ul><blockquote><p>还要说一句的是，如果既没有上限也没有下限，就既不能取出也不能添加。取出只能用根类<code>Object</code>接收，因为取出根本不知道什么类型的。里面是什么类型不知道，所以就不能放进去。</p></blockquote><h2 id="实际例子"><a href="#实际例子" class="headerlink" title="实际例子"></a>实际例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>  &lt;E <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;? <span class="built_in">super</span> E&gt;&gt; E <span class="title function_">max</span><span class="params">(List&lt;? extends E&gt; e1)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (e1 == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//迭代器返回的元素属于 E 的某个子类型</span></span><br><span class="line">    Iterator&lt;? <span class="keyword">extends</span> <span class="title class_">E</span>&gt; iterator = e1.iterator();</span><br><span class="line">    <span class="type">E</span> <span class="variable">result</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        <span class="type">E</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">        <span class="keyword">if</span> (next.compareTo(result) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            result = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有三处类型限定泛型：</p><ul><li><p><code>Comparable&lt;? super E&gt;</code></p><p>要对 E 进行比较，即 E 的消费者，所以需要用 super</p></li><li><p><code>List&lt;? extends E&gt;</code></p><p>我们要操作的数据的<code>E</code>，需要<strong>取出</strong>进行比较，所以使用<code>extends</code>。</p></li><li><p><code>&lt;E extends Comparable&lt;? super E&gt;&gt;</code></p><p>要进行比较，所以 E 需要是可比较的类，因此需要 <code>extends Comparable&lt;…&gt;</code></p></li></ul><h2 id="多个限制"><a href="#多个限制" class="headerlink" title="多个限制"></a>多个限制</h2><p>使用&amp;符号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="comment">//工资低于2500元的上斑族并且站立的乘客车票打8折</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Staff</span> &amp; Passenger&gt; <span class="keyword">void</span> <span class="title function_">discount</span><span class="params">(T t)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t.getSalary()&lt;<span class="number">2500</span> &amp;&amp; t.isStanding())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;恭喜你！您的车票打八折！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        discount(<span class="keyword">new</span> <span class="title class_">Me</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="泛型数组"><a href="#泛型数组" class="headerlink" title="泛型数组"></a>泛型数组</h1><p>泛型数组相关的申明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt;[] list11 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;[<span class="number">10</span>]; <span class="comment">//编译错误，非法创建 </span></span><br><span class="line">List&lt;String&gt;[] list12 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;?&gt;[<span class="number">10</span>]; <span class="comment">//编译错误，需要强转类型 </span></span><br><span class="line">List&lt;String&gt;[] list13 = (List&lt;String&gt;[]) <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;?&gt;[<span class="number">10</span>]; <span class="comment">//OK，但是会有警告 </span></span><br><span class="line">List&lt;?&gt;[] list14 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;[<span class="number">10</span>]; <span class="comment">//编译错误，非法创建 </span></span><br><span class="line">List&lt;?&gt;[] list15 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;?&gt;[<span class="number">10</span>]; <span class="comment">//OK </span></span><br><span class="line">List&lt;String&gt;[] list6 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>[<span class="number">10</span>]; <span class="comment">//OK，但是会有警告</span></span><br></pre></td></tr></table></figure><p>需要说明的是， 只是不允许创建这些数组， 而声明类型为 <code>ArrayList&lt;String&gt;[]</code> 的变量仍是合法的。<strong>不过不能用 <code>new Pair&lt;String&gt;[10]</code> 初始化这个变量。</strong></p><p>因为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Pair&lt;String&gt;[] pairs = <span class="keyword">new</span> <span class="title class_">Pair</span>&lt;String&gt;[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//擦除之后</span></span><br><span class="line">Pair[] pairs = <span class="keyword">new</span> <span class="title class_">Pair</span>[<span class="number">10</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组会记住他的元素类型。这是一个安全措施。对于这样的数组，将他转换为Object[]。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Pair[] pairs = <span class="keyword">new</span> <span class="title class_">Pair</span>[<span class="number">10</span>];</span><br><span class="line">Object[] objects = pairs;</span><br><span class="line">objects[<span class="number">0</span>] = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">编译器不会报错，但数组会记住他的元素类型，运行后会报ArrayStoreException.</span></span><br><span class="line"><span class="comment">pairs会记得他是Pair数组，但他并不记得自己是Pair&lt;String&gt;数组还是Pair&lt;Interger&gt;数组</span></span><br><span class="line"><span class="comment">如果我们在Pair&lt;String&gt;数组中放入Pair&lt;Interget&gt;是不会得到ArrayStoreException异常，但这是不安全的。因此参数化类型的数组是完全禁止的。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>讨巧的使用场景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericsDemo30</span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;  </span><br><span class="line">        Integer i[] = fun1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>) ;   <span class="comment">// 返回泛型数组  </span></span><br><span class="line">        fun2(i) ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T[] fun1(T...arg)&#123;  <span class="comment">// 接收可变参数  </span></span><br><span class="line">        <span class="keyword">return</span> arg ;            <span class="comment">// 返回泛型数组  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">fun2</span><span class="params">(T param[])</span>&#123;   <span class="comment">// 输出  </span></span><br><span class="line">        System.out.print(<span class="string">&quot;接收泛型数组：&quot;</span>) ;  </span><br><span class="line">        <span class="keyword">for</span>(T t:param)&#123;  </span><br><span class="line">            System.out.print(t + <span class="string">&quot;、&quot;</span>) ;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://pdai.tech/md/java/basic/java-basic-x-generic.html">https://pdai.tech/md/java/basic/java-basic-x-generic.html</a></p><p><a href="https://blog.csdn.net/weixin_40251892/article/details/109063161">https://blog.csdn.net/weixin_40251892/article/details/109063161</a></p><p><a href="https://www.cnblogs.com/qinjunlin/p/14721362.html">https://www.cnblogs.com/qinjunlin/p/14721362.html</a></p><p><a href="https://blog.csdn.net/qq_41701956/article/details/123473592">https://blog.csdn.net/qq_41701956/article/details/123473592</a></p><p>《Java核心技术卷一》</p>]]></content>
    
    
    <summary type="html">泛型概述、泛型的基本使用以及泛型的类型限定</summary>
    
    
    
    <category term="Java基础" scheme="http://example.com/category/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="泛型" scheme="http://example.com/tag/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>直线上最多的点</title>
    <link href="http://example.com/post/d98be659.html"/>
    <id>http://example.com/post/d98be659.html</id>
    <published>2022-08-09T03:00:52.000Z</published>
    <updated>2022-08-09T03:46:20.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个数组 <code>points</code> ，其中 <code>points[i] = [xi, yi]</code> 表示 <strong>X-Y</strong> 平面上的一个点。求最多有多少个点在同一条直线上【难度：<font color="red"><strong>困难</strong></font>】</p><p><strong>示例：</strong></p><p><img src="/%5Cimage%5Carticle%5C%E7%9B%B4%E7%BA%BF%E4%B8%8A%E6%9C%80%E5%A4%9A%E7%9A%84%E7%82%B9%5Cimage-20220809110414951.png" alt="image-20220809110414951"></p><blockquote><p>输入：points &#x3D; [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]<br>输出：4</p></blockquote><p>提示：</p><ul><li>1 &lt;&#x3D; <code>points.length</code> &lt;&#x3D; 300</li><li><code>points[i].length</code> &#x3D;&#x3D; 2</li><li>-10^4 &lt;&#x3D; <code>xi, yi</code> &lt;&#x3D; 10^4</li><li><code>points</code> 中的所有点 互不相同</li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/max-points-on-a-line">https://leetcode.cn/problems/max-points-on-a-line</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>枚举所有的点，假设直线经过该点时，该直线所能经过的最多的点数。</p><p>假设我们当前枚举到点<code> i</code>，如果直线同时经过另外两个不同的点<code> j</code> 和<code> k</code>，那么可以发现点 <code>i</code> 和点 <code>j</code> 所连直线的斜率恰等于点<code> i</code> 和点 <code>k</code> 所连直线的斜率。</p><p>于是我们可以统计其他所有点与点 <code>i</code> 所连直线的斜率，出现次数最多的斜率即为经过点数最多的直线的斜率，其经过的点数为该斜率现的次数加一（点 <code>i</code> 自身也要被统计）。</p><img src="\image\article\直线上最多的点\IMG_0411(20220809-111214).PNG" alt="IMG_0411(20220809-111214)" style="zoom: 33%;" /><p><font color="blue"><strong>关键是这个斜率如何表示？</strong></font></p><p>需要注意的是，<strong>浮点数类型可能因为精度不够而无法足够精确地表示每一个斜率</strong>，因此我们需要换一种方法来记录斜率。</p><p>斜率可以表示为 $$\frac{\bigtriangleup x}{\bigtriangleup y}$$,因此我们可以用分子和分母组成的二元组来代表斜率。我们可以分为以下几种情况：</p><ul><li><p>形如$$\frac{1}{2}和\frac{2}{4}$$这种情况</p><p>虽然这样的二元组不同，但其斜率是相同的。因此我们可以将<strong>分子</strong>和<strong>分母</strong>同时除以二者绝对值的<strong>最大公约数</strong>。</p><p>求最大公约数可以使用<font color="red"><strong>欧几里得算法</strong></font>【即辗转相除法】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b!=<span class="number">0</span>?gcd(b,a%b):a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>比如：a &#x3D; 63,b&#x3D;27;【要保证a是大于b的】</p><p>① b!&#x3D;0  –&gt; a &#x3D; 27,b&#x3D; 63%27 &#x3D; 9;</p><p>②b!&#x3D;0   –&gt; a &#x3D; 9,b &#x3D; 27%9 &#x3D; 0;</p><p>③b&#x3D;&#x3D;0  –&gt; 返回 a&#x3D;9; </p></blockquote></li><li><p>形如$$\frac{-1}{2}和\frac{1}{-2}$$这种情况</p><p>对于这种情况，可以规定。<strong>当分母为负数时，分子和分母取反。</strong>这样可以保证，分母都是正数，分子是同号的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(y&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    x = -x;y=-y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>x和y中有一个为0的情况</p><p>此时两数不存在数学意义上的最大公约数，因此我们直接特判这两种情况。当 <code>x==0</code> 时，我们令 y&#x3D;1；当 <code>y==0</code>时，我们令 x&#x3D;1 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(x==<span class="number">0</span>)&#123;</span><br><span class="line">    y=<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(y==<span class="number">0</span>)&#123;</span><br><span class="line">    x=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>经过上述操作之后，即可得到最终的二元组<code>(x,y)</code>。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxPoints</span><span class="params">(<span class="type">int</span>[][] points)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; points.length; i++) &#123;</span><br><span class="line">            Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            当我们枚举到点 i 时，我们只需要考虑编号大于 i 的点到点 i 的斜率，因为如果直线同时经过编号小于点 i 的点 j，那 么当我们枚举到 j 时就已经考虑过该直线了；</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; points.length; j++) &#123;</span><br><span class="line">                <span class="comment">// 计算 二元组 x,y</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> points[i][<span class="number">0</span>]-points[j][<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> points[i][<span class="number">1</span>]-points[j][<span class="number">1</span>];</span><br><span class="line">                <span class="comment">//分三种情况讨论，二元组</span></span><br><span class="line">                <span class="keyword">if</span>(x==<span class="number">0</span>)&#123;                  <span class="comment">//x==0</span></span><br><span class="line">                    y=<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(y==<span class="number">0</span>)&#123;             <span class="comment">//y==0</span></span><br><span class="line">                    x=<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;                     <span class="comment">//x!=0&amp;&amp;y!=0</span></span><br><span class="line">                    <span class="keyword">if</span>(y&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                        x = -x;y=-y;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">gcd</span> <span class="operator">=</span> gcd(Math.abs(x),Math.abs(y)); <span class="comment">//求最大公约数</span></span><br><span class="line">                    x = x/gcd;</span><br><span class="line">                    y = y/gcd;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> x*<span class="number">20001</span>+y;        <span class="comment">//计算哈希表的键</span></span><br><span class="line">                map.put(val,map.getOrDefault(val,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//计算这次循环中，直线最大的点数</span></span><br><span class="line">            Set&lt;Map.Entry&lt;Integer, Integer&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : entrySet) &#123;</span><br><span class="line">                num = Math.max(num,entry.getValue()+<span class="number">1</span>);<span class="comment">//这个entry.getValue()+1表示点 i 自身也要被统计</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            res = Math.max(res,num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b!=<span class="number">0</span>?gcd(b,a%b):a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此基础上，我们还可以做如下<font color="red"><strong>优化</strong></font></p><ul><li><p>在点的总数量小于等于 2 的情况下，我们总可以用一条直线将所有点串联，此时我们直接返回点的总数量即可；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(points.length&lt;=<span class="number">2</span>)<span class="keyword">return</span> points.length;</span><br></pre></td></tr></table></figure></li><li><p>当我们找到<strong>一条直线上的点数</strong>经过了<strong>图中超过半数的点</strong>时，我们即可以确定该直线即为经过最多点的直线；</p></li><li><p>当我们枚举到点 i（假设编号从 0 开始）时，我们至多只能找到<code> n - i</code>个点共线。假设此前找到的共线的点的数量的最大值为 k，如果有 <code>k＞= n - i</code>，那么此时我们即可停止枚举，因为不可能再找到更大的答案了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (res &gt;= n - i || res &gt; n / <span class="number">2</span>) <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></li></ul><h1 id="题解代码"><a href="#题解代码" class="headerlink" title="题解代码"></a>题解代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxPoints</span><span class="params">(<span class="type">int</span>[][] points)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(points.length&lt;=<span class="number">2</span>)<span class="keyword">return</span> points.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; points.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(res&gt;=points.length-i||res&gt;points.length/<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; points.length; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> points[i][<span class="number">0</span>]-points[j][<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> points[i][<span class="number">1</span>]-points[j][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(x==<span class="number">0</span>)&#123;</span><br><span class="line">                    y=<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(y==<span class="number">0</span>)&#123;</span><br><span class="line">                    x=<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(y&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                        x = -x;y=-y;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">gcd</span> <span class="operator">=</span> gcd(Math.abs(x),Math.abs(y));</span><br><span class="line">                    x = x/gcd;</span><br><span class="line">                    y = y/gcd;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> x*<span class="number">20001</span>+y;</span><br><span class="line">                System.out.println(val+<span class="string">&quot;  &quot;</span>+x+<span class="string">&quot;  &quot;</span>+y);</span><br><span class="line">                map.put(val,map.getOrDefault(val,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Set&lt;Map.Entry&lt;Integer, Integer&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : entrySet) &#123;</span><br><span class="line">                num = Math.max(num,entry.getValue()+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(res,num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b!=<span class="number">0</span>?gcd(b,a%b):a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">使用哈希表来计算直线上最多的点，其中使用了欧几里得算法求最大公约数</summary>
    
    
    
    <category term="算法" scheme="http://example.com/category/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="直线上最多的点&amp;求最大公约数" scheme="http://example.com/tag/%E7%9B%B4%E7%BA%BF%E4%B8%8A%E6%9C%80%E5%A4%9A%E7%9A%84%E7%82%B9-%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot发送邮件</title>
    <link href="http://example.com/post/f5937762.html"/>
    <id>http://example.com/post/f5937762.html</id>
    <published>2022-08-08T06:15:43.000Z</published>
    <updated>2022-08-08T14:21:56.086Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下，Spring Boot如何发送邮件。分为以下五种</p><ul><li>发送文本邮件</li><li>发送html邮件</li><li>发送附件邮件</li><li>发送图片邮件</li><li>发送模板邮件</li></ul><h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><p>引入maven坐标。<code>spring-boot-starter-mail</code>、<code>spring-boot-starter-thymeleaf</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--模板引擎--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--模板引擎--&gt;</span></span><br></pre></td></tr></table></figure><p>配置配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.qq.com</span> <span class="comment">#smtp.126.com</span></span><br><span class="line">    <span class="attr">username:</span> <span class="number">928301810</span><span class="string">@qq.com</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">····</span> <span class="comment">#POP3授权码</span></span><br><span class="line">    <span class="attr">default-encoding:</span> <span class="string">UTF-8</span></span><br></pre></td></tr></table></figure><p>这里的password，并不是你邮箱的登录密码，而是POP3授权码。</p><h2 id="配置邮箱（以qq邮箱为例）"><a href="#配置邮箱（以qq邮箱为例）" class="headerlink" title="配置邮箱（以qq邮箱为例）"></a>配置邮箱（以qq邮箱为例）</h2><p>点击邮箱的设置，然后点击账户</p><p><img src="/%5Cimage%5Carticle%5CSpringBoot%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%5Cimage-20220808212318162.png" alt="image-20220808212318162"></p><p>将获取的POP3授权码，设置到配置文件中。</p><h1 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h1><p>注入<code>JavaMailSender</code>对象，这是一个接口。然后获取配置文件中<code>username</code>配置信息。作为发送方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String from;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JavaMailSender sender;</span><br></pre></td></tr></table></figure><h2 id="发送文本文件"><a href="#发送文本文件" class="headerlink" title="发送文本文件"></a>发送文本文件</h2><p>Service层</p><p>这里先用<code>SimpleMailMessage</code>对象，封装消息，包括：发送方，接收方、邮件主题、邮件内容。</p><p>然后使用<code>JavaMailSender</code>对象，发送消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MailService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String from;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender sender;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendmail</span><span class="params">(String to, String subject, String content)</span> &#123;</span><br><span class="line">        <span class="type">SimpleMailMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>();</span><br><span class="line">        message.setTo(to);</span><br><span class="line">        message.setSubject(subject);</span><br><span class="line">        message.setText(content);</span><br><span class="line">        message.setFrom(from);</span><br><span class="line"></span><br><span class="line">        sender.send(message);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    service.sendmail(<span class="string">&quot;928301810@qq.com&quot;</span>,<span class="string">&quot;HELLO&quot;</span>,<span class="string">&quot;这是我用SrongBoot发送的第一封邮件&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>to：收件方</li><li>subject：邮件主题</li><li>content：邮件内容</li></ul><h2 id="发送html文件"><a href="#发送html文件" class="headerlink" title="发送html文件"></a>发送html文件</h2><p>Service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MailService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String from;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender sender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendhtml</span><span class="params">(String to, String subject, String content)</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">message</span> <span class="operator">=</span> sender.createMimeMessage();</span><br><span class="line">        <span class="type">MimeMessageHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(message,<span class="literal">true</span>);</span><br><span class="line">        helper.setFrom(from);</span><br><span class="line">        helper.setTo(to);</span><br><span class="line">        helper.setSubject(subject);</span><br><span class="line">        helper.setText(content,<span class="literal">true</span>);</span><br><span class="line">        sender.send(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是使用<code>JavaMailSender</code>的<code>createMimeMessage</code>方法，来获取<code>MimeMessage</code>对象。</p><p><code>MimeMessageHelper</code>的构造方法的两个参数，一个是<code>message</code>，另一个是<code>true</code>。</p><p>true表示发送的邮件是<code>multipart邮件</code>。简单来说，<code>multpart</code>是一种可以内嵌html，包含附件的邮件类型。</p><p>然后测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">TestSendHTML</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;&lt;html&gt;\n&quot;</span>+</span><br><span class="line">            <span class="string">&quot;&lt;body&gt;\n&quot;</span>+</span><br><span class="line">            <span class="string">&quot;&lt;h3&gt;这是我用SrongBoot发送的第二封邮件&lt;/h3&gt;\n&quot;</span>+</span><br><span class="line">            <span class="string">&quot;&lt;/body&gt;\n&quot;</span>+</span><br><span class="line">            <span class="string">&quot;&lt;/html&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    service.sendhtml(<span class="string">&quot;928301810@qq.com&quot;</span>,<span class="string">&quot;HELLO&quot;</span>,content);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送带附件的邮件"><a href="#发送带附件的邮件" class="headerlink" title="发送带附件的邮件"></a>发送带附件的邮件</h2><p>Service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MailService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String from;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender sender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendhtmlwithFile</span><span class="params">(String to, String subject, String content, String[] filepaths)</span> <span class="keyword">throws</span> MessagingException, FileNotFoundException &#123;</span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">message</span> <span class="operator">=</span> sender.createMimeMessage();</span><br><span class="line">        <span class="type">MimeMessageHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(message,<span class="literal">true</span>);</span><br><span class="line">        helper.setFrom(from);</span><br><span class="line">        helper.setTo(to);</span><br><span class="line">        helper.setSubject(subject);</span><br><span class="line">        helper.setText(content,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String filepath : filepaths) &#123;</span><br><span class="line">            <span class="type">FileSystemResource</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemResource</span>(<span class="keyword">new</span> <span class="title class_">File</span>(filepath));</span><br><span class="line">            <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> file.getFilename();</span><br><span class="line">            <span class="keyword">assert</span> filename != <span class="literal">null</span>;</span><br><span class="line">            helper.addAttachment(filename,file);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sender.send(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从参数<code>String[] filepaths</code>,可以看出，它是可以携带多个附件的。与发送html不同的是，多了如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String filepath : filepaths) &#123;</span><br><span class="line">    <span class="type">FileSystemResource</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemResource</span>(<span class="keyword">new</span> <span class="title class_">File</span>(filepath));</span><br><span class="line">    <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> file.getFilename();</span><br><span class="line">    <span class="keyword">assert</span> filename != <span class="literal">null</span>;</span><br><span class="line">    helper.addAttachment(filename,file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">TestSendwithFile</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException, FileNotFoundException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;&lt;html&gt;\n&quot;</span>+</span><br><span class="line">            <span class="string">&quot;&lt;body&gt;\n&quot;</span>+</span><br><span class="line">            <span class="string">&quot;&lt;h3&gt;这是我用SrongBoot发送的第三封带附件的邮件&lt;/h3&gt;\n&quot;</span>+</span><br><span class="line">            <span class="string">&quot;&lt;/body&gt;\n&quot;</span>+</span><br><span class="line">            <span class="string">&quot;&lt;/html&gt;&quot;</span>;</span><br><span class="line">    String[] filepaths = &#123;<span class="string">&quot;C:\\Users\\TJS\\Desktop\\力扣算法题链接.md&quot;</span>, <span class="string">&quot;C:\\Users\\TJS\\Desktop\\nginx-1.16.1.tar.gz&quot;</span>&#125;;</span><br><span class="line">    service.sendhtmlwithFile(<span class="string">&quot;928301810@qq.com&quot;</span>,<span class="string">&quot;HELLO&quot;</span>,content, filepaths);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送带有图片的邮件"><a href="#发送带有图片的邮件" class="headerlink" title="发送带有图片的邮件"></a>发送带有图片的邮件</h2><p>Service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MailService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String from;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender sender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendImage</span><span class="params">(String to, String subject, String content,String[][] images)</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">message</span> <span class="operator">=</span> sender.createMimeMessage();</span><br><span class="line">        <span class="type">MimeMessageHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(message,<span class="literal">true</span>);</span><br><span class="line">        helper.setFrom(from);</span><br><span class="line">        helper.setTo(to);</span><br><span class="line">        helper.setSubject(subject);</span><br><span class="line">        helper.setText(content,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String[] image : images) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> image[<span class="number">0</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">rscId</span> <span class="operator">=</span> image[<span class="number">1</span>];</span><br><span class="line">            <span class="type">FileSystemResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemResource</span>(<span class="keyword">new</span> <span class="title class_">File</span>(path));</span><br><span class="line">            helper.addInline(rscId,resource);</span><br><span class="line">        &#125;</span><br><span class="line">        sender.send(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以内嵌多张图片，传入images字符串数组。</p><p><code>images[i][0]</code>：图片的路径，可以是绝对路径，也可以是相对路径。</p><p><code>images[i][1]</code>：图片的id。因为它内嵌到邮件中，实际就是以html的方式内嵌到邮件中，因此需要使用<code>&lt;img&gt;</code>标签</p><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">TestSendImage</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">    String[][]  images = <span class="keyword">new</span> <span class="title class_">String</span>[][]&#123;</span><br><span class="line">            &#123;<span class="string">&quot;src/main/resources/static/2.JPG&quot;</span>,<span class="string">&quot;002&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;src/main/resources/static/3.JPG&quot;</span>,<span class="string">&quot;003&quot;</span>&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;&lt;html&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;body&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;h3&gt;这是我用SrongBoot发送的第四封带图片的邮件&lt;/h3&gt;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//-------------------------------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">for</span> (String[] image : images) &#123;</span><br><span class="line">        content.append(<span class="string">&quot;&lt;img src=&#x27;cid:&quot;</span>).append(image[<span class="number">1</span>]).append(<span class="string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//&lt;img src=&quot;cid:image[1]&quot;&gt;&lt;/img&gt;</span></span><br><span class="line">    <span class="comment">//----------------------------------------------------------------------------------</span></span><br><span class="line">    </span><br><span class="line">    content.append(<span class="string">&quot;&lt;/body&gt;\n&quot;</span>+ <span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    service.sendImage(<span class="string">&quot;928301810@qq.com&quot;</span>,<span class="string">&quot;HELLO&quot;</span>, content.toString(),images);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="发送模板邮件"><a href="#发送模板邮件" class="headerlink" title="发送模板邮件"></a>发送模板邮件</h1><p>生活中有很多场景特别适用模板邮件，比如：</p><ul><li>用户注册</li><li>忘记密码</li></ul><p>这些邮件都有一个特点：邮件的主体内容不会变化，变化的是用户的信息。在这个使用的模板引擎是：<code>thymeleaf</code>。</p><p>maven坐标已经再前面引入。service层使用发送html的就可以。</p><p>然后再resouce的templates文件夹中，创建html模板。</p><img src="\image\article\SpringBoot发送邮件\image-20220808215552489.png" alt="image-20220808215552489" style="zoom:80%;" /><p>html代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--声明thymeleaf--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    必须闭合 meta标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>邮件模板<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    您好，感谢您的注册，这是一封验证邮件，请点击下面的链接完成注册，感谢您的支持！</span><br><span class="line">    <span class="comment">&lt;!--/*@thymesVar id=&quot;id&quot; type=&quot;java&quot;*/--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;http://www.ityouknow.com/register/&#123;id&#125;(id=$&#123;id&#125;)&#125;&quot;</span>&gt;</span>激活账号<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以看到只有<code>id</code>是变化的。<code>&#123;id&#125;(id=$&#123;id&#125;)</code></p><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootMailApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MailService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TemplateEngine templateEngine;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestTemplete</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>();</span><br><span class="line">        context.setVariable(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;006&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">emailTemplate</span> <span class="operator">=</span> templateEngine.process(<span class="string">&quot;EmailTemplate&quot;</span>, context);</span><br><span class="line">        service.sendhtml(<span class="string">&quot;928301810@qq.com&quot;</span>,<span class="string">&quot;HELLO&quot;</span>,emailTemplate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要注入<code>TemplateEngine</code>来解析html模板。</p><p>创建Context对象，来封装变量。然后使用<code>TemplateEngine</code>来解析模板，因此需要传入<code>Context</code>对象。</p><h1 id="关于异常的处理"><a href="#关于异常的处理" class="headerlink" title="关于异常的处理"></a>关于异常的处理</h1><p>我们看到，在发送邮件过程中，会产生例如<code>MessagingException</code>异常。我们处理的方法是不断的向外抛。</p><p>但在项目中的操作通常是一个异步的操作，因此它不必要去影响主业务。因此这个异常需要我们自己来处理，而不是统统抛出去。这种情况下，我们需要使用Log，以日志的形式记录下来。</p><p>以发送HTML邮件的代码为例，原代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MailService</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String from;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender sender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendhtml</span><span class="params">(String to, String subject, String content)</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">message</span> <span class="operator">=</span> sender.createMimeMessage();</span><br><span class="line">        <span class="type">MimeMessageHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(message,<span class="literal">true</span>);</span><br><span class="line">        helper.setFrom(from);</span><br><span class="line">        helper.setTo(to);</span><br><span class="line">        helper.setSubject(subject);</span><br><span class="line">        helper.setText(content,<span class="literal">true</span>);</span><br><span class="line">        sender.send(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>try···catch</code>来捕获异常，并记录日志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MailService</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="built_in">this</span>.getClass());<span class="comment">//日志对象</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String from;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender sender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendhtml</span><span class="params">(String to, String subject, String content)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;发送静态邮件开始,接收方&#123;&#125;,&#123;&#125;&quot;</span>,to,subject);</span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">message</span> <span class="operator">=</span> sender.createMimeMessage();</span><br><span class="line">        <span class="type">MimeMessageHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            helper = <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(message,<span class="literal">true</span>);</span><br><span class="line">            helper.setFrom(from);</span><br><span class="line">            helper.setTo(to);</span><br><span class="line">            helper.setSubject(subject);</span><br><span class="line">            helper.setText(content,<span class="literal">true</span>);</span><br><span class="line">            sender.send(message);</span><br><span class="line">            logger.info(<span class="string">&quot;发送成功！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;发送失败,&#123;&#125;&quot;</span>,e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><ul><li>421 HL:ICC该IP同时并发连接数过大</li><li>451 Requested mail action not taken: too much fail …登录失败次数过多,被临时禁止登录。</li><li>553 authentication is required 认证失败【账号密码有可能不对，或者协议配置不对，等等】</li></ul><p>参考地址:<a href="http://help.163.com/09/1224/17/5RAJ4LMHO0753VB8.html%E3%80%90%E5%AE%83%E4%BC%9A%E5%AF%B9%E6%AF%8F%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%E8%BF%9B%E8%A1%8C%E8%A7%A3%E9%87%8A%E3%80%91">http://help.163.com/09/1224/17/5RAJ4LMHO0753VB8.html【它会对每一个错误进行解释】</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记录一下，Spring Boot如何发送邮件。分为以下五种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送文本邮件&lt;/li&gt;
&lt;li&gt;发送html邮件&lt;/li&gt;
&lt;li&gt;发送附件邮件&lt;/li&gt;
&lt;li&gt;发送图片邮件&lt;/li&gt;
&lt;li&gt;发送模板邮件&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;配置</summary>
      
    
    
    
    <category term="Spring" scheme="http://example.com/category/Spring/"/>
    
    
    <category term="发送邮件" scheme="http://example.com/tag/%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot配置文件属性提示消失解决方案</title>
    <link href="http://example.com/post/34ca02aa.html"/>
    <id>http://example.com/post/34ca02aa.html</id>
    <published>2022-08-06T07:42:58.000Z</published>
    <updated>2022-08-06T08:41:33.766Z</updated>
    
    <content type="html"><![CDATA[<img src="\image\article\SpringBoot配置文件属性提示消失解决方案\image-20220806154540571.png" alt="image-20220806154540571" style="zoom: 67%;" /><p>当在SpringBoot中书写配置文件时，没有自动弹提示。</p><p>原因是：SpringBoot在IDEA环境下，提供的功能失效</p><p>解决方案：</p><p>File—-&gt;Project Structure</p><img src="\image\article\SpringBoot配置文件属性提示消失解决方案\image-20220806154818040.png" alt="image-20220806154818040" style="zoom:50%;" /><p>或者：</p><p>右上角的</p><p><img src="/%5Cimage%5Carticle%5CSpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7%E6%8F%90%E7%A4%BA%E6%B6%88%E5%A4%B1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%5Cimage-20220806154842981.png" alt="image-20220806154842981"></p><p>点击进入如下界面</p><img src="\image\article\SpringBoot配置文件属性提示消失解决方案\image-20220806154958032.png" alt="image-20220806154958032" style="zoom:80%;" /><img src="\image\article\SpringBoot配置文件属性提示消失解决方案\image-20220806155058176.png" alt="image-20220806155058176" style="zoom:80%;" /><img src="\image/article\SpringBoot配置文件属性提示消失解决方案\image-20220806155138121.png" alt="image-20220806155138121" style="zoom:80%;" /><p>然后一直OK就好。</p><p>然后就可以解决了。</p><p><img src="/%5Cimage%5Carticle%5CSpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7%E6%8F%90%E7%A4%BA%E6%B6%88%E5%A4%B1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%5Cimage-20220806155409207.png" alt="image-20220806155409207"></p><p>图标都变了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;\image\article\SpringBoot配置文件属性提示消失解决方案\image-20220806154540571.png&quot; alt=&quot;image-20220806154540571&quot; style=&quot;zoom: 67%;&quot; /&gt;

&lt;p&gt;当在Spr</summary>
      
    
    
    
    <category term="Spring" scheme="http://example.com/category/Spring/"/>
    
    
    <category term="属性提示消失解决方案" scheme="http://example.com/tag/%E5%B1%9E%E6%80%A7%E6%8F%90%E7%A4%BA%E6%B6%88%E5%A4%B1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot读取Yaml配置</title>
    <link href="http://example.com/post/31902768.html"/>
    <id>http://example.com/post/31902768.html</id>
    <published>2022-08-06T07:12:14.000Z</published>
    <updated>2022-08-08T02:43:45.197Z</updated>
    
    <content type="html"><![CDATA[<p>读取配置文件内容三种方式：</p><ul><li>@Value</li><li>Environment</li><li>@ConfigurationProperties</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对象形式</span></span><br><span class="line"><span class="attr">user:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">23</span></span><br><span class="line">  <span class="attr">address:</span> <span class="string">xian</span></span><br><span class="line"><span class="comment">#数组格式</span></span><br><span class="line"><span class="attr">object:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">JAVA</span><span class="comment">#- 和 数据用空格分离</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">大数据</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line"><span class="comment">#字面量  </span></span><br><span class="line"><span class="attr">name:</span> <span class="string">yamiedie</span></span><br></pre></td></tr></table></figure><h1 id="Value方式"><a href="#Value方式" class="headerlink" title="@Value方式"></a>@Value方式</h1><p>需要配置SpEL表达式，<code>$&#123;一级属性名.二级属性名&#125;</code></p><p>​<img src="/%5Cimage%5Carticle%5CSpringBoot%E8%AF%BB%E5%8F%96Yaml%E9%85%8D%E7%BD%AE%5Cimage-20220806160931458.png" alt="image-20220806160931458"></p><ul><li><p>对象形式</p><ul><li>&#96;&#96;&#96;java<br>@Value(“${server.port}”)<br>private int port;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 数组形式</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    @Value(&quot;$&#123;object[1]&#125;&quot;)</span><br><span class="line">    private String object;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>普通形式</p><ul><li>&#96;&#96;&#96;yaml<br>@Value(“${name}”)<br>private String name;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># Environment方式</span><br><span class="line"></span><br><span class="line">首先要进行Bean注入</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@Autowired</span><br><span class="line">private Environment env;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>SpringBoot会通过数据装配的方式把数据全部装到这一个对象里。</p><p>使用<code>getProperty</code>，方法获取属性值。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(env.getProperty(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">System.out.println(env.getProperty(<span class="string">&quot;server.port&quot;</span>));</span><br><span class="line">System.out.println(env.getProperty(<span class="string">&quot;object[1]&quot;</span>));</span><br></pre></td></tr></table></figure><h1 id="ConfigurationProperties方式"><a href="#ConfigurationProperties方式" class="headerlink" title="@ConfigurationProperties方式"></a>@ConfigurationProperties方式</h1><p>使用@ConfigurationProperties注解绑定配置信息到<strong>封装类</strong>中</p><p>例如：</p><p>Yaml配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">driver:</span> <span class="string">com.driver.cj.mysql</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">me</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">you</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">he</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">she</span></span><br></pre></td></tr></table></figure><p>如果有警告，可以在pom文件中，加入如下依赖。【在classpath中没有发现SpringBoot 配置注解处理器】</p><p><img src="/%5Cimage%5Carticle%5CSpringBoot%E8%AF%BB%E5%8F%96Yaml%E9%85%8D%E7%BD%AE%5Cimage-20220806163710093.png" alt="image-20220806163710093"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>必须加<font color="gold"><strong>@Component</strong></font>注解，注入到Spring容器中。</li><li>prefix属性为一级属性名</li><li>类中必须有Getter和Setter方法，否则无法注入.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;datasource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mydatasource</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String[] user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDriver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> driver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDriver</span><span class="params">(String driver)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.driver = driver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUrl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUrl</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getUser() &#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUser</span><span class="params">(String[] user)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Mydatasource&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;driver=&#x27;&quot;</span> + driver + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, url=&#x27;&quot;</span> + url + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">SpringBoot读取Yaml配置的三种方式</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/category/Spring/"/>
    
    
    <category term="Yaml" scheme="http://example.com/tag/Yaml/"/>
    
  </entry>
  
  <entry>
    <title>Yaml基础语法</title>
    <link href="http://example.com/post/4b1a62b9.html"/>
    <id>http://example.com/post/4b1a62b9.html</id>
    <published>2022-08-06T07:11:45.000Z</published>
    <updated>2022-08-06T08:41:33.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="YAML基础语法"><a href="#YAML基础语法" class="headerlink" title="YAML基础语法"></a>YAML基础语法</h1><ul><li>大小写敏感</li><li>数据值前边必须有空格，作为分隔符</li><li>使用缩进表示层级关系</li><li>缩进时<strong>不允许使用Tab键</strong>，只允许使用空格【各个系统Tab对应的空格数目可能不同，导致层次混乱】。</li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li><li>#表示注释，从这个字符一直到行尾，都会被解析器忽略。</li></ul><p><strong>核心规则：数据前面要加空格与冒号隔开</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">name:</span> <span class="string">yamiedie</span></span><br></pre></td></tr></table></figure><h2 id="字面值表示方式"><a href="#字面值表示方式" class="headerlink" title="字面值表示方式"></a>字面值表示方式</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">boolean:</span> <span class="literal">TRUE</span><span class="comment">#TRUE ,true ,True , FALSE,false , False均可</span></span><br><span class="line"><span class="attr">float:</span> <span class="number">3.14</span><span class="comment">#6.8523015e+5#支持科学计数法</span></span><br><span class="line"><span class="attr">int:</span> <span class="number">123</span><span class="comment">#0b1010_0111_0100_1010_1110#支持二进制、八进制、十六进制</span></span><br><span class="line"><span class="attr">null:</span> <span class="string">~</span><span class="comment">#使用~表示null</span></span><br><span class="line"><span class="attr">string:</span> <span class="string">Helloworld</span><span class="comment">#字符串可以直接书写</span></span><br><span class="line"><span class="attr">string2:</span> <span class="string">&quot;Hello world&quot;</span><span class="comment">#可以使用双引号包裹特殊字符</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-02-17</span><span class="comment">#日期必须使用yyyy-MM-dd格式</span></span><br><span class="line"><span class="attr">datetime:</span> <span class="number">2022-02-17T15:02:31+08:00</span><span class="comment">#时间和日期之间使用T连接，最后使用+代表时区</span></span><br></pre></td></tr></table></figure><h1 id="YAML数据格式"><a href="#YAML数据格式" class="headerlink" title="YAML数据格式"></a>YAML数据格式</h1><ul><li><p>对象(map)：键值对集合</p><ul><li>&#96;&#96;&#96;yaml<br>#对象形式<br>user:<br>  name: zhangsan<br>  age: 23<br>  address: xian<br>#行内写法<br>user: {name: lisi,age: 22,address: beijing}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 数组：一组按次序排列的值</span><br><span class="line"></span><br><span class="line">  - ```yaml</span><br><span class="line">    object:</span><br><span class="line">      - JAVA#- 和 数据用空格分离</span><br><span class="line">      - 大数据</span><br><span class="line">      - 前端</span><br><span class="line">    #行内写法</span><br><span class="line">    object: [JAVA,大数据,前端]</span><br><span class="line">    #==========================================</span><br><span class="line">    #数组对象格式</span><br><span class="line">    users:</span><br><span class="line">      -</span><br><span class="line">        name: TJS</span><br><span class="line">        age: 18</span><br><span class="line">      -</span><br><span class="line">        name: ZLX</span><br><span class="line">        age: 23</span><br><span class="line">    #对象数组缩略格式</span><br><span class="line">    users2: [&#123;name:TJS,age23&#125;,&#123;name:ZLX,age:22&#125;]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>纯量：单个的、不可再分的值</p><ul><li>&#96;&#96;&#96;yaml<br>address1: “中国 \n 西安” #双引号  识别转义字符<br>address2: ‘中国 \n 西安’#单引号  忽略转义字符<br>#也可以不加 引号<br>city1: “中国 西安”#有空格就加双引号<br>city2: 中国西安<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 参数引用</span><br><span class="line"></span><br><span class="line">  使用`$&#123;变量名&#125;`，来进行变量引用</span><br><span class="line"></span><br><span class="line">  - ```yaml</span><br><span class="line">    BaseDir: D:/windows</span><br><span class="line">    SpecificDir:</span><br><span class="line">      one: $&#123;BaseDir&#125;/temp</span><br><span class="line">      two: $&#123;BaseDir&#125;/nmp</span><br><span class="line">      three : &quot;$&#123;BaseDir&#125;/temp&quot;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>其他</p><p>还可以混合使用哦</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">enterprise:</span></span><br><span class="line">   <span class="attr">name :</span> <span class="string">itcast</span></span><br><span class="line">   <span class="attr">age:</span> <span class="number">16</span></span><br><span class="line">   <span class="attr">subject:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">大数据</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">Yaml的基本的书写格式</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/category/Spring/"/>
    
    
    <category term="Yaml" scheme="http://example.com/tag/Yaml/"/>
    
  </entry>
  
  <entry>
    <title>nginx命令和配置文件</title>
    <link href="http://example.com/post/994b7c8f.html"/>
    <id>http://example.com/post/994b7c8f.html</id>
    <published>2022-08-04T08:13:27.000Z</published>
    <updated>2022-08-04T15:43:22.396Z</updated>
    
    <content type="html"><![CDATA[<p>声明：使用的<code>CentOS7</code>操作系统</p><h1 id="Nginx命令"><a href="#Nginx命令" class="headerlink" title="Nginx命令"></a>Nginx命令</h1><p>执行<code>nginx</code>命令，需要在命令需要使用<code>nginx/sbin</code>目录下的<code>naginx</code>文件。可以是<font color="red"><strong>相对路径</strong></font>或者<font color="red"><strong>绝对路径</strong></font></p><p>首先进入到<code>nginx/sbin</code>目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx/sbin</span><br></pre></td></tr></table></figure><p>配置<code>Nginx</code>环境变量，就可以在任意目录使用<code>nginx</code>命令了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>在PATH后追加<code>/usr/local/nginx/sbin:</code>，然后保存退出就好了。</p><p>然后<code>source /etc/profile</code>，然他立即生效。</p><p><font color="blue" size=5><strong>查看版本命令:</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br><span class="line"></span><br><span class="line">[root@bogon sbin]<span class="comment"># nginx -v</span></span><br><span class="line">nginx version: nginx/1.18.0</span><br></pre></td></tr></table></figure><p><font color="blue" size= 5><strong>检查配置文件的正确性</strong></font></p><p>在启动<code>Nginx</code>服务之前，可以先检查一下<code>conf/nginx.conf</code>配置文件是否有错误。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nginx -t   <span class="comment">#t 是 test</span></span><br><span class="line"></span><br><span class="line">[root@bogon sbin]<span class="comment"># nginx -t</span></span><br><span class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure><p><font color="blue" size= 5><strong>启动和停止</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">niginx<span class="comment">#启动nginx服务</span></span><br><span class="line">ngi  <span class="comment">#停止nginx服务</span></span><br><span class="line">ps -ef|grep nginx<span class="comment">#启动完成后查看Nginx进程</span></span><br></pre></td></tr></table></figure><p>查看<code>nginx</code>进程,可以的看到有两个进程，第三个是我们执行这条命令对应的进程，可以忽略。<strong>主要看前面两条</strong></p><p>启动完成会有两个进程，一个<code>work</code>进程和一个<code>master</code>进程，可以通过**修改配置文件[<code>conf/nginx.conf</code>]**，添加更多<code>work</code>进程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon sbin]<span class="comment"># ps -ef|grep nginx</span></span><br><span class="line">root      96952      1  0 16:25 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">nobody    96953  96952  0 16:25 ?        00:00:00 nginx: worker process</span><br><span class="line">root      97742  88062  0 16:25 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><p><code>nginx</code>默认的端口号是80端口。查看本机的<code>ip</code>地址，然后在windows浏览器的地址栏中，就可以访问<code>nginx</code>的<strong>静态资源</strong>。</p><p>【记得关<code>linux</code>的防火墙哦….，<code>systemctl stop firewalld</code>】</p><p>就可以看到以下界面</p><img src="\image\article\nginx简单命令\image-20220804163517886.png" alt="image-20220804163517886" style="zoom: 43%;" /><p>而且，启动之后，进入<code>nginx</code>根目录，可以看到很多<strong>临时目录</strong>，以<code>_temp</code>结尾的目录都是临时目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon nginx]<span class="comment"># ll</span></span><br><span class="line">total 4</span><br><span class="line">drwx------. 2 nobody root    6 Aug  4 16:20 client_body_temp</span><br><span class="line">drwxr-xr-x. 2 root   root 4096 Aug  3 21:47 conf</span><br><span class="line">drwx------. 2 nobody root    6 Aug  4 16:20 fastcgi_temp</span><br><span class="line">drwxr-xr-x. 2 root   root   40 Aug  3 21:47 html</span><br><span class="line">drwxr-xr-x. 2 root   root   58 Aug  4 16:20 logs</span><br><span class="line">drwx------. 2 nobody root    6 Aug  4 16:20 proxy_temp</span><br><span class="line">drwxr-xr-x. 2 root   root   19 Aug  3 21:47 sbin</span><br><span class="line">drwx------. 2 nobody root    6 Aug  4 16:20 scgi_temp</span><br><span class="line">drwx------. 2 nobody root    6 Aug  4 16:20 uwsgi_temp</span><br></pre></td></tr></table></figure><p>进入<code>logs</code>目录，就可以看到一些日志文件了</p><p><font color="blue" size= 5><strong>重新加载配置文件</strong></font></p><p>当修改<code>Nginx</code>配置文件后，需要重新加载才能生效，可以使用下面命令重写加载配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>在启动<code>Nginx</code>后，修改配置文件后，就可以直接使用上面的命令直接生效，不用重启<code>Nginx</code>。</p><h1 id="Nginx配置文件整体结构"><a href="#Nginx配置文件整体结构" class="headerlink" title="Nginx配置文件整体结构"></a>Nginx配置文件整体结构</h1><p><code>Nginx</code>配置文件(<code>conf/nginx.conf</code>)整体分为三部分:</p><ul><li><strong>全局块</strong>和<code>Nginx</code>运行相关的全局配置</li><li><strong>events块</strong>和网络连接相关的配置</li><li><strong>http块</strong>代理、缓存、日志记录、虚拟主机配置<ul><li>http全局块</li><li>Server块<ul><li>Server全局块</li><li>location块</li></ul></li></ul></li></ul><p>http全局块<br>Server块<br>Server全局块location块</p><blockquote><p>注意: http块中可以配置多个Server块，每个Server块中可以配置多个location块。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#==================全局配置块==================</span></span><br><span class="line">worker_processes  1;</span><br><span class="line"><span class="comment">#==================全局配置块==================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#==================events配置块==================</span></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#==================events配置块==================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#==============================http配置块==============================</span></span><br><span class="line">http &#123;</span><br><span class="line"><span class="comment">#==================http全局配置块==================</span></span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"><span class="comment">#==================http全局配置块==================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#==================Server配置块==================【可以有多个】</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        <span class="comment">#=============location配置块============【可以有多个】</span></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#=============location配置块============</span></span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">   <span class="comment">#=============location配置块============【可以有多个】</span></span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#=============location配置块============</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#==================Server配置块==================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#==============================http配置块==============================</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Nignx一些简单命令和配置文件整体结构的整体结构说明</summary>
    
    
    
    <category term="Nginx" scheme="http://example.com/category/Nginx/"/>
    
    
    <category term="Nginx" scheme="http://example.com/tag/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>初识Nginx</title>
    <link href="http://example.com/post/79465e19.html"/>
    <id>http://example.com/post/79465e19.html</id>
    <published>2022-08-03T13:58:16.000Z</published>
    <updated>2022-08-03T14:31:20.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx介绍"><a href="#Nginx介绍" class="headerlink" title="Nginx介绍"></a>Nginx介绍</h1><p><code>Nginx</code>是一款轻量级的web服务器&#x2F;反向代理服务器及电子邮件（<code>IMAP/POP3</code>）代理服务器。其特点是占有内存少，并发能力强，事实上<code>nginx</code>的并发能力在同类型的网页服务器中表现较好，中国大陆使用<code>nginx</code>的网站有:百度、京东、新浪、网易、腾讯、淘宝等。</p><p>官网：<a href="https://nginx.org/">https://nginx.org/</a></p><h1 id="Nginx的下载与安装"><a href="#Nginx的下载与安装" class="headerlink" title="Nginx的下载与安装"></a>Nginx的下载与安装</h1><p><a href="https://nginx.org/en/download.html">下载地址</a></p><p>建议下载稳定版本或者更早的版本，新版本不稳定。</p><p>安装过程：</p><ol><li><p>安装依赖包<code>yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</code>。</p></li><li><p>下载<code>Nginx</code>安装包</p><ol><li><p>第一种方法是，在windows下载好了，上传到<code>linux</code>。</p></li><li><p>第二种方法是，使用<code>wget</code></p><p>没有<code>wget</code>,需要先安装<code>wget</code>,命令：<code>yum install wget</code></p><p>去下载地址，复制下载链接</p><img src="\image\article\初识Nginx\image-20220803212521900.png" alt="image-20220803212521900" style="zoom:50%;" /><p>然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget <span class="string">&quot;你复制的下载链接&quot;</span></span><br><span class="line">比如:  wget https://nginx.org/download/nginx-1.18.0.tar.gz</span><br></pre></td></tr></table></figure><p>下载完成后就有一个<code>nginx-1.18.0.tar.gz</code>，压缩包</p></li></ol></li><li><p>解压压缩包<code>tar -zxvf nginx-1.18.0.tar.gz</code>,得到一个目录<code>nginx-1.18.0</code>。</p></li><li><p>进入到<code>nginx-1.18.0</code>这个目录里，命令：<code>cd nginx-1.18.0</code></p></li><li><p>安装到 <code>/usr/local/nginx</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/nginx</span><br><span class="line">./configure --prefix=/usr/local/nginx    <span class="comment">#安装前的检查工作以及配置环境变量</span></span><br><span class="line">make &amp;&amp; make install   <span class="comment">#编译并安装</span></span><br></pre></td></tr></table></figure><p>安装完成！</p></li></ol><h1 id="Nginx的目录介绍"><a href="#Nginx的目录介绍" class="headerlink" title="Nginx的目录介绍"></a>Nginx的目录介绍</h1><p>查看<code>Nginx</code>目录结果树形</p><p>先安装tree <code>yum install tree</code></p><p>再进入到nginx目录下，<code>cd /usr/local/nginx</code>，然后输入命令查看<code>tree</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">|-- conf<span class="comment">#存放配置文件</span></span><br><span class="line">|   |-- fastcgi.conf</span><br><span class="line">|   |-- fastcgi.conf.default</span><br><span class="line">|   |-- fastcgi_params</span><br><span class="line">|   |-- fastcgi_params.default</span><br><span class="line">|   |-- koi-utf</span><br><span class="line">|   |-- koi-win</span><br><span class="line">|   |-- mime.types</span><br><span class="line">|   |-- mime.types.default</span><br><span class="line">|   |-- nginx.conf<span class="comment">#nginx的配置文件 /conf/nginx.conf</span></span><br><span class="line">|   |-- nginx.conf.default</span><br><span class="line">|   |-- scgi_params</span><br><span class="line">|   |-- scgi_params.default</span><br><span class="line">|   |-- uwsgi_params</span><br><span class="line">|   |-- uwsgi_params.default</span><br><span class="line">|   `-- win-utf</span><br><span class="line">|-- html<span class="comment">#存放静态文件（html,css,js）</span></span><br><span class="line">|   |-- 50x.html<span class="comment">#默认提供的两个静态文件50x.html和index.html</span></span><br><span class="line">|   `-- index.html</span><br><span class="line">|-- logs<span class="comment">#存放日志文件由于刚安装没有启动过，所以是一个空的目录</span></span><br><span class="line">`-- sbin<span class="comment">#存放nginx的脚步文件</span></span><br><span class="line">    `-- nginx<span class="comment">#二进制文件，主要是用来  启动nginx和停止nginx</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Nginx介绍、下载与安装以及目录介绍</summary>
    
    
    
    <category term="Nginx" scheme="http://example.com/category/Nginx/"/>
    
    
    <category term="Nginx" scheme="http://example.com/tag/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>如何不用第三个变量交换值</title>
    <link href="http://example.com/post/c115a0c6.html"/>
    <id>http://example.com/post/c115a0c6.html</id>
    <published>2022-08-03T12:29:06.000Z</published>
    <updated>2022-08-03T13:04:56.535Z</updated>
    
    <content type="html"><![CDATA[<p>今天逛牛客，看见了一个面经，然后就进去看了看。突然看到一个问题：</p><p><font color="blue" size=5>int a&#x3D;5,b&#x3D;3 如何不用第三个变量，调换它俩的值</font></p><p>我第一反应，啊！啊？啊？啊o((⊙﹏⊙))o.。震惊我一百年，不用第三个变量，这怎么变？</p><p>我想到Go语言，有个语法糖，确实不需要第三个变量就可以交换值。难道Java也有？？？</p><p>然后，我就百度搜索了一个，不禁感叹，女少口阿！女少口阿！</p><p>然后特此记录以下，记录两个方法吧</p><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>,b=<span class="number">3</span>;</span><br><span class="line">b = (a+b)-(a=b);</span><br></pre></td></tr></table></figure><p><code>b = (a+b)-(a=b);</code>，啊这….</p><p>代码从左向右执行，先是<code>a+b</code>，然后是把<code>b</code>赋值给<code>a</code>，最后是<code>a+b-b</code>赋值给b。</p><p>然后就交换了值。巧妙的利用了，代码的执行顺序。真是细他妈给细开门——细到家了！！！</p><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>这种方法算是一种算法吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">a = b - a; <span class="comment">//b=3;a=5;--&gt;a = -2</span></span><br><span class="line">b = b - a; <span class="comment">//b=3;a=-2;--&gt;b = 5</span></span><br><span class="line">a = b + a; <span class="comment">//b=5;a=-2; ---&gt;a=3</span></span><br><span class="line"><span class="comment">//最后a = 3, b = 5 </span></span><br></pre></td></tr></table></figure><p>这也很妙啊，说不上来的妙。</p><p>这也算是一个编程小tips！我觉得还是方法一好！</p>]]></content>
    
    
    <summary type="html">妙妙妙~</summary>
    
    
    
    <category term="其他" scheme="http://example.com/category/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="妙" scheme="http://example.com/tag/%E5%A6%99/"/>
    
  </entry>
  
</feed>
