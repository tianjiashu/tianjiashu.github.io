<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucky Dog&#39;s blogs</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-28T13:42:03.687Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis五种常用数据类型</title>
    <link href="http://example.com/post/d2e965a3.html"/>
    <id>http://example.com/post/d2e965a3.html</id>
    <published>2022-07-28T09:51:07.000Z</published>
    <updated>2022-07-28T13:42:03.687Z</updated>
    
    <content type="html"><![CDATA[<p>redis存储的是：key,value格式的数据，其中<font color="blue"><strong>key都是字符串</strong></font>，<font color="blue"><strong>value有5种不同的数据结构</strong></font></p><h1 id="redis的数据结构"><a href="#redis的数据结构" class="headerlink" title="redis的数据结构"></a>redis的数据结构</h1><ul><li>value的数据结构：<ol><li>字符串类型 <strong>string</strong></li><li>哈希类型 hash ： <strong>map格式</strong>  </li><li>列表类型 list ： <strong>linkedlist格式</strong>。支持重复元素</li><li>集合类型 set  ： 不允许重复元素 <strong>HashSet格式</strong></li><li>有序集合类型 sortedset：<strong>不允许重复元素，且元素有顺序</strong></li></ol></li></ul><ul><li><table><thead><tr><th align="center"></th><th align="center">存储</th><th align="center">获取</th><th align="center">删除</th></tr></thead><tbody><tr><td align="center">String</td><td align="center"><strong>set <font color="blue">key</font> <font color="red">value</font></strong></td><td align="center"><strong>get <font color="blue">key</font></strong></td><td align="center"><strong>del <font color="blue">key</font></strong></td></tr><tr><td align="center">hash</td><td align="center"><strong>hset <font color="blue">key</font> field <font color="red">value</font></strong></td><td align="center"><strong>hget <font color="blue">key</font> field &#x2F; hgetall <font color="blue">key</font></strong></td><td align="center"><strong>hdel <font color="blue">key</font> field</strong></td></tr><tr><td align="center">list</td><td align="center"><strong>lpush\rpush <font color="blue">key</font> <font color="red">value</font></strong></td><td align="center"><strong>lrange <font color="blue">key</font> start end</strong></td><td align="center"><strong>lpop\rpop <font color="blue">key</font></strong></td></tr><tr><td align="center">set</td><td align="center"><strong>sadd <font color="blue">key</font> <font color="red">value</font></strong></td><td align="center"><strong>smember <font color="blue">key</font></strong></td><td align="center"><strong>srem <font color="blue">key</font> <font color="red">value</font></strong></td></tr><tr><td align="center">sortset</td><td align="center"><strong>zadd <font color="blue">key</font> score <font color="red">value</font></strong></td><td align="center"><strong>zrange <font color="blue">key</font> start end [wirthscores]</strong></td><td align="center"><strong>zrem <font color="blue">key</font> <font color="red">value</font></strong></td></tr></tbody></table></li></ul><p>说明【表格装不下了，楞跻也不美观，所以在这进行说明 ≡(▔﹏▔)≡】</p><ol><li><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><ol><li><p>存储： </p><ul><li><p>设置指定的值：<font color="red" size=4><strong>set key value</strong></font></p></li><li><p>设置指定key的值，并将key的过期时间设为seconds秒： <font color="red" size=4><strong>setex key seconds value</strong></font></p><p>例如：<code>setex city 10 Beijing</code></p></li><li><p>只有key不存在时设置key 的值：<font color="red" size=4><strong>setnx key value</strong></font></p></li></ul></li><li><p>获取：  <font color="red" size=4><strong>get key</strong></font></p></li><li><p>删除一个或多个： <font color="red" size=4><strong>del key [key …]</strong></font></p></li></ol><img src="/image/article/Redis五种数据类型.assets/image-20220728183640550.png" alt="image-20220728183640550" style="zoom:70%;" /></li><li><h2 id="哈希类型："><a href="#哈希类型：" class="headerlink" title="哈希类型："></a>哈希类型：</h2><p>类似Java的Map, <strong>field相当于Map的key,value相当于Map的value.</strong>  </p><ol><li>存储：<font color="red" size=4> <strong>hset</strong> key <strong>field</strong> value</font>  </li><li>获取： <ul><li><font color="red" size=4><strong>hget key field</strong></font>: 获取指定的field对应的值</li><li><font color="red" size=4><strong>hkeys key</strong></font>: 获取哈希表中所有字段</li><li><font color="red" size=4><strong>hvals key</strong></font>: 获取哈希表中所有值</li><li><font color="red" size=4><strong>hgetall key</strong></font>：获取所有的field和value</li></ul></li><li>删除一个或多个： <font color="red" size=4><strong>hdel key field [field…]</strong></font></li></ol><img src="/image/article/Redis五种数据类型.assets/image-20220728184110716.png" alt="image-20220728184110716" style="zoom:67%;" /></li><li><h2 id="列表类型："><a href="#列表类型：" class="headerlink" title="列表类型："></a>列表类型：</h2><ol><li>添加：<ul><li><p><font color="red" size=4><strong>lpush key value [value…]</strong></font> : 将元素加入列表<font color="blue" size=4><strong>左边</strong></font></p></li><li><p><font color="red" size=4><strong>rpush key value [value…]</strong></font> ：将元素加入列表<font color="blue" size=4><strong>右边</strong></font></p></li></ul></li><li>获取：<ul><li><font color="red" size=4><strong>lrange key start end</strong></font> ：范围获取 【start , end 】索引起始为0</li><li><font color="red" size=4><strong>llen key</strong></font> ：获取列表长度</li></ul></li><li>删除：<ul><li><font color="red" size=4><strong>lpop key</strong></font>： 删除列表<font color="blue" size=4><strong>最左边</strong></font>的元素，并将元素返回</li><li><font color="red" size=4><strong>rpop key</strong></font>： 删除列表<font color="blue" size=4><strong>最右边</strong></font>的元素，并将元素返回</li></ul></li></ol><img src="/image/article/Redis五种数据类型.assets/image-20220728185126513.png" alt="image-20220728185126513" style="zoom: 67%;" /></li><li><h2 id="集合类型："><a href="#集合类型：" class="headerlink" title="集合类型："></a>集合类型：</h2><ol><li><p>存储：<font color="red" size=4><strong>sadd key value [value …]</strong></font></p></li><li><p>获取：</p><ul><li><font color="red" size=4><strong>smembers key</strong></font>:获取set集合中所有元素</li><li><font color="red" size=4><strong>scard key</strong></font>:获取set集合成员数</li></ul></li><li><p>删除：<font color="red" size=4><strong>srem key value [value …]</strong></font>:删除set集合中的一个或者多个元素</p></li><li><p>其他：</p><ul><li><p><font color="red" size=4><strong>sinter key [key …]</strong></font>:返回给定所有集合的交集</p><p>例如：<code>sinter city1 city2 city3</code></p></li><li><p><font color="red" size=4><strong>sunion key [key…]</strong></font>:返回给定所有集合的并集</p></li><li><p><font color="red" size=4><strong>sdiff key [key…]</strong></font>:返回给定所有集合的差集</p></li></ul></li></ol><img src="/image/article/Redis五种数据类型.assets/image-20220728203425934.png" alt="image-20220728203425934" style="zoom:67%;" /></li><li><h2 id="有序集合类型sortedset："><a href="#有序集合类型sortedset：" class="headerlink" title="有序集合类型sortedset："></a>有序集合类型sortedset：</h2><p>不允许重复元素，且元素有顺序.<font color ="red" size=5><strong>每个元素都会关联一个double类型的分数</strong></font>。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><ol><li><p>存储：</p><ol><li><p><font color ="red" size=4><strong>zadd key score value [score value …]</strong></font>向有序集合中添加一个或多个成员，或更新已存在成员的分数</p></li><li><p><font color ="red" size=4><strong>zincrby key increment member</strong></font>有序集合中对指定成员的分数加上增量increment</p><p>例如：<code>zincrby names 20 zhangsan</code></p></li></ol></li><li><p>获取：<font color ="red" size=4><strong>zrange key start end [withscores]</strong></font></p><img src="/image/article/Redis五种数据类型.assets/image-20220728210651009.png" alt="image-20220728210651009" style="zoom:50%;" /></li><li><p>删除：<font color ="red" size=4><strong>zrem key value [value…]</strong></font></p></li></ol><img src="/image/article/Redis五种数据类型.assets/image-20220728203951597.png" alt="image-20220728203951597" style="zoom:67%;" /></li></ol><h1 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h1><ol><li><font color ="red" size=4><strong>keys parttern</strong> </font>: 查询所有符合给定模式（pattern）的key</li><li><font color ="red" size=4><strong>type key</strong> </font>： 获取键对应的value的类型</li><li><font color ="red" size=4><strong>del key [key…]</strong></font>：删除指定的key value</li><li><font color ="red" size=4><strong>exists key</strong></font>：检查给定的key是否存在</li><li><font color ="red" size=4><strong>ttl key [key…]</strong></font>：返回给定的key的剩余生存时间，以秒为单位。</li></ol><img src="/image/article/Redis五种数据类型.assets/image-20220728204310186.png" alt="image-20220728204310186" style="zoom:67%;" /><p><font size=5><strong>更多命令可以参考<a href="http://www.redis.net.cn/">redis中文网</a></strong></font></p>]]></content>
    
    
    <summary type="html">Redis入门</summary>
    
    
    
    <category term="Redis" scheme="http://example.com/category/Redis/"/>
    
    
    <category term="Redis" scheme="http://example.com/tag/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis简介</title>
    <link href="http://example.com/post/958f52e2.html"/>
    <id>http://example.com/post/958f52e2.html</id>
    <published>2022-07-28T09:35:45.000Z</published>
    <updated>2022-07-28T13:40:59.213Z</updated>
    
    <content type="html"><![CDATA[<p>redis是一款高性能的NOSQL系列的非关系型数据库</p><h1 id="一、什么是NOSQL"><a href="#一、什么是NOSQL" class="headerlink" title="一、什么是NOSQL"></a>一、什么是NOSQL</h1><p>​NoSQL(NoSQL &#x3D; <font color="red"><strong>Not Only SQL</strong></font>)，意即“<strong>不仅仅是SQL</strong>”，是一项全新的数据库理念，<font color="blue"><strong>泛指非关系型的数据库。</strong></font><br>​随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。</p><h1 id="二、NOSQL和关系型数据库比较"><a href="#二、NOSQL和关系型数据库比较" class="headerlink" title="二、NOSQL和关系型数据库比较"></a>二、NOSQL和关系型数据库比较</h1><p>​优点：<br>​1）成本：nosql数据库<strong>简单易部署</strong>，基本都是开源软件，不需要像使用oracle那样花费大量成本购买使用，相比关系型数据库价格便宜。<br>​2）查询速度：<font color="red"><strong>nosql数据库将数据存储于缓存之中</strong></font>，<font color="blue"><strong>关系型数据库将数据存储在硬盘中</strong></font>，自然查询速度远不及nosql数据库。<br>​3）存储数据的格式：<font color="red">nosql的存储格式是<strong>key,value形式、文档形式、图片形式等等</strong></font>，所以可以存储<strong>基础类型</strong>以及<strong>对象或者是集合等各种格式</strong>，而<font color="blue"><strong>数据库则只支持基础类型</strong></font>。<br>​4）扩展性：关系型数据库<strong>有类似join这样的多表查询机制的限制</strong>导致查询效率低。</p><p>​缺点：<br>​1）<strong>维护的工具和资料有限</strong>，因为nosql是属于新的技术，不能和关系型数据库10几年的技术同日而语。<br>​2）<strong>不提供对sql的支持</strong>，如果不支持sql这样的工业标准，将<strong>产生一定用户的学习和使用成本</strong>。【没有统一的标准】<br>​3）<strong>不提供</strong>关系型数据库对<strong>事务的处理</strong>。</p><h2 id="1、非关系型数据库的优势："><a href="#1、非关系型数据库的优势：" class="headerlink" title="1、非关系型数据库的优势："></a>1、非关系型数据库的优势：</h2><p>​1）性能NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。<br>​2）可扩展性同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。</p><h2 id="2、关系型数据库的优势："><a href="#2、关系型数据库的优势：" class="headerlink" title="2、关系型数据库的优势："></a>2、关系型数据库的优势：</h2><p>​1）复杂查询可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。<br>​2）事务支持使得对于<strong>安全性能</strong>很高的数据访问要求得以实现。对于这两类数据库，<strong>对方的优势就是自己的弱势，反之亦然</strong>。</p><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><p>​<strong>关系型数据库</strong>与<strong>NoSQL数据库</strong>并非对立而是<font color="blue"><strong>互补的关系</strong></font>，即通常情况下使用关系型数据库，在适合使用NoSQL的时候使用NoSQL数据库，<br>​让NoSQL数据库对关系型数据库的不足进行弥补。<br>​一般会将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据</p><h1 id="三、主流的NOSQL产品"><a href="#三、主流的NOSQL产品" class="headerlink" title="三、主流的NOSQL产品"></a>三、主流的NOSQL产品</h1><p>​•键值(Key-Value)存储数据库<br>​相关产品： Tokyo Cabinet&#x2F;Tyrant、<strong>Redis</strong>、Voldemort、Berkeley DB<br>​典型应用： 内容缓存，主要用于处理大量数据的高访问负载。<br>​数据模型： 一系列键值对<br>​优势： 快速查询<br>​劣势： 存储的数据缺少结构化<br>​•列存储数据库<br>​相关产品：Cassandra, HBase, Riak<br>​典型应用：分布式的文件系统<br>​数据模型：以列簇式存储，将同一列数据存在一起<br>​优势：查找速度快，可扩展性强，更容易进行分布式扩展<br>​劣势：功能相对局限<br>​•文档型数据库<br>​相关产品：CouchDB、MongoDB<br>​典型应用：Web应用（与Key-Value类似，Value是结构化的）<br>​数据模型： 一系列键值对<br>​优势：数据结构要求不严格<br>​劣势： 查询性能不高，而且缺乏统一的查询语法<br>​•图形(Graph)数据库<br>​相关数据库：Neo4J、InfoGrid、Infinite Graph<br>​典型应用：社交网络<br>​数据模型：图结构<br>​优势：利用图结构相关算法。<br>​劣势：需要对整个图做计算才能得出结果，不容易做分布式的集群方案。</p><h1 id="四、-什么是Redis"><a href="#四、-什么是Redis" class="headerlink" title="四、 什么是Redis"></a>四、 什么是Redis</h1><p>​Redis是用<strong>C语言</strong>开发的一个开源的高性能键值对（key-value）数据库，官方提供测试数据，50个并发执行100000个请求,读的速度是110000次&#x2F;s,写的速度是81000次&#x2F;s ，且Redis通过提供多种键值数据类型来适应不同场景下的存储需求，目前为止Redis支持的键值数据类型如下：</p><ol><li>字符串类型 <strong>string</strong></li><li>哈希类型 <strong>hash</strong></li><li>列表类型 <strong>list</strong></li><li>集合类型 <strong>set</strong></li><li>有序集合类型 <strong>sortedset</strong></li></ol><h2 id="redis的应用场景"><a href="#redis的应用场景" class="headerlink" title="redis的应用场景"></a>redis的应用场景</h2><p>•缓存（数据查询、短连接、新闻内容、商品内容等等）<br>•聊天室的在线好友列表<br>•任务队列。（秒杀、抢购、12306等等）<br>•应用排行榜<br>•网站访问统计<br>•数据过期处理（可以精确到毫秒<br>•分布式集群架构中的session分离</p><h1 id="五、下载安装"><a href="#五、下载安装" class="headerlink" title="五、下载安装"></a>五、下载安装</h1><ol><li><p>官网：<a href="https://redis.io/">https://redis.io</a></p></li><li><p><font color="blue"><strong>中文网</strong></font>：<a href="http://www.redis.net.cn/">http://www.redis.net.cn/</a></p></li><li><p><strong>解压直接可以使用</strong>：</p><ul><li>redis.windows.conf：配置文件</li><li>redis-cli.exe：redis的客户端</li><li>redis-server.exe：redis服务器端</li></ul></li></ol><p><img src="/image/article/Redis%E7%AE%80%E4%BB%8B/image-20220728174333931.png" alt="image-20220728174333931"></p><p><font color="red" size=5><strong>要先启动服务端，再启动命令端!!!</strong></font></p>]]></content>
    
    
    <summary type="html">Redis、NoSql相关介绍</summary>
    
    
    
    <category term="Redis" scheme="http://example.com/category/Redis/"/>
    
    
    <category term="Redis" scheme="http://example.com/tag/Redis/"/>
    
  </entry>
  
  <entry>
    <title>使用idea将自己的项目上传到github</title>
    <link href="http://example.com/post/a362d786.html"/>
    <id>http://example.com/post/a362d786.html</id>
    <published>2022-07-28T01:36:45.000Z</published>
    <updated>2022-07-28T02:33:30.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置IDEA并登录github"><a href="#配置IDEA并登录github" class="headerlink" title="配置IDEA并登录github"></a>配置IDEA并登录github</h1><p>File—-&gt;Settings —&gt;Version Conroll —&gt;Git</p><img src="/image/article/使用idea将自己的项目上传到github.assets/image-20220728094240526.png" alt="image-20220728094240526" style="zoom:50%;" /><p>然后登录Github【在idea】</p><img src="/image/article/使用idea将自己的项目上传到github.assets/image-20220728094428087.png" alt="image-20220728094428087" style="zoom:50%;" /><p>由于使用账号密码登录Github经常失败，所以使用token登录，成功率比较高，因为Github的服务器在国外。经常连接失败。</p><h2 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h2><p>首先去Github官网，登录你的账号。进入Settings,进入之后在右侧最小面找<strong>Developer settings</strong>。</p><p><img src="/image/article/使用idea将自己的项目上传到github.assets/image-20220728094641967.png" alt="image-20220728094641967" style="zoom:50%;float:left" />———————————————————-&gt;<img src="/image/article/使用idea将自己的项目上传到github.assets/image-20220728094804041.png" alt="image-20220728094804041" style="zoom:50%;" /></p><p>Personal acess tokens —&gt; Generate new token</p><img src="/image/article/使用idea将自己的项目上传到github.assets/image-20220728095010000.png" alt="image-20220728095010000" style="zoom:67%;" /><p><img src="/image/article/%E4%BD%BF%E7%94%A8idea%E5%B0%86%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0github.assets/image-20220728095228018.png" alt="image-20220728095228018"></p><p>最后点击最下面的<strong>Generate token</strong>,然后就会出现下面的画面，然后复制这个token到Github就行。</p><img src="/image/article/使用idea将自己的项目上传到github.assets/image-20220728095433663.png" alt="image-20220728095433663" style="zoom:50%;" /><img src="/image/article/使用idea将自己的项目上传到github.assets/image-20220728095530710.png" alt="image-20220728095530710" style="zoom:67%;" /><p>出现以下画面就是登录成功了。</p><img src="/image/article/使用idea将自己的项目上传到github.assets/image-20220728095617376.png" alt="image-20220728095617376" style="zoom:67%;" /><h1 id="创建-gitignore文件"><a href="#创建-gitignore文件" class="headerlink" title="创建.gitignore文件"></a>创建.gitignore文件</h1><p><strong>目的：</strong>与项目的实际功能无关，不参与服务器上部署运行。把它们忽略掉能够屏蔽 IDE 工具之间的差异</p><p>在当前项目里，创建一个<font color="red"><strong>gitignore.txt</strong></font>文件，编辑这个文件。输入以下</p><p>这是适用于Java的，如果你是GoLand，Pycharm，可以自定义该文件。**<a href="https://blog.csdn.net/zhang90283/article/details/124245456">简单教程</a>**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">*.log</span><br><span class="line">\# BlueJ files</span><br><span class="line">*.ctxt</span><br><span class="line">\# Mobile Tools for Java (J2ME)</span><br><span class="line">.mtj.tmp/</span><br><span class="line">\# Package Files #</span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.nar</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line">\# virtual machine crash logs, see </span><br><span class="line"></span><br><span class="line">http://www.java.com/en/download/help/error_hotspot.xml</span><br><span class="line">hs_err_pid*</span><br><span class="line">.classpath</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">target</span><br><span class="line">.idea</span><br><span class="line">*.iml</span><br></pre></td></tr></table></figure><p>保存退出。在项目文件夹里，右键—–&gt;Git Bash here。 进入git的<strong>命令行界面</strong>。输入以下指令。然后就会发现gitignore.txt文件就会转为.gitignore文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv gitignore.txt .gitignore</span><br></pre></td></tr></table></figure><p>【注意：一定要在仓库提交之前创建忽略性文件，否则文件会失效！】</p><p><img src="/image/article/%E4%BD%BF%E7%94%A8idea%E5%B0%86%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0github.assets/image-20220728100858186.png" alt="image-20220728100858186"></p><h1 id="初始化仓库并提交"><a href="#初始化仓库并提交" class="headerlink" title="初始化仓库并提交"></a>初始化仓库并提交</h1><p>VCS —&gt; Create Git Repository。然后选择你的项目创建。</p><p><img src="/image/article/%E4%BD%BF%E7%94%A8idea%E5%B0%86%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0github.assets/image-20220728101040685.png" alt="image-20220728101040685"></p><p>这个时候你的文件名就会变成<font color="red"><strong>红色</strong></font>,这是为什么？可以看我另一篇博客 <a href="https://luckydog-tjs.vercel.app/post/11.html"><strong>点这</strong></a></p><h2 id="将整个项目加入暂存区"><a href="#将整个项目加入暂存区" class="headerlink" title="将整个项目加入暂存区"></a>将整个项目加入暂存区</h2><img src="/image/article/使用idea将自己的项目上传到github.assets/image-20220728101414067.png" alt="image-20220728101414067" style="zoom:70%;" /><h2 id="将整个项目提交到本地仓库"><a href="#将整个项目提交到本地仓库" class="headerlink" title="将整个项目提交到本地仓库"></a>将整个项目提交到本地仓库</h2><img src="/image/article/使用idea将自己的项目上传到github.assets/image-20220728101547721.png" alt="image-20220728101547721" style="zoom:50%;" /><img src="/image/article/使用idea将自己的项目上传到github.assets/image-20220728101725380.png" alt="image-20220728101725380" style="zoom:50%;" /><p>中途可能会出现这样的提示框，它告诉你：<strong>代码存在警告，你是否再检查一下？</strong></p><p><img src="/image/article/%E4%BD%BF%E7%94%A8idea%E5%B0%86%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0github.assets/image-20220728101751116.png" alt="image-20220728101751116"></p><p>一般不用管它，直接Commit就行了。</p><h1 id="推送到Github"><a href="#推送到Github" class="headerlink" title="推送到Github"></a>推送到Github</h1><img src="/image/article/使用idea将自己的项目上传到github.assets/image-20220728102004139.png" alt="image-20220728102004139" style="zoom:67%;" /><p>Git【这个位置之前的VCS,因为使用Git创建了仓库所以变成了Git】 —&gt; Github  —-&gt; Share Project on Github。</p><p><img src="/image/article/%E4%BD%BF%E7%94%A8idea%E5%B0%86%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0github.assets/image-20220728102252205.png" alt="image-20220728102252205"></p><p>点击Share就可以上传到Github啦！注意看idea的右下角，可能会失败，因为github服务器在国外。如果上传失败，不要灰心，多试几次就好了。嘿( •̀ ω •́ )✧，上传成功后，登录自己Github账号，就可以看见啦。</p><p><font size =5><strong>如果你遇见了其他问题，欢迎评论区留言！</strong></font></p>]]></content>
    
    
    <summary type="html">使用idea将自己的项目上传到github</summary>
    
    
    
    <category term="Git" scheme="http://example.com/category/Git/"/>
    
    
    <category term="Git" scheme="http://example.com/tag/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git本地仓库操作</title>
    <link href="http://example.com/post/11.html"/>
    <id>http://example.com/post/11.html</id>
    <published>2022-07-27T07:28:17.000Z</published>
    <updated>2022-07-27T07:29:57.979Z</updated>
    
    <content type="html"><![CDATA[<p>在我们进行Git配置之后，建立了仓库。IDEA左侧目录文件颜色分为三种：<strong>黑色</strong>，<font color="green"><strong>绿色</strong></font>，<font color="red"><strong>红色</strong></font>。<strong>不同颜色代表不同状态</strong></p><ul><li>黑色：代表该文件已经提交给你Git仓库。</li><li>绿色：代表该文件已经添加到了暂存区</li><li>红色：代表该文件还没有添加到暂存区</li></ul><h1 id="加入暂存区"><a href="#加入暂存区" class="headerlink" title="加入暂存区"></a>加入暂存区</h1><p>每当创建新文件时，IDEA会提示你是否添加到暂存区。</p><img src="/image/article/Git本地仓库操作.assets/image-20220727145714913-16589050410821.png" alt="image-20220727145714913" style="zoom:67%;" /><h2 id="手动加入暂存区"><a href="#手动加入暂存区" class="headerlink" title="手动加入暂存区"></a>手动加入暂存区</h2><p>右键—&gt;Git—&gt;add【可能IDEA版本不同有一点差异，但差异不大】</p><img src="/image/article/Git本地仓库操作.assets/image-20220727145941004.png" alt="image-20220727145941004" style="zoom: 50%;" /><p>然后文件颜色会从<font color="red"><strong>红色</strong></font>变为<font color="green"><strong>绿色</strong></font>。</p><h1 id="提交到本地仓库"><a href="#提交到本地仓库" class="headerlink" title="提交到本地仓库"></a>提交到本地仓库</h1><h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><p>右键—&gt;Git—&gt;Commit File…</p><img src="/image/article/Git本地仓库操作.assets/image-20220727150243370.png" alt="image-20220727150243370" style="zoom: 50%;" /><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><img src="/image/article/Git本地仓库操作.assets/image-20220727151113467.png" alt="image-20220727151113467" style="zoom:50%;" /><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><img src="/image/article/Git本地仓库操作.assets/image-20220727150634866.png" alt="image-20220727150634866" style="zoom: 50%;" /><p>提交之后颜色从<font color="green"><strong>绿色</strong></font>变为<strong>黑色</strong></p><p>如果你一旦进行了修改，文件就从<strong>黑色</strong>变为<font color="blue"><strong>蓝色</strong></font></p><h1 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h1><p>IDEA左下角<img src="/image/article/Git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E6%93%8D%E4%BD%9C.assets/image-20220727151426192.png" alt="image-20220727151426192"></p><p>就会看见如下界面：</p><p><img src="/image/article/Git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E6%93%8D%E4%BD%9C.assets/image-20220727151524295.png" alt="image-20220727151524295"></p>]]></content>
    
    
    <summary type="html">Git集成IDEA</summary>
    
    
    
    <category term="Git" scheme="http://example.com/category/Git/"/>
    
    
    <category term="Git" scheme="http://example.com/tag/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git配置IDEA</title>
    <link href="http://example.com/post/a99f1401.html"/>
    <id>http://example.com/post/a99f1401.html</id>
    <published>2022-07-27T07:18:17.000Z</published>
    <updated>2022-07-27T07:30:08.239Z</updated>
    
    <content type="html"><![CDATA[<p>在IDEA中配置Git，首先你的电脑里得下载Git,<a href="https://git-scm.com/"><strong>下载链接</strong></a></p><h1 id="IDEA配置Git"><a href="#IDEA配置Git" class="headerlink" title="IDEA配置Git"></a>IDEA配置Git</h1><p>IDEA—&gt;setting—&gt;Git</p><p>配置你的Git.exe的目录，点击Test可以测试是否配置成功。然后就可以在IDEA中使用Git了。</p><p><img src="/image/article/Git%E9%85%8D%E7%BD%AEIDEA.assets/image-20220727142723917.png" alt="image-20220727142723917"></p><h1 id="Git获取仓库"><a href="#Git获取仓库" class="headerlink" title="Git获取仓库"></a>Git获取仓库</h1><p>使用Git获取仓库有两种方式:</p><ul><li>从本地初始化仓库</li><li>从远程仓库克隆</li></ul><h2 id="从本地初始化仓库"><a href="#从本地初始化仓库" class="headerlink" title="从本地初始化仓库"></a>从本地初始化仓库</h2><p>在IDEA上侧，选择VCS(版本控制)—-&gt;Create Git Reposity…</p><img src="/image/article/Git配置IDEA.assets/image-20220727143403083.png" alt="image-20220727143403083" style="zoom: 67%;" /><p>然后选择你要初始化仓库的文件夹。</p><img src="/image/article/Git配置IDEA.assets/image-20220727143444356.png" alt="image-20220727143444356" style="zoom:50%;" /><p>初始化成功后，在原文件夹就会看见 一个**.git<strong>的</strong>隐藏文件夹**。里面存储的是仓库的信息。</p><p>上侧边栏的 VCS就会变成Git</p><p><img src="/image/article/Git%E9%85%8D%E7%BD%AEIDEA.assets/image-20220727143721917.png" alt="image-20220727143721917"></p><h2 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h2><h3 id="在创建项目界面"><a href="#在创建项目界面" class="headerlink" title="在创建项目界面"></a>在创建项目界面</h3><p>选择Get from VCS </p><img src="/image/article/Git配置IDEA.assets/image-20220727143832197.png" alt="image-20220727143832197" style="zoom:67%;" /><h3 id="在主界面"><a href="#在主界面" class="headerlink" title="在主界面"></a>在主界面</h3><p>VCS—&gt;Get from VCS</p><p><img src="/image/article/Git%E9%85%8D%E7%BD%AEIDEA.assets/image-20220727144212322.png" alt="image-20220727144212322"></p><p>然后再URL里输入你的GitHub或Gitee的仓库的URL地址。</p><img src="/image/article/Git配置IDEA.assets/image-20220727143900000.png" alt="image-20220727143900000" style="zoom:70%;" /><h1 id="gitgnore文件说明"><a href="#gitgnore文件说明" class="headerlink" title=".gitgnore文件说明"></a>.gitgnore文件说明</h1><p>它是用来说明，仓库中哪些文件不需要进行管理。在该文件夹中进行配置，可以<strong>指定哪些文件&#x2F;文件夹</strong>，在<strong>提交&#x2F;推送</strong>的时候忽略它。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># Compiled class file</span><br><span class="line">*.class                    //忽略后缀为 class是文件</span><br><span class="line">\# Log file</span><br><span class="line">*.log</span><br><span class="line">\# BlueJ files</span><br><span class="line">*.ctxt</span><br><span class="line">\# Mobile Tools for Java (J2ME)</span><br><span class="line">.mtj.tmp/</span><br><span class="line">\# Package Files #</span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.nar</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line">\# virtual machine crash logs, see </span><br><span class="line"></span><br><span class="line">http://www.java.com/en/download/help/error_hotspot.xml</span><br><span class="line">hs_err_pid*</span><br><span class="line">.classpath</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">target    //target文件夹忽略</span><br><span class="line">.idea//.idea文件夹忽略</span><br><span class="line">*.iml</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Git集成IDEA</summary>
    
    
    
    <category term="Git" scheme="http://example.com/category/Git/"/>
    
    
    <category term="Git" scheme="http://example.com/tag/Git/"/>
    
  </entry>
  
  <entry>
    <title>寻找旋转排序数组的最小值</title>
    <link href="http://example.com/post/884d8d37.html"/>
    <id>http://example.com/post/884d8d37.html</id>
    <published>2022-07-26T08:15:26.000Z</published>
    <updated>2022-07-28T01:37:30.994Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums &#x3D; [0,1,2,4,5,6,7] 在变化后可能得到：</p><ul><li>若旋转 4 次，则可以得到 [4,5,6,7,0,1,2]</li><li>若旋转 7 次，则可以得到 [0,1,2,4,5,6,7]</li></ul><p>注意，数组 [a[0], a[1], a[2], …, a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], …, a[n-2]] 。</p><p>给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。</p><p>你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。</p><p><strong>示例 1：</strong></p><blockquote><p>输入：nums &#x3D; [3,4,5,1,2]<br>输出：1<br>解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p>输入：nums &#x3D; [4,5,6,7,0,1,2]<br>输出：0<br>解释：原数组为 [0,1,2,4,5,6,7] ，旋转 4 次得到输入数组。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p>输入：nums &#x3D; [11,13,15,17]<br>输出：11<br>解释：原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。</p></blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array">https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这道题的时间复杂度要求是<strong>O(logn)</strong>, 所以顺序遍历是无法通过的。解法应该是使用二分查找。</p><p>but?二分查找不是适用于顺序数组吗？这说明你还没有理解二分查找的根本思想。你还在第一层哈(～￣▽￣)～</p><p>注意：这道题是 顺序数组旋转之后的。关键词：<font color="red" size=4><strong>顺序，旋转。</strong></font></p><p>首先得定义两个指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>,right = nums.length-<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>然后进入循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (left&lt;right)<span class="comment">//注意不是while (left&lt;=right)哦，这是二分查找另一种写法</span></span><br></pre></td></tr></table></figure><p><a href="https://www.programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html#%E6%80%9D%E8%B7%AF"><strong>二分查找另一种写法</strong></a>【&lt;—-点这可以学习二分查找另一种写法q(≧▽≦q)】</p><p>关于【left,right】区间有两种情况：</p><ol><li><p>区间是<strong>有序的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(nums[right]&gt;=nums[left])<span class="keyword">return</span> nums[left];</span><br></pre></td></tr></table></figure><p><img src="/%5Cimage%5Carticle%5C157-%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC.assets%5C1.PNG" alt="1"></p></li><li><p>区间是<strong>无序的</strong></p><p>旋转之后的数组，<strong>以mid为中点</strong>。肯定有<font color="red" size=5><strong>一侧是有序的，一侧是无序的。</strong></font></p><p><img src="/%5Cimage%5Carticle%5C157-%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC.assets%5C2.PNG" alt="2"></p><p>然后<font color="red" size=5><strong>最小值一直在无序的一侧</strong></font>,不信你就找几个例子试试。</p><p>所以我们要在无序的一侧找最小值。</p><p><strong>先判断左侧是不是有序的，如果有序则下一步的区间应该是右侧区间，否则就是左侧</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(nums[mid]&gt;=nums[left])left = mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br></pre></td></tr></table></figure><p><font color="blue"><strong>为啥 right &#x3D; mid而不是 right &#x3D; mid -1?</strong></font></p><p>首先是因为 while (left&lt;right)</p><p>还有是因为有一种情况是：nums[mid] 实际是最小值。</p><p>!<img src="/%5Cimage%5Carticle%5C157-%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC.assets%5C3.PNG"></p></li></ol><p>所以需要 right &#x3D; mid来包住它，这也是为什么要用while (left&lt;right)。</p><blockquote><p>你可以这么认为 </p><ul><li>while (left&lt;right)  和  right &#x3D; mid是一套</li><li>while (left&lt;&#x3D;right)  和  right &#x3D; mid-1是一套</li></ul></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>循环过程中会遇见三种情况：</p><ul><li>在【left,right】内是顺序的，比如[2,5,6,7,8,9]</li><li>在【left,right】内是无序的，但nums[mid]不是最小值，最小值在【left,mid】或【mid,right】中，比如[4,5,6,1,2]</li><li>在【left,right】内是无序的，nums[mid]是最小值，比如[4,5,1,2,3]</li></ul><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMin</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[nums.length-<span class="number">1</span>]&gt;nums[<span class="number">0</span>])<span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>,right = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left&lt;right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[right]&gt;=nums[left])<span class="keyword">return</span> nums[left];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&gt;=nums[left])left = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font size=5><strong>有什么问题欢迎评论区留言！！！(´▽&#96;ʃ♡ƪ)</strong></font></p>]]></content>
    
    
    <summary type="html">寻找旋转排序数组的最小值题解</summary>
    
    
    
    <category term="算法" scheme="http://example.com/category/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tag/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Hexo主题LiveForCode介绍</title>
    <link href="http://example.com/post/1112885395.html"/>
    <id>http://example.com/post/1112885395.html</id>
    <published>2020-07-31T16:00:00.000Z</published>
    <updated>2022-07-25T07:07:08.226Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://hexo.io/zh-cn/">Hexo</a> 是高效的静态站点生成框架，他基于 <a href="https://nodejs.org/en/">Node.js</a>。通过 Hexo 你可以轻松地使用 <a href="https://daringfireball.net/projects/markdown/">Markdown</a> 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 <a href="https://hexo.io/zh-cn/docs/tag-plugins.html">标签插件</a> 来快速的插入特定形式的内容。在这篇文章中，假定你已经成功安装了 Hexo，并使用 Hexo 提供的命令创建了一个站点。  </p><blockquote><p>你可以访问 <a href="https://hexo.io/zh-cn/docs/">Hexo 的文档</a> 了解如何安装 Hexo  </p></blockquote><p>在 Hexo 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。其中，一份位于 Hexo 根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>为了描述方便，在以下说明中，将前者称为 <strong>站点配置文件</strong> ， 后者称为 <strong>主题配置文件</strong> 。  </p><h2 id="主题预览"><a href="#主题预览" class="headerlink" title="主题预览"></a>主题预览</h2><p><a href="https://www.notes.worstone.cn/">Hexo - Live For Code</a>  </p><h2 id="安装Live-For-Code"><a href="#安装Live-For-Code" class="headerlink" title="安装Live For Code"></a>安装Live For Code</h2><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至 Hexo 根目录的 themes 目录下，然后修改下配置文件即可。具体到 LiveForCode 来说，安装步骤如下。  </p><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p>如果你熟悉 Git，建议你使用 <code>克隆最新版本</code> 的方式，之后的更新可以通过 <code>git pull</code> 来快速更新，而不用再次下载压缩包替换。  </p><ol><li><p>克隆最新版本<br>在终端窗口下，定位到 Hexo 站点目录下。使用 Git Checkout 代码：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd your-hexo-site</span><br><span class="line">git clone https://github.com/first19326/hexo-liveforcode</span><br></pre></td></tr></table></figure><p>将克隆下来的文件夹中的 <code>LiveForCode</code> 文件夹移动至站点的 <code>themes</code> 目录下，并将 <code>source</code> 文件夹中的 <code>about</code>、<code>category</code>、<code>comment</code>、<code>donate</code>、<code>friend</code> 以及 <code>tag</code> 文件夹移动至 Hexo 站点目录下的 <code>source</code> 文件夹中。这些文件夹分别对应着 <strong>关于</strong> 、 <strong>标签</strong> 、 <strong>留言板</strong> 、 <strong>赞赏</strong> 、 <strong>友情链接</strong> 以及 <strong>分类</strong> 页面，其中的 <code>index.md</code> 中的内容为各个页面显示的内容，大家可以根据自己的情况进行修改。  </p></li><li><p>下载稳定版本<br>前往 LiveForCode 版本发布页面。<br>选择你所需要的版本，下载 Download 区域下的 Source Code (zip) 到本地。<br>解压所下载的压缩包，并将解压后的文件夹中的 <code>LiveForCode</code> 文件夹移动至站点的 <code>themes</code> 目录下，并将 <code>source</code> 文件夹中的 <code>about</code>、<code>category</code>、<code>comment</code>、<code>donate</code>、<code>friend</code> 以及 <code>tag</code> 文件夹移动至 Hexo 站点目录下的 <code>source</code> 文件夹中。这些文件夹分别对应着 <strong>关于</strong> 、 <strong>标签</strong> 、 <strong>留言板</strong> 、 <strong>赞赏</strong> 、 <strong>友情链接</strong> 以及 <strong>分类</strong> 页面，其中的 <code>index.md</code> 中的内容为各个页面显示的内容，大家可以根据自己的情况进行修改。</p></li></ol><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>与所有 Hexo 主题启用的模式一样。当 克隆&#x2F;下载 完成后，打开 <strong>站点配置文件</strong> ，找到 theme 字段，并将其值更改为 <code>LiveForCode</code>。  </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">LiveForCode</span></span><br></pre></td></tr></table></figure><p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。  </p><h3 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h3><p>首先启动 Hexo 本地站点，并开启调试模式（即加上 –debug），整个命令是 <code>hexo s --debug</code>。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。<br>当命令行输出中提示出： <code>INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code> 此时即可使用浏览器访问 <code>http://localhost:4000</code>，检查站点是否正确运行。  </p><h2 id="站点设定"><a href="#站点设定" class="headerlink" title="站点设定"></a>站点设定</h2><p>在 <strong>站点配置文件</strong> 中，我修改了标签归档页面、分类归档页面以及文章归档页面的路径，如果大家使用默认的路径，则需要修改 <strong>主题配置文件</strong> 中的菜单设置。  </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tag_dir:</span> <span class="string">tag</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">category</span></span><br></pre></td></tr></table></figure><h2 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h2><p>由于 <strong>主题配置文件</strong> 可能有所改动，就不在这里给大家详细说明，我会在 <strong>主题配置文件</strong> 中添加适当的注释，麻烦大家参考页面以及注释内容进行修改。  </p><h2 id="404-页面设定"><a href="#404-页面设定" class="headerlink" title="404 页面设定"></a>404 页面设定</h2><p>主题中有相应的 <code>404</code> 错误页面，是单独的静态页面，没有添加到模板中。在使用主题的时候，需要大家将其中的 <strong>返回首页</strong> 的跳转链接 <code>https://notes.worstone.cn</code> 替换为自己网站的地址。<br>404 错误页面在主题文件夹 <code>LiveForCode</code> 中的 <code>source</code> 文件夹中。  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;reload();&quot;</span>&gt;</span>刷新页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://notes.worstone.cn&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>返回首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h2><h3 id="Abbrlink"><a href="#Abbrlink" class="headerlink" title="Abbrlink"></a>Abbrlink</h3><p>Hexo 默认的文章链接是以时间和文件名称命名的，如果文件名称是中文，那么文章链接会被转译，而转义后的链接很长，并且也不美观。<a href="https://github.com/rozbo/hexo-abbrlink">Hexo-Abbrlink</a> 插件基于文章的标题自动为文章生成固定的链接。</p><p>1.安装 Hexo-Abbrlink 插件。前往站点根目录，执行命令安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>2.编辑 <strong>站点配置文件</strong>，修改以下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink/</span> </span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink.html</span></span><br></pre></td></tr></table></figure><p>3.编辑 <strong>站点配置文件</strong>，新增以下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># abbrlink config</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>      <span class="comment">#support crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">dec</span>        <span class="comment">#support dec(default) and hex</span></span><br></pre></td></tr></table></figure><p>Hexo-Abbrlink 插件主要的设置选项：</p><ul><li><p>算法（alg）：目前支持 <code>crc16</code> 和 <code>crc32</code> 算法，默认值为 <code>crc16</code>。</p></li><li><p>形式（rep）：生成的链接可以是十进制（<code>dec</code>）格式，也可以是十六进制（<code>hex</code>）格式，默认值为十进制（<code>dec</code>）格式。</p></li></ul><p>生成的链接地址（参考）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">crc16 &amp; hex</span><br><span class="line">https://notes.worstone.cn/article/66c8.html</span><br><span class="line"></span><br><span class="line">crc16 &amp; dec</span><br><span class="line">https://notes.worstone.cn/article/65535.html</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">crc32 &amp; hex</span><br><span class="line">https://notes.worstone.cn/article/8ddf18fb.html</span><br><span class="line"></span><br><span class="line">crc32 &amp; dec</span><br><span class="line">https://notes.worstone.cn/article/1690090958.html</span><br></pre></td></tr></table></figure><h3 id="Algolia-Search"><a href="#Algolia-Search" class="headerlink" title="Algolia Search"></a>Algolia Search</h3><p>1.前往 <a href="https://www.algolia.com/">Algolia</a> 注册页面，注册一个新账户。 可以使用 GitHub 或者 Google 账户直接登录，注册后的 14 天内拥有所有功能（包括收费类别的）。之后若未续费会自动降级为免费账户，免费账户总共有 10,000 条记录，每月有 100,000 的可以操作数。注册完成后，创建一个新的 Index，这个 Index 将在后面使用。<br>2.Index 创建完成后，此时这个 Index 里未包含任何数据。 接下来需要安装 <code>Hexo Algolia</code> 扩展，这个扩展的功能是搜集站点的内容并通过 API 发送给 Algolia。前往站点根目录，执行命令安装：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-algolia</span><br></pre></td></tr></table></figure><p>3.编辑 <strong>站点配置文件</strong> ，新增以下配置：  </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">algolia:</span></span><br><span class="line">  <span class="attr">applicationID:</span> <span class="string">&#x27;applicationID&#x27;</span></span><br><span class="line">  <span class="attr">apiKey:</span> <span class="string">&#x27;apiKey&#x27;</span></span><br><span class="line">  <span class="attr">indexName:</span> <span class="string">&#x27;...&#x27;</span></span><br></pre></td></tr></table></figure><p>注：这里的 <strong>apiKey</strong> 为 <code>Search-Only API Key</code><br>4.当配置完成，在站点根目录下执行一下命令更新 Index。请注意观察命令的输出。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HEXO_ALGOLIA_INDEXING_KEY=Admin API Key</span><br><span class="line">hexo algolia</span><br></pre></td></tr></table></figure><p>5.Hexo Algolia 命令设置选项  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Options:</span><br><span class="line">  --dry-run       Does not push content to Algolia (default: false).</span><br><span class="line">  --flush         Resets the Algolia index before starting the indexation (default: false).</span><br><span class="line">  --indexing-key  An algolia API key with add/delete records permissions.</span><br><span class="line">              It should be different than the search-only API key configured in _config.yml.</span><br><span class="line">  --layouts       A comma-separated list of page layouts to index (default: &quot;page&quot;).</span><br></pre></td></tr></table></figure><p>说明：<br><code>--flush</code> 如果是 <code>false</code> 则每一次都会直接添加内容到 Algolia 相关的 Index 中，如果不是第一次提交，则将其设置为 <code>true</code><br><code>--layouts</code> 如果使用默认设置，提交的时候会将分类归档、标签归档、赞赏、留言板等页面内容提交到 Algolia， 在搜索的时候，将会搜索到分类归档、标签归档、赞赏、留言板等页面内容，建议使用时将其设置为 <code>post</code>。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo algolia --flush true --layouts post</span><br></pre></td></tr></table></figure><h3 id="Vercel"><a href="#Vercel" class="headerlink" title="Vercel"></a>Vercel</h3><p><a href="https://vercel.com/">Vercel</a> 是一个开箱即用的网站托管平台，方便开发者快速部署自己的网站。它在全球都拥有 CDN 节点，因此比 Github 官方自带的 Github Pages 更加稳定，访问速度更快。</p><h4 id="Vercel-部署方式"><a href="#Vercel-部署方式" class="headerlink" title="Vercel 部署方式"></a>Vercel 部署方式</h4><p>进入到 Vercel 官网后，可以选择使用 Github 进行授权登录。Vercel 部署有两种方式（<strong>推荐第一种方式</strong>）：</p><p>1.利用 Vercel 的 Hexo 模板进行部署。</p><blockquote><p>特别说明 使用这种方式需要已经安装 Hexo。<font color="red">不需要</font> 进行 Hexo 初始化，即 <code>hexo init</code> 。</p></blockquote><p>选择 <strong>Clone Template</strong>，点击下方的 <strong>Browse All Templates</strong>，然后找到 <strong>Hexo</strong> 模版。</p><p><img src="/image/article/template.PNG" alt="template"></p><p>选择模板后，进入到创建仓库界面，设置好仓库名称，然后点击 <strong>Create</strong> 即可。至于是否设置成私有仓库，根据个人意愿选择，目前 Github 的私有仓库是 <strong>免费</strong> 的。</p><p><img src="/image/article/repository.PNG" alt="repository"></p><p>等待 Vercel 部署完成，跳转到部署成功的页面。点击 <strong>Go to Dashboard</strong> 即可查看刚刚的项目。</p><p><img src="/image/article/congratulations.PNG" alt="congratulations"></p><p>部署好的模板项目是 Hexo 默认的主题，需要将 Github 对应的项目下载到本地进行修改。项目想要在本地进行运行，需要<strong>安装相关依赖</strong>，通过<code>npm install</code> 或 <code>cnpm install</code> 或<code>yarn install</code>皆可进行安装。依赖安装完成后，即可进行主题安装等相关操作。</p><p>2.通过 GitHub 托管 <code>hexo deploy</code> 生成的网页文件进行部署。</p><p>创建新的项目，选择 <strong>Import Git Repository</strong>，然后选择 Hexo 网站对应的仓库，点击 <strong>Import</strong>。</p><p><img src="/image/article/import.PNG" alt="import"></p><p>跳转到 <strong>Configure Project</strong> 页面，项目名称可以自行修改，其他的自定义选项，<strong>建议不要修改</strong>，除非有什么特殊需求。</p><p><img src="/image/article/configure.PNG" alt="configure"></p><p>点击 <strong>Deploy</strong>，然后等待部署完成即可。部署完成后，Vercel 会提供几个默认的域名，可以在对应项目中查看。</p><h4 id="Vercel-自定义域名"><a href="#Vercel-自定义域名" class="headerlink" title="Vercel 自定义域名"></a>Vercel 自定义域名</h4><p>进入到 Vercel 的 <strong>Dashboard</strong>，然后点击对应项目，然后点击 <strong>View Domains</strong>，进入到项目的 <strong>Domains</strong> 界面，在这里可以进行域名管理。如果想要使用 Vercel 提供的二级域名，可以直接添加 <code>xxx.vercel.app</code>；如果想要绑定自己的域名，在添加域名后，会提示 <strong>Invalid Config</strong>，需要添加 DNS 解析。</p><h4 id="Vercel-DNS-解析"><a href="#Vercel-DNS-解析" class="headerlink" title="Vercel DNS 解析"></a>Vercel DNS 解析</h4><p>1.如果是根域名，请在你的 DNS 解析处添加 <strong>A 记录</strong>，指向 <code>76.76.21.21</code>。</p><p>2.如果是子域名，请在你的 DNS 解析处添加 <strong>CNAME 记录</strong>，指向 <code>cname.vercel-dns.com</code>。</p><p>添加 DNS 解析记录之后，在 <strong>Vercel Domains</strong> 界面对应域名下方显示对号即表明验证成功。</p><p><img src="/image/article/invalid.PNG" alt="invalid"></p><blockquote><p>特别说明 Github 仓库的分支尽量选择 <strong>master</strong>，否则 Github 推送之后，还需到 Vercel 手动部署项目。</p></blockquote><h3 id="设置-RSS"><a href="#设置-RSS" class="headerlink" title="设置 RSS"></a>设置 RSS</h3><p>1.安装 <code>Hexo-Feed</code> 插件。前往站点根目录，执行命令安装：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure><p>2.根据个人需求，编辑 <strong>站点配置文件</strong> ：  </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="文章数据统计"><a href="#文章数据统计" class="headerlink" title="文章数据统计"></a>文章数据统计</h3><p>文章数据统计基于 <code>Valine.js</code> 插件实现。<br>实现方式：在文章列表页面加载 <code>Valine.js</code>， 只要 Valine 配置项中的 <code>el</code> 元素不存在即不会加载评论框相关内容。</p><p>1.文章评论数统计<br>Valine 会自动查找页面中 class 值为 <code>valine-comment-count</code> 的元素，获取其 <code>data-xid</code> 为查询条件。并将得到的值填充到其 class 的值为 <code>valine-comment-count</code> 的元素里：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- data-xid 将作为查询条件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;valine-comment-count&quot;</span> <span class="attr">data-xid</span>=<span class="string">&quot;&lt;Your/Path/Name&gt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.文章阅读量统计<br>Valine 从 <code>v1.2.0</code> 开始支持文章阅读量统计。  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Valine</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#vcomments&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">visitor</span>: <span class="literal">true</span> <span class="comment">// 阅读量统计</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果开启了阅读量统计，Valine 会自动检测 LeanCloud 应用中是否存在 <code>Counter</code> 类，如果不存在会自动创建，无需手动创建。<br>Valine 会自动查找页面中 class 值为 <code>leancloud_visitors</code> 的元素，获取其 <code>id</code> 为查询条件。并将得到的值填充到其 class 的值为 <code>leancloud-visitors-count</code> 的子元素里：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- id 将作为查询条件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;&lt;Your/Path/Name&gt;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;leancloud_visitors&quot;</span> <span class="attr">data-flag-title</span>=<span class="string">&quot;Your Article Title&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;leancloud-visitors-count&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>特别说明 使用 <strong>国际版的 LeanCloud</strong> 的时候，需要配置 <strong>主题配置文件</strong> 中 Valine 的 <code>serverURLs</code>，内容为 LeanCloud 的 <code>Request Domain</code>，国内版则无需配置。</p></blockquote><h3 id="评论列表"><a href="#评论列表" class="headerlink" title="评论列表"></a>评论列表</h3><p>评论功能使用的是 <code>Valine.js</code> 插件，配置详情请参见 <a href="https://valine.js.org/">Valine</a>。  </p><blockquote><p>特别说明 <strong>主题配置文件</strong> 中 Valine 的 <code>appId</code> 与 <code>appKey</code> 请大家自行配置自己的参数。如果评论数据提交到我的 LeanCloud 工作空间，我并不能保证数据的完整性。  </p></blockquote><h3 id="赞赏页面"><a href="#赞赏页面" class="headerlink" title="赞赏页面"></a>赞赏页面</h3><p>赞赏页面使用了 <a href="https://github.com/Kaiyuan/sponsor-page">Sponsor Page</a>，并做了相关修改使其适应博客样式。感兴趣的小伙伴自行去了解吧。  </p><h3 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h3><p>音乐播放器功能是使用 <code>APlayer.js</code> 以及 <code>Meting.js</code> 实现，配置详情参见 <a href="https://aplayer.js.org/#/home">APlayer</a>、<a href="https://github.com/metowolf/MetingJS">Meting</a>。<br>主题中有两种实现方式，一种是 <code>APlayer.js</code> 结合 <code>Meting.js</code> 的实现方式，另外一种是 <code>APlayer.js</code> 单独的实现方式，两种实现方式各有优缺点：<br>第一种实现方式配置简单，并且可以从各个音乐平台解析音乐。由于是从各个平台解析，故而不是特别稳定，并且在 <code>IE</code> 浏览器中需要特殊设置。<br>第二种实现方式配置相对复杂，需要单独提供音乐相关信息，但是十分稳定，且对于 <code>IE</code> 浏览器也可兼容，无需特殊配置。<br>主题中默认以 <strong>第一种实现方式</strong> 实现，第二种实现方式为备选方案，在第一种实现方式出现问题的时候，可以切换到第二种实现方式，保证网站的稳定运行。<br>针对第二种实现方式需要 <strong>注意</strong> 的地方：<br><code>APlayer.js</code> 是基于 <code>HTML 5 Audio</code> 实现的一款音乐播放器插件，故而支持的音频格式有限，包括：<code>MP3</code>、<code>Wav</code> 以及 <code>Ogg</code> 格式，并且不同浏览器对这三种音频格式的支持也各有不同，详细信息大家参考 <a href="https://www.runoob.com/html/html5-audio.html">HTML5 Audio(音频)</a>。如果音频格式不支持，可以通过音频转换工具进行格式转换。<br><code>APlayer.js</code> 是通过 <code>XMLHttpRequest</code> 获取歌词文件，所以存在 <strong>跨域</strong> 问题。可以考虑将歌词文件放在主题文件夹 <code>LiveForCode</code> 的 <code>source</code> 文件夹下（ <strong>注意</strong> ：这里的 <code>source</code> 文件夹不是 <code>Hexo</code> 站点目录下的 <code>source</code> 文件夹），解决跨域的问题。由于 <code>jsDelivr</code> 在响应请求的时候，会添加 <code>access-control-allow-origin: *</code> 的响应标头信息，故而不存在跨域问题，也可以使用这种方式。不过需要注意的是，<code>jsDelivr</code> 对资源的大小有所限制，不可以超过 <strong>50M</strong> 。<br><code>APlayer.js</code> 获取到歌词后会将歌词中的空白行去掉，由于是单行显示歌词，所以有译文的双行歌词，只会显示下面一行歌词，可以将译文歌词拼接在歌词原文的后面解决这个问题。  </p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="关于-jQuery-版本"><a href="#关于-jQuery-版本" class="headerlink" title="关于 jQuery 版本"></a>关于 jQuery 版本</h3><p>mCustomScroll 目前暂不支持 <code>jQuery3.5</code> 以及以上版本，否则会导致代码块中的滚动条失效。  </p><h3 id="Position-fixed-定位问题"><a href="#Position-fixed-定位问题" class="headerlink" title="Position: fixed 定位问题"></a>Position: fixed 定位问题</h3><p>由于背景动画的 <code>z-index</code> 为 <code>-1</code>，导致在IE浏览器中，菜单等多处 <code>position: fixed</code> 样式的部件出现闪烁抖动的问题，所以默认在IE浏览器中关闭了背景动画。如果是高版本IE，例如IE11则可在设置 -&gt; Internet选项 -&gt; 高级，将浏览中的’使用平滑滚动’选项勾掉，也可以解决这个问题。  </p><h3 id="关于-Github-Page-的使用"><a href="#关于-Github-Page-的使用" class="headerlink" title="关于 Github Page 的使用"></a>关于 Github Page 的使用</h3><p>详情请参见 <a href="https://hexo.io/zh-cn/docs/github-pages">将 Hexo 部署到 GitHub Pages</a>。<br>Github Page 支持设置自己的域名，建议在 Hexo 主题的 source 文件夹下新增一个 CNAME 的文件，将自己的域名配置进去，否则每次提交的时候会覆盖掉相关域名设置。<br>在域名的解析设置中，可以使用 CNAME 解析方式，也可以使用 A 记录 的方式。如果是 A 记录 的方式，则需要检索当前 Github Page 对应的服务器 IP 地址。  </p><h3 id="关于-CDN"><a href="#关于-CDN" class="headerlink" title="关于 CDN"></a>关于 CDN</h3><p>CDN 可以在阿里云购买相关的 CDN 服务器，效果肯定是更好，这里使用的是 <a href="https://www.jsdelivr.com/">jsDelivr</a> 免费的 CDN 加速服务。但是有一个弊端，如果修改代码的时候没有 Github 的相关版本信息，则很容易读取到 jsDelivr 的缓存数据，而不是修改后的最新代码。至于这个缓存时间，我也拿捏不准。不过免费而且效果不错的东西，大家就不要要求太多了。 </p><h3 id="关于-Valine"><a href="#关于-Valine" class="headerlink" title="关于 Valine"></a>关于 Valine</h3><p>由于很多小伙伴直接使用主题中 Valine 的 <code>appId</code> 以及 <code>appKey</code>，而且 Valine 默认设置的 <code>path</code> 为 <code>window.location.pathname</code>，会导致大家的留言板数据出现异常。所以这里还是建议大家设置自己的 LeanCloud，<strong>推荐使用国际版</strong> ，后续如果想要添加邮件提醒，这样会方便很多。</p><h3 id="关于-Vercel"><a href="#关于-Vercel" class="headerlink" title="关于 Vercel"></a>关于 Vercel</h3><p>Github Pages 内容部署的服务器在美国，可能会导致国内部分地区加载速度较慢，大家可以将项目部署到 <strong>Vercel</strong> ，来提高网站的访问速度，同时也 <strong>方便百度对站点内容进行收录</strong> 。如果 <strong>网站域名已经备案</strong> ，则可以考虑 <strong>国内的阿里云或腾讯云的相关产品</strong> ，效果会更好。</p><h3 id="Cannot-read-property-‘LongCang’-of-undefined"><a href="#Cannot-read-property-‘LongCang’-of-undefined" class="headerlink" title="Cannot read property ‘LongCang’ of undefined"></a>Cannot read property ‘LongCang’ of undefined</h3><p>这个问题比较常见，是主题文件路径不正确导致的。因为很多小伙伴都询问这个问题，所以在这里进行一个说明。    </p><p><img src="/image/article/structure.png" alt="Hexo-LiveForCode"></p><p>直接从 Github 下载 <code>Zip</code> 格式的文件解压后或 Github <code>Clone</code> 后的文件结构应该如上图所示。这里需要注意，是将解压后文件夹中的 <code>LiveForCode</code> 文件夹复制到 <code>Hexo</code> 的 <code>themes</code> 文件夹下，而不是将解压后的 <code>Hexo-LiveForCode</code> 复制到 <code>themes</code> 文件夹下。</p><h3 id="标签、分类、归档等页面-404-或-Cannot-GET"><a href="#标签、分类、归档等页面-404-或-Cannot-GET" class="headerlink" title="标签、分类、归档等页面 404 或 Cannot GET"></a>标签、分类、归档等页面 <code>404</code> 或 <code>Cannot GET</code></h3><p>由于 <code>Hexo</code> 的标签、分类、归档等页面的目录修改为了 <code>tag</code>、<code>category</code>、<code>archive</code>，故使用默认的 <strong>站点配置文件</strong> 会出现这个问题。需要将 <strong>站点配置文件</strong> 中的 <code>Directory</code> 相关配置修改为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tag_dir:</span> <span class="string">tag</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">category</span></span><br></pre></td></tr></table></figure><h2 id="阶段计划"><a href="#阶段计划" class="headerlink" title="阶段计划"></a>阶段计划</h2><p>1.使用 Vue.js 重构项目<br>2.整理模板的样式文件<br>3.加入 Pjax，优化页面加载速度<br>4.补充国际化支持语言<br>5.考虑是否加入黑夜模式  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>由于我还是一名小白，可能还有很多问题无法解决，这个主题也可能存在很多不尽如人意的地方，在细节方面我也会尽力地去修改，也欢迎大家提出自己的问题，以及主题的相关建议，也欢迎大家提交代码。如果觉得这个主题不错，欢迎大家去使用。当然了，如果能赞赏我一下，我也是不介意的。(●ˇ∀ˇ●)  </p><p>这个主题可定制的地方目前可能比较少，欢迎大家修改，也希望这个主题能够越来越好看，也希望越来越多的人能够喜欢。  </p>]]></content>
    
    
    <summary type="html">Hexo主题LiveForCode介绍.</summary>
    
    
    
    <category term="Web" scheme="http://example.com/category/Web/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tag/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/post/4a17b156.html"/>
    <id>http://example.com/post/4a17b156.html</id>
    <published>2019-12-31T16:00:00.000Z</published>
    <updated>2022-07-25T07:08:26.360Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">Hexo相关资料以及简单的使用教程.</summary>
    
    
    
    <category term="Web" scheme="http://example.com/category/Web/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tag/Hexo/"/>
    
  </entry>
  
</feed>
