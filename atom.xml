<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucky Dog&#39;s blogs</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-01T13:40:50.960Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ArrayList源码解析</title>
    <link href="http://example.com/post/abb154f4.html"/>
    <id>http://example.com/post/abb154f4.html</id>
    <published>2022-09-01T07:33:35.000Z</published>
    <updated>2022-09-01T13:40:50.960Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>声明：我用的Java的版本是<code>Java9</code>版本。版本不同，源代码也有差异。</p><p>ArrayList源码中大量使用了一下两个函数，首先搞清楚这两个函数的含义</p><ul><li><code>System.arraycopy()</code></li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们发现 arraycopy 是一个 native 方法,接下来我们解释一下各个参数的具体意义</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*   复制数组</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> src 源数组</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> srcPos 源数组中的起始位置</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> dest 目标数组</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> destPos 目标数组中的起始位置</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> length 要复制的数组元素的数量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">arraycopy</span><span class="params">(Object src,  <span class="type">int</span>  srcPos,</span></span><br><span class="line"><span class="params">                                    Object dest, <span class="type">int</span> destPos,</span></span><br><span class="line"><span class="params">                                    <span class="type">int</span> length)</span>;</span><br></pre></td></tr></table></figure><p> 举例：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">10</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">45</span>,<span class="number">23</span>,<span class="number">56</span>,<span class="number">12</span>&#125;;</span><br><span class="line">System.arraycopy(array,<span class="number">5</span>,array,<span class="number">4</span>,<span class="number">4</span>);</span><br><span class="line">System.out.println(Arrays.toString(array));<span class="comment">//[10, 23, 24, 15, 45, 23, 56, 12, 12]</span></span><br></pre></td></tr></table></figure><p> 含义：将<code>array</code>数组的元素，从下标<code>5</code>为起始，4个元素，赋给<code>array</code>数组从<code>4</code>索引开始的位置上。这个实现的是一个<strong>数组删除操作</strong>。</p><p> <img src="/image/article/ArrayList%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/image-20220901170637925.png" alt="image-20220901170637925"></p><ul><li><code>Arrays.copyOf()</code></li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] copyOf(<span class="type">int</span>[] original, <span class="type">int</span> newLength) &#123;</span><br><span class="line"><span class="comment">// 申请一个新的数组</span></span><br><span class="line">    <span class="type">int</span>[] copy = <span class="keyword">new</span> <span class="title class_">int</span>[newLength];</span><br><span class="line"><span class="comment">// 调用System.arraycopy,将源数组中的数据进行拷贝,并返回新的数组</span></span><br><span class="line">    System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                     Math.min(original.length, newLength));</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 含义是：传入原始数组，复制出一个<code>newLength</code>长度的数组。</p></blockquote><p><code>ArrayList</code>底层实现是<strong>数组</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt;</span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><p><code>ArrayList</code>继承于 <strong><code>AbstractList</code></strong> ，实现了 <strong><code>List</code></strong>, <strong><code>RandomAccess</code></strong>, <strong><code>Cloneable</code></strong>, **<code>java.io.Serializable</code>**。</p><ul><li><code>RandomAccess</code> 是一个标志接口，表明实现这个这个接口的 List 集合是支持<strong>快速随机访问</strong>的。在 <code>ArrayList</code> 中，我们即可以通过元素的序号快速获取元素对象，这就是快速随机访问。</li><li><code>ArrayList</code> 实现了 <strong><code>Cloneable</code> 接口</strong> ，即覆盖了函数<code>clone()</code>，能被克隆。</li><li><code>ArrayList</code> 实现了 <code>java.io.Serializable</code>接口，这意味着<code>ArrayList</code>支持序列化，能通过序列化去传输。</li></ul><h1 id="ArrayList成员变量"><a href="#ArrayList成员变量" class="headerlink" title="ArrayList成员变量"></a>ArrayList成员变量</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ARRAY_SIZE</span> <span class="operator">=</span> Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;</span><br></pre></td></tr></table></figure><ul><li><code>DEFAULT_CAPACITY</code>定义了<code>ArrayList</code>的默认容量为 10。</li><li><code>MAX_ARRAY_SIZE</code>要分配的数组的最大大小。</li><li><code>EMPTY_ELEMENTDATA</code>和 <code>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</code>都定义了一个空数组。<ul><li><code>EMPTY_ELEMENTDATA = &#123;&#125;</code>：空数组（用于空实例）</li><li><code>DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;</code>：<ul><li>用于默认大小空实例的共享空数组实例</li><li>把它从<code>EMPTY_ELEMENTDATA</code>数组中区分出来，用来知道在添加第一个元素时容量需要增加多少。</li></ul></li></ul></li><li><code>elementData</code>是<code>ArrayList</code>的底层实现，是一个Object数组。</li><li><code>size</code>表明<code>ArrayList</code>当前存有多少元素。</li></ul><h1 id="ArrayList构造方法"><a href="#ArrayList构造方法" class="headerlink" title="ArrayList构造方法"></a>ArrayList构造方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>ArrayList()</code></p><p>无参构造，将之前<font color="blue">已经初始化的默认实例[<code>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</code>]</font>赋值给<code>elementData</code></p><p>初始时容量为0， 当添加第一个元素的时候数组容量才变成10</p></li><li><p><code>ArrayList(int initialCapacity)</code></p><ul><li>带初始容量参数的构造函数（用户可以在创建<code>ArrayList</code>对象时自己指定集合的初始大小）<ol><li>如果<code>initialCapacity</code>大于0，就<code>new</code>一个Object数组。</li><li>如果<code>initialCapacity</code>等于0，将被赋值一个<font color="blue">空实例<code>EMPTY_ELEMENTDATA</code></font></li><li>如果<code>initialCapacity</code>小于0，抛出<code>IllegalArgumentException</code>异常。</li></ol></li></ul></li><li><p><code>ArrayList(Collection&lt;? extends E&gt; c)</code></p><ul><li><p>构造一个包含指定集合的元素的列表，按照它们由集合的迭代器返回的顺序。</p><ol><li><p>首先将传入的集合转化为数组，赋值给<code>elementData</code></p></li><li><p>如果<code>elementData</code>的长度不为0</p><ul><li><p>如果<code>elementData</code>的类型不是<code>Object[]</code>类型。<code>c.toArray</code>可能返回的不是Object类型的数组</p><p>将原来不是Object类型的<code>elementData</code>数组的内容，赋值给新的Object类型的<code>elementData</code>数组</p></li></ul></li><li><p>如果<code>elementData</code>的长度为0</p><p><code>elementData</code>被赋值为一个<font color="blue">空实例<code>EMPTY_ELEMENTDATA</code></font></p></li></ol></li></ul></li></ul><h1 id="ArrayList常用方法"><a href="#ArrayList常用方法" class="headerlink" title="ArrayList常用方法"></a>ArrayList常用方法</h1><p><code>ArrayList</code>的常用方法有：</p><ul><li><code>get()</code></li><li><code>add()</code></li><li><code>set()</code></li><li><code>remove()</code></li></ul><h2 id="get-方法"><a href="#get-方法" class="headerlink" title="get()方法"></a><code>get()</code>方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    Objects.checkIndex(index, size);</span><br><span class="line">    <span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>首先他会检查这个索引是否合法</p></li><li><p>然后调用<code>elementData(index)</code>方法，返回元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E <span class="title function_">elementData</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[index];<span class="comment">//进行了强制转换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="add-方法"><a href="#add-方法" class="headerlink" title="add()方法"></a><code>add()</code>方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    add(e, elementData, size);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用了<code>add(E e, Object[] elementData, int s)</code>方法，这是一个私有方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e, Object[] elementData, <span class="type">int</span> s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s == elementData.length)</span><br><span class="line">        elementData = grow();</span><br><span class="line">    elementData[s] = e;</span><br><span class="line">    size = s + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是一个辅助方法，从add(E)中分离出来，以保持方法字节码大小小于35 。</p><p><code>E e</code>：表示要插入的元素</p><p><code>Object[] elementData</code>：表示要插入的数组</p><p><code>int s</code>表示要插入的位置</p><ol><li>首先判断，<code>elementData</code>是否已满，如果已经满了，再调用<code>grow()</code>方法进行扩容。</li><li>然后就是数组赋值操作了。</li></ol><h2 id="set-方法"><a href="#set-方法" class="headerlink" title="set()方法"></a><code>set()</code>方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    Objects.checkIndex(index, size);</span><br><span class="line">    <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> elementData(index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>首先他会检查这个索引是否合法</li><li>然后获取该索引位置原始元素</li><li>该索引位置被新元素所取代</li><li>返回旧元素</li></ol><h2 id="remove-方法"><a href="#remove-方法" class="headerlink" title="remove()方法"></a><code>remove()</code>方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    Objects.checkIndex(index, size);<span class="comment">//检查索引</span></span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> elementData(index);<span class="comment">//获取原始元素</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="literal">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要将删除点之后的元素向前移动一个位置。</p><p>需要注意的是：为了让<code>GC</code>起作用，必须将最后一个元素置为null。</p><p>对象能否被<code>GC</code>的依据是<strong>是否还有引用指向它</strong>，上面代码中如果不手动赋<code>null</code>值，除非对应的位置被其他元素覆盖，否则原来的对象就一直不会被回收。</p><h1 id="ArrayList的扩容策略"><a href="#ArrayList的扩容策略" class="headerlink" title="ArrayList的扩容策略"></a>ArrayList的扩容策略</h1><p>一步一步的看<code>ArrayList</code>的扩容策略，扩容函数是<code>grow()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object[] grow() &#123;</span><br><span class="line">    <span class="keyword">return</span> grow(size + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部又调用了<code>grow(size + 1)</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object[] grow(<span class="type">int</span> minCapacity) &#123;</span><br><span class="line">    <span class="type">return</span> <span class="variable">elementData</span> <span class="operator">=</span> Arrays.copyOf(elementData,</span><br><span class="line">                                       newCapacity(minCapacity));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增加容量以确保它至少能容纳最小容量参数指定的元素数量。<br>参数:<br><code>minCapacity</code>—期望的最小容量</p><p>返回一个从原始数组<code>elementData</code>，复制一个容量为<code>newCapacity(minCapacity)</code>是数组。从而进行扩容。</p><p>这个<code>newCapacity(minCapacity)</code>返回新的容量。<code>newCapacity()</code>是扩容的核心。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">newCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">            <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OutOfMemoryError</span>();</span><br><span class="line">        <span class="keyword">return</span> minCapacity;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (newCapacity - MAX_ARRAY_SIZE &lt;= <span class="number">0</span>)</span><br><span class="line">        ? newCapacity</span><br><span class="line">        : hugeCapacity(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code> int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1)</code>表明新的容量是旧的容量的1.5倍。</p><ul><li><p>如果<font color="blue">新的容量</font>小于等于<font color="blue">期望的最小容量</font>：</p><ol><li><p>如果此时<code>ArrayList</code>的底层数组<code>elementData</code>是<font color="red">默认的空实例<code>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</code></font>：</p><p>则<code>ArrayList</code>至少扩容为默认容量10。<code>Math.max(10, minCapacity)</code></p></li><li><p>如果不是默认的空实例，但期望的最小容量小于0，就抛出异常。</p></li><li><p>如果以上两种情况都不符合，就返回期望的最小容量。然后<code>ArrayList</code>就会扩容为期望的最小容量。</p></li></ol></li><li><p>如果<font color="blue">新的容量</font>大于<font color="blue">期望的最小容量</font>：</p><p>检查这新的容量，是否小于，允许扩容的最大容量【<code>Integer.MAX_VALUE - 8</code>】。</p><ul><li><p>如果小于，则返回<font color="blue">新的容量</font>，即<code>ArrayList</code>将扩容为旧容量的1.5倍。</p></li><li><p>如果大于，则调用<code>hugeCapacity(minCapacity)</code>函数，在对<font color="blue">期望的最小容量</font>进行进步判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hugeCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OutOfMemoryError</span>();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE)</span><br><span class="line">        ? Integer.MAX_VALUE</span><br><span class="line">        : MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果<font color="blue">期望的最小容量</font>大于<strong>允许扩容的最大容量</strong>，则<code>ArrayList</code>扩容为int整数的最大值。</li><li>否则<code>ArrayList</code>扩容为<strong>允许扩容的最大容量</strong></li></ul></li></ul><blockquote><p>扩容策略总结：</p><ul><li>默认容量：10</li><li>最大扩容容量：<code>Integer.MAX_VALUE - 8 = 2147483639</code></li><li>最小期望容量：当前容量+1</li></ul><p>当添加第一个元素时，任何带有<code>elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</code>的空数组列表将被扩展为<code>DEFAULT_CAPACITY</code>。</p><p>即</p><ol><li><p>如果<code>ArrayList</code>使用无参构造初始化，初次添加元素，会扩容为10。</p></li><li><p>其他情况，当需要扩容时</p><p><code>minCapacity</code>最小期望容量为当前容量+1。</p><ul><li><p><font color="red">如果<code>minCapacity</code>&lt;10，就会扩容为最小期望容量</font></p></li><li><p>如果<code>minCapacity</code>&gt;10，新容量为原始容量的1.5倍。</p><ul><li><font color="red">如果这个新的容量小于允许最大容量，则扩容为原始容量的1.5倍。</font></li><li>如果这个新的容量大于允许最大容量<ul><li><font color="red">最小期望容量小于允许最大容量，则扩容为，允许的最大容量</font></li><li><font color="red">最小期望容量小于允许最大容量，则扩容为，int整型的最大值。</font></li></ul></li></ul></li></ul></li></ol></blockquote></li></ul><h1 id="并发修改异常"><a href="#并发修改异常" class="headerlink" title="并发修改异常"></a>并发修改异常</h1><p>并发修改异常是发生在<code>ArrayList</code>使用<strong>迭代器</strong>遍历过程中，对<code>ArrayList</code>进行修改而发生的异常。</p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">        arrayList.add(<span class="number">10</span>);arrayList.add(<span class="number">23</span>);arrayList.add(<span class="number">17</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer integer : arrayList) &#123;</span><br><span class="line">            <span class="keyword">if</span>(integer%<span class="number">5</span>==<span class="number">0</span>)arrayList.add(<span class="number">21</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引发异常<code>ConcurrentModificationException</code>。</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>我们知道增强式for循环，它本质是使用迭代器。</p><p><code>ArrayList</code> 继承了<code>AbstractList</code>抽象类，它里面定义了一个变量<code>modCount</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">A</span>  AbstractList&lt;E&gt;&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">transient</span> <span class="type">int</span> <span class="variable">modCount</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//跟进父类  初试为0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>modCount</code>表示预期修改次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Itr</span>();<span class="comment">//获取迭代器。</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Itr</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;E&gt; &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;<span class="comment">//预期集合修改次数</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            modCount:实际集合修改次数</span></span><br><span class="line"><span class="comment">            expectedModCount:预期集合修改次数</span></span><br><span class="line"><span class="comment">        */</span>    </span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;           </span><br><span class="line">            checkForComodification();           </span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;             </span><br><span class="line">            <span class="keyword">if</span> (i &gt;= size)    </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">            Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)    </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();  </span><br><span class="line">            cursor = i + <span class="number">1</span>;     </span><br><span class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];  </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">checkForComodification</span><span class="params">()</span> &#123;  </span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)<span class="comment">//不一样了，抛出异常 </span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123; </span><br><span class="line">        modCount++;<span class="comment">//实际操作次数++,预期的并没有++ </span></span><br><span class="line">        add(e, elementData, size); </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们通过<code>iterator()</code>方法获取迭代器，<code>expectedModCount = modCount</code>此时<font color="red">预期修改次数</font>和<font color="red">实际修改次数</font>相等。</p><p>当调用迭代器的<code>next()</code>方法时，每次调用都会检查<font color="red">预期修改次数</font>和<font color="red">实际修改次数</font>是否相等，如果不相等就会抛出异常。</p><p>而，我们调用<code>add()</code>方法时，<code>modCount++</code>，<font color="red">实际修改次数</font>加一，但预期修改次数不变。等下次调用next()的时候，就会引发并发修改异常。</p><p>除了<code>add()</code>方法，一下方法，在迭代器遍历过程中调用也会产生并发修改异常，因为它们内部也同样<code>modCount++</code>：</p><ul><li><code>trimToSize()</code></li><li><code>ensureCapacity()</code></li><li><code>remove()</code></li><li><code>clear()</code></li><li><code>addAll()</code></li><li><code>removeRange()</code></li><li><code>batchRemove()</code></li></ul><p>…….</p><h1 id="附-查看集合容量的方法"><a href="#附-查看集合容量的方法" class="headerlink" title="附:查看集合容量的方法"></a>附:查看集合容量的方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看ArrayList集合容量方法 -- 反射</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getArrayListLength</span><span class="params">(ArrayList list)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//获取Class对象</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.ArrayList&quot;</span>);</span><br><span class="line">    <span class="comment">//映射Class对象c所表示类(即Arraylist)的属性</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;elementData&quot;</span>);</span><br><span class="line">    <span class="comment">//设置访问状态表示为true</span></span><br><span class="line">    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//返回指定对象上此 Field 表示的字段的值</span></span><br><span class="line">    Object[] object = (Object[])field.get(list);</span><br><span class="line">    <span class="keyword">return</span> object.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">ArrayList常用方法的源码分析、ArrayList的扩容策略以及并发修改异常。</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/category/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="源码解析" scheme="http://example.com/tag/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Java对象序列化和反序列化</title>
    <link href="http://example.com/post/20dbe6cd.html"/>
    <id>http://example.com/post/20dbe6cd.html</id>
    <published>2022-09-01T06:03:24.000Z</published>
    <updated>2022-09-01T07:19:49.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><font size=5><strong>对象序列化：</strong></font></p><p>所谓的对象序列化就是将对象保存到磁盘中，或者在网络中传输对象。</p><p>这种机制就是使用一个<strong>字节序列</strong>表示一个对象，该字节序列包含:</p><ul><li>对象的类型</li><li>对象的数据</li><li>对象中存储的属性等信息</li></ul><p>字节序列写到文件之后，相当于文件中持久保存了一个对象的信息</p><p><font size=5><strong>对象反序列化：</strong></font></p><p>对象反序列化就是将 对象的字节序列从文件中读取回来，重构对象，对它进行反序列化。</p><h1 id="对象序列化准备工作"><a href="#对象序列化准备工作" class="headerlink" title="对象序列化准备工作"></a>对象序列化准备工作</h1><h2 id="实现Serializable接口"><a href="#实现Serializable接口" class="headerlink" title="实现Serializable接口"></a>实现<code>Serializable</code>接口</h2><p>如果要将，对象序列化，该对象必须实现<code>Serializable</code>接口，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">42L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;  <span class="comment">//不想被序列化 transient</span></span><br><span class="line"><span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Serializable</code>接口表示该类 启用 <strong>类的序列化</strong>，也就是允许该类被序列化。该接口没有实现方法，只是一个标识性的接口。</p><p>如果需要序列化或者反序列化的类不实现该接口，那么在序列化或者序列化过程中抛出异常<code>NotSerializableException</code>。</p><h2 id="最好显式声明一个serialVersionUID"><a href="#最好显式声明一个serialVersionUID" class="headerlink" title="最好显式声明一个serialVersionUID"></a>最好显式声明一个<code>serialVersionUID</code></h2><blockquote><p>什么是<code>serialVersionUID</code>？</p><p>序列化运行时将<font color="blue"><strong>每个可序列化的类</strong></font>与<font color="blue"><strong>称为<code>serialVersionUID</code>的版本号</strong></font>相关联。</p><p>该序列号在反序列化期间<strong>用于验证序列化对象的发送者和接收者是否已加载与该序列化兼容的对象的类</strong>。  如果接收方加载了一个具有不同于相应发件人类的<code>serialVersionUID</code>的对象的类，则反序列化将导致<code>InvalidClassException</code> 。</p><p>简而言之：</p><p>相当于Java的版本号，保证<strong>序列化的对象</strong> 和 <strong>反序列化兼容的对象</strong> 的版本相同才能反序列化。</p></blockquote><p>如果没有显式地声明一个<code>serialVersionUID</code></p><p>则序列化运行时将根据**Java（TM）对象序列化规范中所述的类的<font color="blue">各个方面</font>**计算该类的默认<code>serialVersionUID</code>值</p><p>默认的<code>serialVersionUID</code>计算对类详细信息<font color="blue"><strong>非常敏感</strong></font>，这可能会<strong>因编译器实现</strong>而异，因此可能会在反<code>InvalidClassException</code>化期间导致<code>InvalidClassException</code>的<code>InvalidClassException</code>。</p><p>比如将如下类的对象序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;  </span><br><span class="line"><span class="comment">//Geter 和 Seter....省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在反序列化之前，<strong>修改这个类</strong>，添加一个属性或者删除一个属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;  </span><br><span class="line">    <span class="keyword">private</span> String address</span><br><span class="line"><span class="comment">//Geter 和 Seter....省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就会抛出<code>InvalidClassException</code>异常。异常信息：</p><p><code>stream classdesc serialVersionUID = 6500785223629970781, local class serialVersionUID = -4354424114631597798</code></p><p>异常信息表明，流对象发”版本号“是6500785223629970781，当前接收的类的”版本号“是-4354424114631597798。</p><p><font color="red"><strong>版本号不一致！</strong></font>这说明默认的<code>serialVersionUID </code>对类的细节非常敏感！</p><p>但如果我们显式的声明<code>serialVersionUID</code>就不会出现这种问题。需要说明的是，**<font color="red">该字段必须是静态的，最终的，类型是<code>long</code> </font>**</p><p><strong>显式声明一个<code>serialVersionUID</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">42L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;  </span><br><span class="line"><span class="comment">//Geter 和 Seter....省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他需要注意的"><a href="#其他需要注意的" class="headerlink" title="其他需要注意的"></a>其他需要注意的</h2><ul><li>序列化的类必须有<strong>可访问的无参构造函数</strong></li><li>序列化的类不能包含<strong>未知的数据类型</strong></li></ul><p>否则都会引发<code>InvalidClassException</code>异常。</p><p>如果你不想类中某个字段不被序列化，可以<font color="red">使用<code>transient</code>关键字修饰</font>。</p><h1 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h1><ul><li>对象序列化使用<code>objectOutputStream</code>类。<ul><li>方法：<code>void writeobject (object obj)</code>:将指定的对象写入<code>objectOutputStream</code></li></ul></li><li>反序列化使用<code>objectInputStream</code>类。<ul><li>方法：<code>object read0bject ()</code>:从<code>objectInputStream</code>读取一个对象</li></ul></li></ul><p>了解一下就行了，真正开发时，用的很少。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UID</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">write();</span><br><span class="line">        read();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">People</span> <span class="variable">peo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">People</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\oos.txt&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">        oos.writeObject(peo);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\oos.txt&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="type">People</span> <span class="variable">people</span> <span class="operator">=</span> (People) object;</span><br><span class="line">        System.out.println(people.getName());</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">42L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> age;  <span class="comment">//不想被序列化 transient</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">People</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Serializable接口、为什么要显式声明一个serialVersionUID、transient关键字以及其他一些注意事项。</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/category/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="序列化和反序列化" scheme="http://example.com/tag/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Sharding-jdbc分表配置</title>
    <link href="http://example.com/post/2afab64c.html"/>
    <id>http://example.com/post/2afab64c.html</id>
    <published>2022-08-29T14:49:04.000Z</published>
    <updated>2022-08-29T15:51:32.560Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个用Java实现一个简易的搜索引擎项目时，由于数据量很大，需要分表。这里的分表指的<strong>水平分表</strong>。数据大概有几千万行了吧。</p><p><img src="/%5Cimage%5Carticle%5CSharding-jdbc%E5%88%86%E8%A1%A8%E9%85%8D%E7%BD%AE%5Cimage-20220829225513347.png" alt="image-20220829225513347"></p><p>当数据量特别大的时候，查询速度特别慢，为了加快查询速度，只能采用分表的策略。除了水平切分还有垂直切分，用的不多。</p><p>当数据库分表后，为了方便操作数据库，我们可以采用<code>Sharding-jdbc</code>。你可以把它理解为加强版的<code>JDBC</code>。</p><p>当我们需要使用<code>Shard-jdbc</code>，首先我们需要导入<code>pom</code>坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0-RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我这里使用的<code>4.0</code>版本</p><p>然后配置如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span> <span class="comment">#允许bean覆盖</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">master</span><span class="comment">#数据源名称</span></span><br><span class="line">      <span class="attr">master:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>  <span class="comment">#使用druid数据源，如果不用就去掉这一行，如果用记得导入pom坐标</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.37.135:3306/my_search_engine?serverTimezone=UTC</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">sharding:</span> </span><br><span class="line">      <span class="attr">tables:</span></span><br><span class="line">        <span class="attr">data_seg_relation:</span> <span class="comment">#需要分表的表名  也可以理解为分表后的表名前缀</span></span><br><span class="line">        <span class="comment">#分成100个表 从data_seg_relation_0 --&gt;data_seg_relation_99</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">master.data_seg_relation_$-&gt;&#123;0..99&#125;</span> </span><br><span class="line">          <span class="attr">key-generator:</span> <span class="comment">#主键生成策略</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">id</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">SNOWFLAKE</span>  <span class="comment">#使用雪花算法生成id</span></span><br><span class="line">          <span class="attr">table-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">data_seg_relation_$-&gt;&#123;seg_id</span> <span class="string">%</span> <span class="number">100</span><span class="string">&#125;</span> <span class="comment">#如何映射到表</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">seg_id</span></span><br></pre></td></tr></table></figure><p>说明一下，这是数据库里面的表。</p><p>我们可以看到  <code>data_seg_relation</code>被分成了100个表，从<code>data_seg_relation_0</code>到<code>data_seg_relation_99</code></p><img src="\image\article\Sharding-jdbc分表配置\image-20220829230552472.png" alt="image-20220829230552472" style="zoom: 80%;" /><p><font size=5><strong>表结构</strong></font></p><img src="\image\article\Sharding-jdbc分表配置\image-20220829230826244.png" alt="image-20220829230826244" style="zoom:80%;" /><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">algorithm-expression:</span> <span class="string">data_seg_relation_$-&gt;&#123;seg_id</span> <span class="string">%</span> <span class="number">100</span><span class="string">&#125;</span> <span class="comment">#如何映射到表</span></span><br><span class="line"><span class="attr">sharding-column:</span> <span class="string">seg_id</span></span><br></pre></td></tr></table></figure><p>这个配置的意思是，当你查询的时候，比如 <code>select * from data_seg_relation where seg_id=1165136</code>，</p><p><code>Shard-jdbc</code>会根据<code>seg_id</code>这个取值，<code>seg_id % 100 = 36</code>。然后它实际就会去查<code>data_seg_relation_36</code>这个表。</p><p><strong>当你配置好之后，你就可以像没有分表那样来去操作数据库。</strong></p><p>但需要注意的是【踩的几个坑吧】:</p><ul><li><p>如果你的<code>Java</code>是<code>jdk8</code>以上的版本，或许你会报这样的错：</p><p><code>Cause: javax.xml.bind.JAXBException: Implementation of JAXB-API has not been found on module path or classpath.</code></p><p>大概率就是你<code>jdk</code>版本的原因，要么你回退到<code>jdk8</code>版本，要么你就添加如下<code>pom</code>坐标。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.activation/activation --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.glassfish.jaxb/jaxb-runtime --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.jaxb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-runtime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0-b170127.1453<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>当你用使用mybatis或mybatis-plus时，就不需要再配置它们的数据源了。</p></li><li><p>你当你写<code>SQL</code>时，最好别用子查询，因为你可能会报错的，【错误信息找不到ಥ_ಥ】</p><p>解决方法就是不用子查询，一条<code>SQL</code>语句拆成两条不就好了！</p></li></ul>]]></content>
    
    
    <summary type="html">SpringBoot整合Sharding-jdbc,并进行简单的分表。</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/category/Spring/"/>
    
    
    <category term="分表" scheme="http://example.com/tag/%E5%88%86%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>前缀树</title>
    <link href="http://example.com/post/84520ef4.html"/>
    <id>http://example.com/post/84520ef4.html</id>
    <published>2022-08-28T11:35:48.000Z</published>
    <updated>2022-08-28T12:14:44.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前缀树简介"><a href="#前缀树简介" class="headerlink" title="前缀树简介"></a>前缀树简介</h1><p>又称单词查找树，字典树，<code>Trie</code>树，是一种树形结构，是一种<strong>哈希树</strong>的变种。</p><p>典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。</p><p>它的优点是：<code>利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高</code>。</p><p>是一种典型的用时间换空间的数据结构</p><p><strong>前缀树的性质：</strong></p><ul><li><font color="red"><strong>根节点不包含字符</strong></font>，除根节点外每一个节点都只包含一个字符</li><li>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串</li><li>每个节点的所有子节点包含的字符都不相同</li></ul><p>假设有<code>b</code>，<code>abc</code>，<code>abd</code>，<code>bcd</code>，<code>abcd</code>，<code>efg</code>，<code>hii </code>这6个单词,那我们创建<code>trie</code>树就得到</p><p><img src="/%5Cimage%5Carticle%5C%E5%89%8D%E7%BC%80%E6%A0%91%5C20190924193658133.png" alt="20190924193658133"></p><p>其中红色的节点表示，从根节点到该节点连成的字符串，是前缀树包含的。</p><h1 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h1><p>定义<strong>前缀树节点</strong>的数据结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    Map&lt;Character,Node&gt; child;</span><br><span class="line">    <span class="type">boolean</span> isEnd;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">()</span>&#123;</span><br><span class="line">        child = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        isEnd = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用<code>Map</code>来存储该节点的孩子节点</p><p>布尔类型的<code>isEnd</code>很重要，前缀树包含某一字符串，但该前缀树不一定存入该字符串。【如上图所示的红色节点】</p><p>它标识以该字符为结尾的字符串是存入的字符串。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tire.insert(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">tire.search(<span class="string">&quot;app&quot;</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><font size= 4><strong>前缀树的实现</strong></font></p><p><strong>字符串插入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> root;<span class="comment">//指针指向根节点,从前缀树的根节点开始遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;<span class="comment">//遍历该字符串</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(!node.child.containsKey(c))&#123;<span class="comment">//如果该节点的孩子节点不包含该字符</span></span><br><span class="line">            node.child.put(c,<span class="keyword">new</span> <span class="title class_">Node</span>());<span class="comment">//新加入该字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==word.length()-<span class="number">1</span>)node.child.get(c).isEnd=<span class="literal">true</span>;<span class="comment">//当到了最后的一个字符时，就标记为一个字符串的结尾。</span></span><br><span class="line">        node = node.child.get(c);<span class="comment">//指针指向孩子节点。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>字符串查找</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> root;<span class="comment">//指针指向根节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;<span class="comment">//遍历该字符串</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">        <span class="comment">//如果存在某个节点的孩子不包含该字符串，就说明前缀树中不存在该字符串</span></span><br><span class="line">        <span class="keyword">if</span>(!node.child.containsKey(c))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        node = node.child.get(c);<span class="comment">//指针指向孩子节点。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.isEnd;<span class="comment">//都包含的还不行，还得看看该节点是否标记为字符串的结束标志</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>前缀树是否包含字符串的前缀</strong></p><p>和字符串代码唯一不同的是：</p><p>如果包含该字符串，最后<code>return</code>的时候，不会判断该节点是否标记为字符串结束标志。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; prefix.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> prefix.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(!node.child.containsKey(c))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        node = node.child.get(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>找到以某字符串为前缀的字符串</strong></p><p>例如：</p><p>前缀树包含的字符串有，<code>apple</code>、<code>code</code>、<code>appl</code>、<code>leet</code>、<code>apples</code>、<code>abc</code>、<code>ace</code></p><p>找到以<code>app</code>为前缀的字符们：<code>apple</code>、<code>appl</code>、<code>apples</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">searchprefix</span><span class="params">(String word)</span> &#123;</span><br><span class="line">    cnt = <span class="number">0</span>;   <span class="comment">//前缀字符串数量</span></span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> root;<span class="comment">//指针指向根节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length();i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (!node.child.containsKey(c)) <span class="keyword">return</span> res;<span class="comment">//如果不包含该前缀字符串直接return res</span></span><br><span class="line">        node = node.child.get(c);<span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找到前缀之后，以前缀末尾字符的节点开始进行深度优先遍历。</span></span><br><span class="line">    dfs(word, node, res, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(String word, Node node, List&lt;String&gt; res, String path)</span> &#123;  <span class="comment">// 深度优先搜索</span></span><br><span class="line">    <span class="keyword">if</span> (cnt &gt;= COUNT) <span class="keyword">return</span>;<span class="comment">//COUNT为要查找的前缀字符串数量</span></span><br><span class="line">    <span class="keyword">if</span> (node.isEnd &amp;&amp; !word.equals(word + path)) &#123;</span><br><span class="line">        res.add(word + path);</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;Character, Node&gt; entry : node.child.entrySet()) &#123;</span><br><span class="line">        node = entry.getValue();</span><br><span class="line">        path = path + entry.getKey();</span><br><span class="line">        dfs(word, node, res, path);</span><br><span class="line">        path = path.substring(<span class="number">0</span>, path.length() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="完整Java代码"><a href="#完整Java代码" class="headerlink" title="完整Java代码"></a>完整Java代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT</span> <span class="operator">=</span> <span class="number">10</span>;  <span class="comment">// 提示内容的最大数目</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">        Map&lt;Character,Node&gt; child;</span><br><span class="line">        <span class="type">boolean</span> isEnd;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">()</span>&#123;</span><br><span class="line">            child = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            isEnd = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Node root;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(!node.child.containsKey(c))&#123;</span><br><span class="line">                node.child.put(c,<span class="keyword">new</span> <span class="title class_">Node</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i==word.length()-<span class="number">1</span>)node.child.get(c).isEnd=<span class="literal">true</span>;</span><br><span class="line">            node = node.child.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(!node.child.containsKey(c))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            node = node.child.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node.isEnd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; prefix.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> prefix.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(!node.child.containsKey(c))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            node = node.child.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">searchprefix</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> root;    </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length();i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (!node.child.containsKey(c)) <span class="keyword">return</span> res;</span><br><span class="line">            node = node.child.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(word, node, res, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(String word, Node node, List&lt;String&gt; res, String path)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (cnt &gt;= COUNT) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.isEnd &amp;&amp; !word.equals(word + path)) &#123;</span><br><span class="line">            res.add(word + path);</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Character, Node&gt; entry : node.child.entrySet()) &#123;</span><br><span class="line">            node = entry.getValue();</span><br><span class="line">            path = path + entry.getKey();</span><br><span class="line">            dfs(word, node, res, path);</span><br><span class="line">            path = path.substring(<span class="number">0</span>, path.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">前缀树的简介以及前缀树的Java实现。</summary>
    
    
    
    <category term="数据结构" scheme="http://example.com/category/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://example.com/tag/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot跨域请求</title>
    <link href="http://example.com/post/1efeaa73.html"/>
    <id>http://example.com/post/1efeaa73.html</id>
    <published>2022-08-25T07:27:28.000Z</published>
    <updated>2022-08-25T10:22:29.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="跨域请求的概念"><a href="#跨域请求的概念" class="headerlink" title="跨域请求的概念"></a>跨域请求的概念</h1><p>浏览器出于安全的考虑，使用 <code>XMLHttpRequest</code>对象发起 HTTP请求时必须遵守同源策略，否则就是跨域的HTTP请求，<strong>默认情况下是被<font color="red">禁止</font>的</strong>。 </p><p><font color="red">同源策略</font>要求源相同才能正常进行通信，即<strong>协议、域名【或者是主机名】、端口号</strong>都完全一致。 </p><p>说通俗一点</p><ul><li>浏览器从一个域名的网页去请求另一个域名的资源时，<u>域名、端口、协议任一不同</u>，都是跨域</li><li>只要协议、域名、端口有任何一个不同，都被当作是不同的域，之间的请求就是跨域操作。</li></ul><p>例如：</p><table><thead><tr><th>前端</th><th>后端</th></tr></thead><tbody><tr><td><code>http://localost:8080</code></td><td><code>http://localhost:8081</code></td></tr></tbody></table><p>协议相同，主机名相同，但端口号不同。这就是跨域请求。</p><blockquote><p>注意</p><ul><li>只有浏览器才会有这个跨域请求的问题，如果是移动端跨域请求就不会出现问题。</li><li><code>XMLHttpRequest</code>对象就是<code>ajax</code>发送异步请求时使用的对象，所以也就是说浏览器使用<code>ajax</code>请求时才会出现跨域请求的问题。</li></ul><p>总得来说，发生跨域请求问题的场景就是：<strong>浏览器使用<code>ajax</code>请求</strong></p></blockquote><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>解决跨域请求有多种方案</p><p>我们可以使用<code>CORS</code>解决跨域。</p><h2 id="什么是CORS"><a href="#什么是CORS" class="headerlink" title="什么是CORS"></a>什么是<code>CORS</code></h2><p>​<code>CORS</code>是一个<code>W3C</code>标准，全称是”跨域资源共享”（Cross-origin resource sharing），允许浏览器向跨源服务器，发出<code>XMLHttpRequest</code>请求，从而克服了AJAX只能同源使用的限制。</p><p>​它通过服务器增加一个特殊的<code>Header[Access-Control-Allow-Origin]</code>来告诉客户端跨域的限制，如果浏览器支持<code>CORS</code>、并且判断Origin通过的话，就会允许<code>XMLHttpRequest</code>发起跨域请求。</p><p>如果是一个跨域请求，就会再发送一个带有<font color="red"><code>Origin</code></font>的请求头。里面的值就是<strong>这个页面所在的域</strong></p><p><img src="/%5Cimage%5Carticle%5CSpringBoot%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%5Cimage-20220825170142608.png" alt="image-20220825170142608"></p><p>发送给服务器之后，如果我们配置了跨域，响应头就会带有<font color="red"><code>Access-Control-Allow-Origin</code></font>，它的值表示<strong>服务器允许跨域的域</strong>，</p><p>如果该值和请求头的<code>Origin</code>值一样，则表示允许跨域。就会请求成功。</p><p><img src="/%5Cimage%5Carticle%5CSpringBoot%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%5Cimage-20220825170405785.png" alt="image-20220825170405785"></p><p>如果我们要自己使用<code>Cors</code>解决跨域请求的问题其实就是</p><p>解析请求头，然后去添加响应头就好了。但我们没必要自己去写，<code>SpringBoot</code>有这样的解决跨域请求的拦截器，只需要配置就可以。</p><blockquote><p>如果我们进行了<code>Cors</code>配置，但响应头中没有<code>Access-Control-Allow-Origin</code>，说明我们的配置是有问题的。</p></blockquote><h1 id="SpringBoot使用CORS解决跨域"><a href="#SpringBoot使用CORS解决跨域" class="headerlink" title="SpringBoot使用CORS解决跨域"></a>SpringBoot使用CORS解决跨域</h1><ul><li><p>使用<font color="gold"><code>@CrossOrigin</code></font></p><p>可以在支持跨域的<strong>方法</strong>上或者是<strong>Controller类</strong>上加上<font color="gold"><code>@CrossOrigin</code></font>注解</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServcie userServcie;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//调用service查询数据 ，进行返回</span></span><br><span class="line">        List&lt;User&gt; users = userServcie.findAll();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(<span class="number">200</span>,users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>value</code>属性可以设置多个URL。</p></li><li><p><code>origins</code>属性也可以设置多个URL。例如：<code>@CrossOrigin(origins = &quot;http://domain2.com&quot;, maxAge = 3600)</code></p></li><li><p><code>maxAge</code>属性指定了准备响应前的缓存持续的最大时间。就是探测请求的有效期。</p></li><li><p><code>allowCredentials</code>属性表示用户是否可以发送、处理 cookie。默认为false</p></li><li><p><code>allowedHeaders</code> 属性表示允许的请求头部有哪些。</p></li><li><p><code>methods</code> 属性表示允许请求的方法，默认get,post,head</p></li></ul><blockquote><p>如果你不设置他的<strong>value</strong>属性，或者是<strong>origins</strong>属性，就默认是可以允许所有的URL&#x2F;域访问。</p><p><font color="red">value和origins的效果是一样的，当value和origins同时使用时，配置的值不一样会报错!</font></p></blockquote></li><li><p>使用 <code>WebMvcConfigurer</code> 的 <code>addCorsMappings</code> 方法配置<code>CorsInterceptor</code></p><p>使用注解有一个缺陷，当我们的Controller类过多时，就需要频繁加注解。因此我们可以<strong>使用配置类才进行批量映射</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">      <span class="comment">// 设置允许跨域的路径</span></span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置允许跨域请求的域名</span></span><br><span class="line">                .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">// 是否允许cookie</span></span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">                <span class="comment">// 设置允许的请求方式</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;PUT&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置允许的header属性</span></span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">// 跨域允许时间</span></span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>addMapping(&quot;/user/**&quot;)</code>：其中* 表示匹配到下一层；** 表示后面不管有多少层，都能匹配。</p></li><li><p><code>allowedOriginPatterns(&quot;http:localhost:8080&quot;)</code>，只有<code>http:localhost:8080</code>可以访问。<code>*</code>表示任意域名</p></li><li><p><code>.maxAge(3600);</code>：</p><p>如果我们使用比较复杂的请求，比如<code>PUT</code>请求。</p><p>那这个请求它不是只发送一个请求，如果是跨域请求，浏览器会先发送一个询问允许我跨域请求的请求。如果服务端是允许的，就会再响应头中添加对应的响应头。</p><p>如果每次请求都发送一个询问请求那就会很浪费时间。</p><p>而<code>maxAge</code>相当于持久的时间。如果我们这个请求被允许了，那在3600秒之内，浏览器再去发送跨域请求，就不会再发送询问请求。</p></li></ul></li></ul><h1 id="当时使用SpringSecurity时"><a href="#当时使用SpringSecurity时" class="headerlink" title="当时使用SpringSecurity时"></a>当时使用SpringSecurity时</h1><p>当有跨域请求时，还得经过<code>SringSecurity</code>的过滤器，光靠<code>SpringBoot</code>是不行的，如果<code>SpringSecurity</code>是不允许跨域的还是不行。</p><p>因此还需要配置<code>SpringSecurity</code>来进行跨域请求。配置方法如下：<code>http.cors();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        http</span><br><span class="line">                <span class="comment">//关闭csrf</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="comment">//不通过Session获取SecurityContext</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 对于登录接口 允许匿名访问</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/login&quot;</span>).anonymous()</span><br><span class="line">                <span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">        http.cors();<span class="comment">//允许跨域请求</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">什么是跨域请求？如何解决跨域请求？当使用SpringSecurity是进行跨域请求配置。</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/category/Spring/"/>
    
    
    <category term="跨域请求" scheme="http://example.com/tag/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot静态资源配置</title>
    <link href="http://example.com/post/4c95c618.html"/>
    <id>http://example.com/post/4c95c618.html</id>
    <published>2022-08-24T12:42:15.000Z</published>
    <updated>2022-08-25T10:22:29.021Z</updated>
    
    <content type="html"><![CDATA[<p><code>SpringBoot</code>默认把静态资源文件放在<code>resource/static/</code>，默认的静态资源路径匹配为<code>/** </code>。</p><p>如果我们在<code>resource/static/</code>下放一张图片，启动<code>SpringBoot</code>后去访问它的话。访问路径为**<code>http://localhost:8080/1.png</code>**</p><p>我们可以放置的文件目录有：</p><ul><li><code>resources/static</code></li><li><code>resources/public</code></li><li><code>resources/resources</code> </li><li><code>resources/META-INF/resources</code></li></ul><h2 id="更改静态资源访问路径"><a href="#更改静态资源访问路径" class="headerlink" title="更改静态资源访问路径"></a>更改静态资源访问路径</h2><p>前面我们提到，默认的静态资源访问路径是<code>/**</code></p><p>我们可以通过配置文件来更改静态资源访问路径</p><p><strong>例如：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>资源放置目录</th><th>更改之前访问路径</th><th>更改之后访问路径</th></tr></thead><tbody><tr><td><code>resource/static/login.html</code></td><td><code>localhost:8080/login.html</code></td><td><code>localhost:8080/res/login.html</code></td></tr><tr><td><code>resource/static/page/index.html</code></td><td><code>localhost:8080/page/index.html</code></td><td><code>localhost:8080/res/page/index.html</code></td></tr></tbody></table><p>相当于多了一个前缀<code>/res/</code></p><h2 id="修改静态资源存放目录"><a href="#修改静态资源存放目录" class="headerlink" title="修改静态资源存放目录"></a>修改静态资源存放目录</h2><p>前面我们提到，静态资源只能存在以下目录。</p><ul><li><code>resources/static</code></li><li><code>resources/public</code></li><li><code>resources/resources</code> </li><li><code>resources/META-INF/resources</code></li></ul><p>当我们在<code>resources/</code>，创建了一个目录<code>data</code>【只要不是<code>static</code>、<code>public</code>、<code>resources</code>、<code>META_INF</code>就行】</p><p>把静态资源放在<code>/resouces/data/</code>目录下，启动<code>SpringBoot</code>是无法访问到的。</p><p>那我们想访问到怎么办？</p><p>修改配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">classpath:/data/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">classpath:/page/</span></span><br></pre></td></tr></table></figure><p>我们可以添加<strong>多个存放目录</strong>。</p><p>配置之前，<code>SpringBoot</code>它只知道<code>static</code>、<code>public</code>、<code>resources</code>、<code>META-INF/resources</code>这些目录下存放着静态文件。</p><p>配置之后，<code>SpringBoot</code>就知道了 除了<code>static</code>、<code>public</code>、<code>resources</code>、<code>META-INF/resources</code>这些目录下存放着静态文件。<code>data</code>、<code>page</code>这些目录也存放着静态文件。</p><p>当我们访问 <strong><code>/data/1.png</code><strong>文件时，访问路径是：</strong><code>http://localhost:8080/1.png</code></strong></p><h2 id="静态资源映射"><a href="#静态资源映射" class="headerlink" title="静态资源映射"></a>静态资源映射</h2><p>当我们进行如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">classpath:/data/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">classpath:/page/</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">访问目录</th><th align="center">访问路径</th></tr></thead><tbody><tr><td align="center"><code>/data/1.png</code></td><td align="center"><code>localhost:8080/res/1.png</code></td></tr><tr><td align="center"><code>/page/2.png</code></td><td align="center"><code>localhost:8080/res/2.png</code></td></tr></tbody></table><p>但，如果我们想<font color="red"><strong>实现如下效果</strong></font>：</p><table><thead><tr><th align="center">访问目录</th><th align="center">访问路径</th></tr></thead><tbody><tr><td align="center"><code>/data/1.png</code></td><td align="center"><code>localhost:8080/data/1.png</code></td></tr><tr><td align="center"><code>/page/2.png</code></td><td align="center"><code>localhost:8080/page/2.png</code></td></tr></tbody></table><p>那我们可以经过<font color="blue"><strong>配置类</strong></font>进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/data/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/data/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/page/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/page/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">更改静态资源访问路径,更改静态资源存放目录以及静态资源映射</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/category/Spring/"/>
    
    
    <category term="SpringBoot" scheme="http://example.com/tag/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>卷积神经网络featuremap的可视化</title>
    <link href="http://example.com/post/b3200ed2.html"/>
    <id>http://example.com/post/b3200ed2.html</id>
    <published>2022-08-24T09:48:47.000Z</published>
    <updated>2022-08-24T10:31:20.294Z</updated>
    
    <content type="html"><![CDATA[<p>所需要的Python的包：</p><ul><li>pytorch</li><li>matplotlib</li><li>opencv</li></ul><p>此次我们以LeNet进行举例</p><p>Lenet是一个 7 层的神经网络，包含 3 个卷积层，2 个池化层，1 个全连接层。其中所有卷积层的所有卷积核都为 5x5，步长 strid&#x3D;1，池化方法都为全局 pooling，激活函数为 Sigmoid，网络结构如下：</p><p><img src="/%5Cimage%5Carticle%5C%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9Cfeaturemap%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%5Cimage-20220824175322171.png" alt="image-20220824175322171"></p><p>下面我们就来可视化一下它的三个卷积层。</p><p>首先定义LeNet的网络结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LeNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(LeNet,self).__init__()</span><br><span class="line">        self.RELU = nn.ReLU()</span><br><span class="line">        self.conv1 = nn.Conv2d(in_channels=<span class="number">3</span>,out_channels=<span class="number">6</span>,kernel_size=(<span class="number">5</span>,<span class="number">5</span>),padding=(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">        self.Sigmoid = nn.Sigmoid()</span><br><span class="line">        self.avgpool = nn.AvgPool2d(kernel_size=(<span class="number">2</span>,<span class="number">2</span>),stride=<span class="number">2</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(in_channels=<span class="number">6</span>,out_channels=<span class="number">16</span>,kernel_size=(<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line">        self.avgpool2 = nn.AvgPool2d(kernel_size=(<span class="number">2</span>,<span class="number">2</span>),stride=(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">        self.conv3 = nn.Conv2d(in_channels=<span class="number">16</span>,out_channels=<span class="number">120</span>,kernel_size=(<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">        self.flatten = nn.Flatten()</span><br><span class="line">        self.line = nn.Linear(<span class="number">120</span>,<span class="number">84</span>)</span><br><span class="line">        self.output = nn.Sequential(</span><br><span class="line">            nn.Linear(in_features=<span class="number">84</span>,out_features=<span class="number">2</span>,bias=<span class="literal">False</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x = self.RELU(self.conv1(x))</span><br><span class="line">        x = self.avgpool(x)</span><br><span class="line">        x = self.RELU(self.conv2(x))</span><br><span class="line">        x = self.avgpool2(x)</span><br><span class="line">        x = self.conv3(x)</span><br><span class="line">        x = self.flatten(x)</span><br><span class="line">        x = self.line(x)</span><br><span class="line">        <span class="keyword">return</span> self.output(x)</span><br></pre></td></tr></table></figure><blockquote><p>结构是稍微有一些改变的，比如：</p><ul><li><p>激活函数我改用了RELU</p></li><li><p>输入层的通道数从单通道改为了三通道</p></li></ul><p>不过这些都问题不大，不影响我们去可视化。</p></blockquote><p>导包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> LeNet <span class="keyword">import</span> LeNet  <span class="comment">#我把网络结构的代码写到了LeNet.py，所以需要从另一个文件里导入</span></span><br></pre></td></tr></table></figure><p>首先我们需要初始化我们的网络模型，并加载之前训练好的权重文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">device = torch.device(<span class="string">&#x27;cuda&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line">model = LeNet().<span class="built_in">eval</span>()</span><br><span class="line">model.load_state_dict(torch.load(<span class="string">&quot;LeNet_model.pth&quot;</span>,map_location=<span class="string">&quot;cpu&quot;</span>))</span><br></pre></td></tr></table></figure><blockquote><p>注意，如果你的网络有BN层，<code>LeNet().eval()</code>是一定要加的，<code>.eval()</code>表示模型进入测试模式。</p></blockquote><p>定义两个列表容器，一个存卷积层的权重，一个存卷积层。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model_weights =[]</span><br><span class="line">conv_layers = []</span><br></pre></td></tr></table></figure><p>递归的遍历卷积神经网络，将卷积层和卷积层的权重存起来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getConv</span>(<span class="params">children</span>):</span><br><span class="line">    <span class="keyword">for</span> child <span class="keyword">in</span> children:</span><br><span class="line">        <span class="keyword">if</span> child.__class__.__name__ == <span class="string">&quot;Conv2d&quot;</span>:</span><br><span class="line">            model_weights.append(child.weight)</span><br><span class="line">            conv_layers.append(child)</span><br><span class="line">        <span class="keyword">elif</span> child.__class__.__name__==<span class="string">&quot;Sequential&quot;</span>:</span><br><span class="line">            getConv(child.children())</span><br><span class="line">getConv(model.children()) </span><br></pre></td></tr></table></figure><p>然后的步骤就类似于测试的步骤</p><ol><li><p>读取图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image = cv.imread(<span class="string">&quot;20160330_170504_473.jpg&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>对图片进行transform变换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">transform = transforms.Compose(</span><br><span class="line">            [</span><br><span class="line">                transforms.ToPILImage(),</span><br><span class="line">                transforms.Resize((<span class="number">28</span>,<span class="number">28</span>)),</span><br><span class="line">                transforms.ToTensor(),</span><br><span class="line">             ]</span><br><span class="line">        )</span><br><span class="line">transform_image = transform(image)</span><br></pre></td></tr></table></figure></li><li><p>由于transform_image 的维度是[3,28,28]的，我们要把他扩展成[1, 3, 28, 28]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = Variable(torch.unsqueeze(transform_image,dim=<span class="number">0</span>).<span class="built_in">float</span>(),requires_grad = <span class="literal">False</span>)</span><br></pre></td></tr></table></figure></li><li><p>利用之前的存起来的卷积层，对图片依次进行计算得到了featuremap，然后再依次存起来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">outputs = []</span><br><span class="line">names = []</span><br><span class="line"><span class="keyword">for</span> layer <span class="keyword">in</span> conv_layers:</span><br><span class="line">    x = layer(x)</span><br><span class="line">    outputs.append(x)</span><br><span class="line">    names.append(layer.__class__.__name__)</span><br></pre></td></tr></table></figure></li></ol><p>由于featuremap通道数并不是单通道，而是多通道的。我们可以把每个通道进行可视化，也可以将这些通道取平均，压缩为单通道。</p><ul><li><p>取平均，压缩为单通道**[建议压缩为单通道]**</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> output <span class="keyword">in</span> outputs:</span><br><span class="line">    output = output.squeeze(<span class="number">0</span>)</span><br><span class="line">    gray_scale = torch.<span class="built_in">sum</span>(output,<span class="number">0</span>)/output.shape[<span class="number">0</span>]</span><br><span class="line">    results.append(gray_scale.detach().numpy())</span><br></pre></td></tr></table></figure></li><li><p>存每一个通道</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> output <span class="keyword">in</span> outputs:</span><br><span class="line">    output = output.squeeze(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> feature <span class="keyword">in</span> output:</span><br><span class="line">        results.append(feature.detach().numpy())</span><br></pre></td></tr></table></figure></li></ul><p>最后就可以使用matplotlib可视化了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    plt.imshow(result)</span><br><span class="line">    <span class="comment">#plt.imshow(result,cmap=&quot;gray&quot;)</span></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p>结果：</p><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">原图</td><td align="center"><img src="/%5Cimage%5Carticle%5C%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9Cfeaturemap%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%5C20160330_170504_473.jpg" alt="20160330_170504_473"></td></tr><tr><td align="center">第一层featuremap</td><td align="center"><img src="\image\article\卷积神经网络featuremap的可视化\1.png" alt="1" style="zoom:50%;" /></td></tr><tr><td align="center">第二层featuremap</td><td align="center"><img src="\image\article\卷积神经网络featuremap的可视化\2.png" alt="2" style="zoom:50%;" /></td></tr><tr><td align="center">第三层featuremap</td><td align="center"><img src="\image\article\卷积神经网络featuremap的可视化\3.png" alt="3" style="zoom:50%;" /></td></tr></tbody></table><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> LeNet <span class="keyword">import</span> LeNet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getConv</span>(<span class="params">children</span>):</span><br><span class="line">    <span class="keyword">for</span> child <span class="keyword">in</span> children:</span><br><span class="line">        <span class="keyword">if</span> child.__class__.__name__ == <span class="string">&quot;Conv2d&quot;</span>:</span><br><span class="line">            model_weights.append(child.weight)</span><br><span class="line">            conv_layers.append(child)</span><br><span class="line">        <span class="keyword">elif</span> child.__class__.__name__==<span class="string">&quot;Sequential&quot;</span>:</span><br><span class="line">            getConv(child.children())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    device = torch.device(<span class="string">&#x27;cuda&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line">    model = LeNet().<span class="built_in">eval</span>()</span><br><span class="line">    model.load_state_dict(torch.load(<span class="string">&quot;LeNet_model.pth&quot;</span>,map_location=<span class="string">&quot;cpu&quot;</span>))</span><br><span class="line">    children = model.children()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    model_weights =[]</span><br><span class="line">    conv_layers = []</span><br><span class="line">    </span><br><span class="line">    getConv(children)</span><br><span class="line">    model.to(device)</span><br><span class="line">    transform = transforms.Compose(</span><br><span class="line">                [</span><br><span class="line">                    transforms.ToPILImage(),</span><br><span class="line">                    transforms.Resize((<span class="number">28</span>,<span class="number">28</span>)),</span><br><span class="line">                    transforms.ToTensor(),</span><br><span class="line">                 ]</span><br><span class="line">            )</span><br><span class="line">    image = cv.imread(<span class="string">&quot;20160330_170504_473.jpg&quot;</span>)</span><br><span class="line">    transform_image = transform(image)</span><br><span class="line">    x = Variable(torch.unsqueeze(transform_image,dim=<span class="number">0</span>).<span class="built_in">float</span>(),requires_grad = <span class="literal">False</span>)</span><br><span class="line">    outputs = []</span><br><span class="line">    names = []</span><br><span class="line">    <span class="keyword">for</span> layer <span class="keyword">in</span> conv_layers:</span><br><span class="line">        x = layer(x)</span><br><span class="line">        outputs.append(x)</span><br><span class="line">        names.append(layer.__class__.__name__)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> output <span class="keyword">in</span> outputs:</span><br><span class="line">        output = output.squeeze(<span class="number">0</span>)</span><br><span class="line">        gray_scale = torch.<span class="built_in">sum</span>(output,<span class="number">0</span>)/output.shape[<span class="number">0</span>]</span><br><span class="line">        results.append(gray_scale.detach().numpy())</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">        plt.imshow(result)</span><br><span class="line">        plt.show()</span><br></pre></td></tr></table></figure><p>还可以</p><p>应用于其他经典网络，比如Resnet、Alexnet、VGG等等。</p>]]></content>
    
    
    <summary type="html">神经网络对人们来说就像是一个黑箱子，并不知道其中提取了哪些特征，于是我们可以获取它的featuremap来进行可视化。以LeNet为例。</summary>
    
    
    
    <category term="Python" scheme="http://example.com/category/Python/"/>
    
    
    <category term="神经网络" scheme="http://example.com/tag/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合Mybatis-plus</title>
    <link href="http://example.com/post/c1b62771.html"/>
    <id>http://example.com/post/c1b62771.html</id>
    <published>2022-08-23T12:41:18.000Z</published>
    <updated>2022-08-24T10:31:20.285Z</updated>
    
    <content type="html"><![CDATA[<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><ul><li>mybatis-plus</li><li>mysql驱动</li><li>druid数据库连接池【可选】</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Druid数据库连接池，可以不加，使用默认的数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h3><ul><li><p>使用druid数据源</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/reggie?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure></li><li><p>使用默认数据源</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/reggie?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure></li></ul><p>当我们在Mapper包下创建接口时，为了表示此接口为Mapper接口。</p><p>有两种选择：</p><ul><li><p>在每个Mapper接口上使用<font color="gold"><strong>@Mapper</strong></font>注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在启动类上配置Mapper扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="设置表名的映射规则"><a href="#设置表名的映射规则" class="headerlink" title="设置表名的映射规则"></a>设置表名的映射规则</h3><p>默认情况下MP操作的表名就是实体类的类名，但是如果表名和类名不一致就需要我们自己设置映射规则。</p><p>如果不进行表名映射规则的设定，则需要<strong>数据库的表名</strong>和<strong>实体类名</strong>要保持一致。</p><p>如果不一致，有两种设置方法</p><ul><li><p>单独设置</p><p>可以在实体类的类名上加上<font color="gold"><strong>@TableName</strong></font>注解进行标识。</p><p>如果表名是tb_user，而实体类名是User则可以使用以下写法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>全局设置</p><p>如果数据库中的表，都有一个公共的前缀</p><blockquote><p>比如：</p><ul><li><p>数据库表：sys_user，sys_menu，sys_dish…</p></li><li><p>实体类：User，Menu，Dish</p></li></ul></blockquote><p>然后就可以在配置文件中，全局设置表名前缀</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment">#表名前缀</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">sys_</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="设置主键生成策略"><a href="#设置主键生成策略" class="headerlink" title="设置主键生成策略"></a>设置主键生成策略</h3><p>Mybatis Plus 为我们提供了三种设置 主键生成策略的方式。它们的优先级顺序是：局部注解 &gt; 全局 &gt; 默认(雪花算法)。</p><p>Mybatis Plus如果不做任何主键策略配置，<strong>默认使用的是雪花算法</strong>。该策略会根据雪花算法生成主键ID，主键类型为Long或String</p><ul><li><p>局部注解</p><p>我们可以在实体类的Id字段上使用<font color="gold">@TableId</font>注解，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"><span class="comment">//.....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全部主键策略定义在了枚举类<code>IdType</code>中，<code>IdType</code>有如下的取值</p><ul><li><p><code>AUTO</code></p><p>数据库ID自增，<strong>依赖于数据库</strong>。该类型请确保数据库设置了 ID自增 否则无效</p></li><li><p><code>NONE</code></p><p>未设置主键类型。若在代码中没有手动设置主键，则会根据<strong>主键的全局策略</strong>自动生成（默认的主键全局策略是基于雪花算法的自增ID）</p></li><li><p><code>INPUT</code></p><p>需要手动设置主键，若不设置。插入操作生成SQL语句时，主键这一列的值会是<code>null</code>。</p></li><li><p><code>ASSIGN_ID</code></p><p>当没有手动设置主键，即实体类中的主键属性为空时，才会自动填充，使用雪花算法</p></li><li><p><code>ASSIGN_UUID</code></p><p>当实体类的主键属性为空时，才会自动填充，使用UUID</p></li></ul></li><li><p>全局配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment"># id生成策略 auto为数据库自增</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="设置字段映射规则"><a href="#设置字段映射规则" class="headerlink" title="设置字段映射规则"></a>设置字段映射规则</h3><p>默认情况下MP会根据实体类的属性名去映射表的列名。</p><p>也就是说，在什么都不配置的情况下，<strong>实体类的属性名</strong>和<strong>映射表的列名</strong>必须一致。</p><p>如果不一致，可以使用<font color="gold"><code>@TableField</code></font>来设置映射关系。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(&quot;address&quot;)</span><span class="comment">//列名为address,字段名为addressStr</span></span><br><span class="line"><span class="keyword">private</span> String addressStr;</span><br></pre></td></tr></table></figure><h3 id="设置字段和列名的驼峰映射"><a href="#设置字段和列名的驼峰映射" class="headerlink" title="设置字段和列名的驼峰映射"></a>设置字段和列名的驼峰映射</h3><p><font color="red">默认情况</font>下MP会开启<strong>字段名列名的驼峰映射</strong>， 即从经典数据库列名 A_COLUMN（下划线命名） 到经典 Java 属性名 aColumn（驼峰命名） 的类似映射 。</p><table><thead><tr><th align="center">属性名&#x2F;类名</th><th align="center">列名&#x2F;表名</th></tr></thead><tbody><tr><td align="center">userName</td><td align="center">user_name</td></tr><tr><td align="center">passWord</td><td align="center">pass_word</td></tr></tbody></table><p>我们可以在配置文件中关闭这中映射</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>配置方式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># 日志</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">添加依赖，配置数据源、映射规则配置以及主键生成配置。</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/category/Spring/"/>
    
    
    <category term="Mybatis-plus" scheme="http://example.com/tag/Mybatis-plus/"/>
    
  </entry>
  
  <entry>
    <title>SpringSecurity配置类</title>
    <link href="http://example.com/post/627dc999.html"/>
    <id>http://example.com/post/627dc999.html</id>
    <published>2022-08-22T07:32:49.000Z</published>
    <updated>2022-08-22T12:28:51.386Z</updated>
    
    <content type="html"><![CDATA[<p>在学习这门课的时候，实现各种功能时进行了各种配置。我想将各种配置综合讲述一下。</p><p>首先自定义配置类，需要继承<code>WebSecurityConfigurerAdapter</code>这个类。</p><p>在这个类里面做了一些<strong>默认配置</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span>&#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font size=5><strong>更改<code>PasswordEncoder</code>的实现为<code>BCryptPasswordEncoder</code>。</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font size=5><strong>注入<code>AuthenticationManager</code>,用它的方法进行认证</strong></font></p><p><code>authenticationManager.authenticate()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="安全过滤器链配置方法HttpSecurity-http配置方法"><a href="#安全过滤器链配置方法HttpSecurity-http配置方法" class="headerlink" title="安全过滤器链配置方法HttpSecurity http配置方法"></a><code>安全过滤器链配置方法HttpSecurity http</code>配置方法</h2><h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="built_in">super</span>.configure(http);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>super.configure(http);</code>使用了父类中一些<font color="red"><strong>默认配置</strong></font>。查看源代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    ((HttpSecurity)((HttpSecurity)((AuthorizedUrl)http.authorizeRequests().anyRequest()).authenticated()</span><br><span class="line">                    .and()).</span><br><span class="line">     formLogin()</span><br><span class="line">     .and())</span><br><span class="line">    .httpBasic();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>http.authorizeRequests().anyRequest().authenticated()</code>表示<strong>对任何请求都要进行权限认证</strong></p><p><code>http.formLogin()</code>，加入了<code>UsernamePasswordAuthenticationFilter</code>过滤器。</p><p>默认配置：</p><ul><li>所有的请求访问都需要被授权。</li><li>使用 form 表单进行登陆(默认路径为&#x2F;login)，也就是前几篇我们见到的登录页。</li><li>防止 <code>CSRF</code> 攻击、<code>XSS</code>攻击。</li><li>启用 HTTP Basic 认证</li></ul><h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><p>关闭防止<code>csrf</code>攻击</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.csrf().disable()</span><br></pre></td></tr></table></figure><blockquote><p>为什么要关闭防止<code>csrf</code>攻击?</p><p><code>CSRF</code>是指跨站请求伪造（Cross-site request forgery），是web常见的攻击之一。</p><p>​<a href="https://blog.csdn.net/freeking101/article/details/86537087">https://blog.csdn.net/freeking101/article/details/86537087</a></p><p><code>SpringSecurity</code>去防止<code>CSRF</code>攻击的方式就是通过<code>csrf_token</code>。后端会生成一个<code>csrf_token</code>，前端发起请求的时候需要携带这个<code>csrf_token</code>,后端会有过滤器进行校验，如果没有携带或者是伪造的就不允许访问。</p><p>但是在前后端分离的项目中我们的认证信息其实是token，而token并不是存储中cookie中，并且需要前端代码去把token设置到请求头中才可以，所以<code>CSRF</code>攻击也就不用担心了。</p><p>因此使用token是天然防止<code>csrf</code>攻击的。</p></blockquote><p>不通过<code>Session</code>获取<code>SecurityContext</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br></pre></td></tr></table></figure><h3 id="权限配置"><a href="#权限配置" class="headerlink" title="权限配置"></a>权限配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/user/login&quot;</span>).anonymous()</span><br><span class="line">                        .anyRequest().authenticated();</span><br></pre></td></tr></table></figure><p>对于登录接口 允许匿名访问除上面外的所有请求全部需要鉴权认证</p><blockquote><p>参考链接：</p><p><a href="https://blog.csdn.net/qq_41865652/article/details/123685248">https://blog.csdn.net/qq_41865652/article/details/123685248</a></p><p><a href="https://blog.csdn.net/Shair911/article/details/104181917/">https://blog.csdn.net/Shair911/article/details/104181917/</a></p></blockquote><p><code>http.authorizeRequests()</code>主要是对<code>url</code>进行访问权限控制，通过这个方法来实现<code>url</code>授权操作。</p><ul><li><p><code>anyRequest()</code>，表示匹配所有的<code>url</code>请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http.authorizeRequests()</span><br><span class="line">        <span class="comment">// 匹配所有的请求，并且所有请求都需要登录认证</span></span><br><span class="line">        .anyRequest().authenticated();</span><br></pre></td></tr></table></figure></li><li><p><code>antMatcher(String regx)</code>，传递一个<code>ant</code>表达式参数，表示匹配所有满足<code>ant</code>表达式的请求</p><ul><li><p><strong>ant表达式中特殊字符解释</strong></p><table><thead><tr><th>规则</th><th>解释说明</th></tr></thead><tbody><tr><td>？</td><td>匹配一个字符</td></tr><tr><td>*</td><td>匹配0个或多个字符</td></tr><tr><td>**</td><td>匹配0个或多个目录</td></tr></tbody></table><p>配置类代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">http.authorizeRequests()</span><br><span class="line">        <span class="comment">// 允许登录页面匿名访问</span></span><br><span class="line">        .antMatchers(<span class="string">&quot;/showLogin&quot;</span>, <span class="string">&quot;/errPage&quot;</span>).anonymous()</span><br><span class="line">        <span class="comment">// 所有的静态资源允许匿名访问</span></span><br><span class="line">        .antMatchers(</span><br><span class="line">                <span class="string">&quot;/css/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/js/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/images/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/fonts/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/favicon.ico&quot;</span></span><br><span class="line">                ).anonymous()</span><br><span class="line">        <span class="comment">// 其他所有的请求都需要登录认证</span></span><br><span class="line">        .anyRequest().authenticated();</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>antMatcher(HttpMethod.*, String regx)</code>，传递一个请求方法类型参数加ant表达式参数，表示匹配所有满足ant表达式的指定请求方式的<code>url</code></p><p>请求方式的枚举类如下：</p><p><img src="/%5Cimage%5Carticle%5CSpringSecurity%E9%85%8D%E7%BD%AE%E7%B1%BB%5Cimage-20220822175402125.png" alt="image-20220822175402125"></p><p>配置类代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http.authorizeRequests()</span><br><span class="line">    <span class="comment">// 允许GET请求登录页面匿名访问</span></span><br><span class="line">    .antMatchers(HttpMethod.GET, <span class="string">&quot;/showLogin&quot;</span>, <span class="string">&quot;/errPage&quot;</span>).anonymous();</span><br></pre></td></tr></table></figure></li></ul><h3 id="访问控制方法"><a href="#访问控制方法" class="headerlink" title="访问控制方法"></a>访问控制方法</h3><table><thead><tr><th align="center">方法名称</th><th align="center">方法作用</th></tr></thead><tbody><tr><td align="center"><code>permitAll()</code></td><td align="center">表示所匹配的URL任何人都允许访问</td></tr><tr><td align="center"><code>anonymous()</code></td><td align="center">表示可以<strong>匿名访问</strong>匹配的URL。和<code>permitAll()</code>效果类似，只是设置为<code>anonymous()</code>的url会执行<code>filterChain</code>中的filter</td></tr><tr><td align="center"><code>denyAll()</code></td><td align="center">表示所匹配的URL都不允许被访问。</td></tr><tr><td align="center"><code>authenticated()</code></td><td align="center">表示所匹配的URL都需要被认证才能访问</td></tr><tr><td align="center"><code>rememberMe()</code></td><td align="center">允许通过remember-me登录的用户访问</td></tr><tr><td align="center"><code>access()</code></td><td align="center"><code>SpringEl</code>表达式结果为true时可以访问</td></tr><tr><td align="center"><code>fullyAuthenticated()</code></td><td align="center">用户完全认证可以访问（非remember-me下自动登录）</td></tr><tr><td align="center"><code>hasRole()</code></td><td align="center">如果有参数，参数表示角色，则其角色可以访问</td></tr><tr><td align="center"><code>hasAnyRole()</code></td><td align="center">如果有参数，参数表示角色，则其中任何一个角色可以访问</td></tr><tr><td align="center"><code>hasAuthority()</code></td><td align="center">如果有参数，参数表示权限，则其权限可以访问</td></tr><tr><td align="center"><code>hasAnyAuthority()</code></td><td align="center">如果有参数，参数表示权限，则其中任何一个权限可以访问</td></tr><tr><td align="center"><code>hasIpAddress()</code></td><td align="center">如果有参数，参数表示<code>IP</code>地址，如果用户<code>IP</code>和参数匹配，则可以访问</td></tr></tbody></table><p>配置案例示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//任何用户都可以访问</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/index&quot;</span>).permitAll();</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/index&quot;</span>).access(<span class="string">&quot;permitAll&quot;</span>);]</span><br><span class="line"></span><br><span class="line"><span class="comment">//任何用户都不能访问</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/home&quot;</span>).denyAll();</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/home&quot;</span>).access(<span class="string">&quot;denyAll&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//认证用户可以访问（除了匿名认证）</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).authenticated();</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).access(<span class="string">&quot;authenticated&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//认证用户可以访问（除了匿名认证，记住我）</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).fullyAuthenticated();</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).access(<span class="string">&quot;fullyAuthenticated&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//记住我的认证可以访问</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).rememberMe();</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).access(<span class="string">&quot;rememberMe&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名用户可以访问</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).anonymous();</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).access(<span class="string">&quot;anonymous&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否有权限</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/index&quot;</span>).hasAuthority(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/index&quot;</span>).access(<span class="string">&quot;hasAuthority(&#x27;user&#x27;)&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否有任意一个权限</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/home&quot;</span>).hasAnyAuthority(<span class="string">&quot;update&quot;</span>, <span class="string">&quot;delete&quot;</span>, <span class="string">&quot;insert&quot;</span>);</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/home&quot;</span>).access(<span class="string">&quot;hasAnyAuthority(&#x27;update&#x27;,&#x27;delete&#x27;,&#x27;insert&#x27;)&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//spring security中的role并非是一个或多个权限的集合，而是权限的一种，通常以ROLE_开头</span></span><br><span class="line"><span class="comment">//role就是ROLE_开头的权限</span></span><br><span class="line"><span class="comment">//注意：hasRole、hasAnyRole里面的role不需要以ROLE_开头，否则会报异常</span></span><br><span class="line"><span class="comment">//注意：如果在access里面使用hasRole、hasAnyRole则ROLE_前缀可加，可不加</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/index&quot;</span>).hasRole(<span class="string">&quot;GUEST&quot;</span>);</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/index&quot;</span>).access(<span class="string">&quot;hasRole(&#x27;GUEST&#x27;)&quot;</span>);</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).hasAuthority(<span class="string">&quot;ROLE_GUEST&quot;</span>);</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/home&quot;</span>).hasAnyRole(<span class="string">&quot;GUEST&quot;</span>, <span class="string">&quot;USER&quot;</span>, <span class="string">&quot;ADMIN&quot;</span>);</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/home&quot;</span>).access(<span class="string">&quot;hasAnyRole(&#x27;ROLE_GUEST&#x27;,&#x27;ROLE_USER&#x27;,&#x27;ROLE_ADMIN&#x27;)&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="添加过滤器到过滤器链"><a href="#添加过滤器到过滤器链" class="headerlink" title="添加过滤器到过滤器链"></a>添加过滤器到过滤器链</h3><p>先将获取过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br></pre></td></tr></table></figure><p>然后配置到过滤器链中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line"><span class="comment">//将jwtAuthenticationTokenFilter 过滤器放到UsernamePasswordAuthenticationFilter过滤器前。</span></span><br></pre></td></tr></table></figure><ul><li><p><code>addFilterBefore()</code>：将过滤器放到 **过滤器之前。</p></li><li><p><code>addFilter()</code>：将过滤器放到过滤器链最后。</p></li><li><p><code>addFilterAfter()</code>：将过滤器放到 **过滤器之后。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.addFilterAfter(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line"><span class="comment">//将jwtAuthenticationTokenFilter 过滤器放到UsernamePasswordAuthenticationFilter过滤器后。</span></span><br></pre></td></tr></table></figure></li><li><p><code>addFilterAt</code>：将过滤器放在**过滤的位置。并不是取代。</p></li></ul><h3 id="配置异常处理器"><a href="#配置异常处理器" class="headerlink" title="配置异常处理器"></a>配置异常处理器</h3><p>先获取异常处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AuthenticationEntryPoint authenticationEntryPoint;</span><br></pre></td></tr></table></figure><p>然后进行配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.exceptionHandling().authenticationEntryPoint(authenticationEntryPoint)</span><br><span class="line">        .accessDeniedHandler(accessDeniedHandler);</span><br></pre></td></tr></table></figure><h3 id="表单登录配置"><a href="#表单登录配置" class="headerlink" title="表单登录配置"></a>表单登录配置</h3><p>取消默认的自带的表单登录配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.formLogin().disable();</span><br></pre></td></tr></table></figure><p>配置演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception  &#123;</span><br><span class="line">http</span><br><span class="line">.formLogin()<span class="comment">//开启formLogin默认配置        </span></span><br><span class="line">.loginPage(<span class="string">&quot;/login/auth&quot;</span>).permitAll()<span class="comment">//请求时未登录跳转接口</span></span><br><span class="line">                .failureUrl(<span class="string">&quot;/login/fail&quot;</span>)<span class="comment">//用户密码错误跳转接口</span></span><br><span class="line">.defaultSuccessUrl(<span class="string">&quot;/login/success&quot;</span>,<span class="literal">true</span>)<span class="comment">//登录成功跳转接口</span></span><br><span class="line">.loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)<span class="comment">//post登录接口，登录验证由系统实现</span></span><br><span class="line">.usernameParameter(<span class="string">&quot;username&quot;</span>)<span class="comment">//要认证的用户参数名，默认username</span></span><br><span class="line">.passwordParameter(<span class="string">&quot;password&quot;</span>)<span class="comment">//要认证的密码参数名，默认password</span></span><br><span class="line">.and()</span><br><span class="line">.logout()<span class="comment">//配置注销</span></span><br><span class="line">.logoutUrl(<span class="string">&quot;/logout&quot;</span>)<span class="comment">//注销接口</span></span><br><span class="line">.logoutSuccessUrl(<span class="string">&quot;/login/logout&quot;</span>).permitAll()<span class="comment">//注销成功跳转接口</span></span><br><span class="line">.deleteCookies(<span class="string">&quot;myCookie&quot;</span>) <span class="comment">//删除自定义的cookie</span></span><br><span class="line">.and()</span><br><span class="line">.csrf().disable();           <span class="comment">//禁用csrf</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>formLogin()</code>就会添加如下过滤器</p><ul><li><code>UsernamePasswordAuthenticationFilter</code></li><li><code>DefaultLoginPageGeneratingFilter</code></li><li><code>DefaultLogoutPageGeneratingFilter</code></li></ul><p><strong>添加认证成功处理器和认证失败处理器</strong></p><p>先获取认证成功处理器和认证失败处理器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AuthenticationSuccessHandler successHandler;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AuthenticationFailureHandler failureHandler;</span><br></pre></td></tr></table></figure><p>然后再进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> http.formLogin()</span><br><span class="line"><span class="comment">//                配置认证成功处理器</span></span><br><span class="line">      .successHandler(successHandler)</span><br><span class="line"><span class="comment">//                配置认证失败处理器</span></span><br><span class="line">      .failureHandler(failureHandler);</span><br></pre></td></tr></table></figure><h1 id="总的配置代码"><a href="#总的配置代码" class="headerlink" title="总的配置代码"></a>总的配置代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationEntryPoint authenticationEntryPoint;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        http</span><br><span class="line">                <span class="comment">//关闭csrf</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="comment">//不通过Session获取SecurityContext</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 对于登录接口 允许匿名访问</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/login&quot;</span>).anonymous()</span><br><span class="line">                <span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置异常处理器。</span></span><br><span class="line">        http.exceptionHandling().authenticationEntryPoint(authenticationEntryPoint)</span><br><span class="line">                .accessDeniedHandler(accessDeniedHandler);</span><br><span class="line"></span><br><span class="line">        http.authorizeRequests().antMatchers().hasAuthority(<span class="string">&quot;system:test:index&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">在学习 三更老师 的SpringSecurity课程后所做的配置类的笔记综述</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/category/Spring/"/>
    
    
    <category term="Spring-Security" scheme="http://example.com/tag/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>SpringSecurity其他认证方案</title>
    <link href="http://example.com/post/6c46e8af.html"/>
    <id>http://example.com/post/6c46e8af.html</id>
    <published>2022-08-22T07:32:32.000Z</published>
    <updated>2022-08-22T12:25:41.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="之前的认证方案"><a href="#之前的认证方案" class="headerlink" title="之前的认证方案"></a>之前的认证方案</h1><p>回顾一下之前的认证方案</p><p>我们的认证是自定义了一个认证处理器<code>JwtAuthenticationTokenFilter</code>，并把他加在了<code>UsernamePasswordAuthenticationFilter</code>过滤器的前面。<font color="red"><strong>在过滤器链中我们去掉了<code>UsernamePasswordAuthenticationFilter</code></strong></font></p><p>登录认证的过程是：</p><ol><li><p>先经过<code>JwtAuthenticationTokenFilter</code>，查看token。</p></li><li><p>token为null放行。</p></li><li><p>然后进入登录接口<code>/user/login</code>，然后调用了Service层的<code>LoginService</code>。</p></li><li><p>在<code>LoginServiceImpl</code>里，实现了<strong>认证过程</strong>。</p><p>调用<code>authenticationManager.authenticate()</code>方法进行认证。</p><ul><li>认证成功【<code>UsernamePasswordAuthenticationToken!=null</code>】</li></ul><blockquote><ol><li><code>UsernamePasswordAuthenticationToken</code>中获取<code>UserDetails</code>的实现类<code>LoginUser</code>。</li><li>从<code>Loginuser</code>中获取<code>UserId</code>。</li><li>使用<code>Jwt</code>工具类加密<code>userId</code>生成<code>token</code>。</li><li>将<code>Loginuser</code>存储到<code>redis</code>中。</li><li>将<code>token</code>封装成响应体返回给前端。</li></ol></blockquote><ul><li>认证失败【<code>UsernamePasswordAuthenticationToken==null</code>】</li></ul><blockquote><p>抛出异常。<code>throw new RuntimeException(&quot;用户名或密码错误&quot;);</code></p></blockquote></li></ol><p><strong>注意：我们没有使用<code>UsernamePasswordAuthenticationFilter</code></strong></p><h1 id="另一种认证方案"><a href="#另一种认证方案" class="headerlink" title="另一种认证方案"></a>另一种认证方案</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>我们将<strong>认证成功处理的内容</strong> 和 <strong>认证失败处理的内容</strong>都放在了<code>LoginServiceImpl</code>。</p><p>而实际上<code>UsernamePasswordAuthenticationFilter</code>过滤器，里面自带了认证成功处理器和认证失败处理器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsernamePasswordAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title class_">AbstractAuthenticationProcessingFilter</span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p><code>UsernamePasswordAuthenticationFilter</code>继承了一个抽象的父类<code>AbstractAuthenticationProcessingFilter</code>。</p><p>我们来看一看其中的<code>doFilter</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractAuthenticationProcessingFilter</span> <span class="keyword">extends</span> <span class="title class_">GenericFilterBean</span> <span class="keyword">implements</span> <span class="title class_">ApplicationEventPublisherAware</span>, MessageSourceAware &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">AuthenticationSuccessHandler</span> <span class="variable">successHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SavedRequestAwareAuthenticationSuccessHandler</span>();  <span class="comment">//默认的认证成功处理器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">AuthenticationFailureHandler</span> <span class="variable">failureHandler</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line"> <span class="title class_">SimpleUrlAuthenticationFailureHandler</span>();<span class="comment">//默认的认证失败处理器。</span></span><br><span class="line">   <span class="comment">//.....</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest)req;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse)res;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.requiresAuthentication(request, response)) &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">                <span class="built_in">this</span>.logger.debug(<span class="string">&quot;Request is to process authentication&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Authentication authResult;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                authResult = <span class="built_in">this</span>.attemptAuthentication(request, response);<span class="comment">//获取用户信息Authentication</span></span><br><span class="line">                <span class="keyword">if</span> (authResult == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">this</span>.sessionStrategy.onAuthentication(authResult, request, response);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InternalAuthenticationServiceException var8) &#123;<span class="comment">//发生异常---&gt;认证失败</span></span><br><span class="line">                <span class="built_in">this</span>.logger.error(<span class="string">&quot;An internal error occurred while trying to authenticate the user.&quot;</span>, var8);</span><br><span class="line">                <span class="built_in">this</span>.unsuccessfulAuthentication(request, response, var8);<span class="comment">//调用了认证失败处理方法。</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (AuthenticationException var9) &#123;<span class="comment">//发生异常---&gt;认证失败</span></span><br><span class="line">                <span class="built_in">this</span>.unsuccessfulAuthentication(request, response, var9);<span class="comment">//调用了认证失败处理方法。</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.continueChainBeforeSuccessfulAuthentication) &#123;</span><br><span class="line">                chain.doFilter(request, response);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//能运行到这说明认证成功了</span></span><br><span class="line">            <span class="built_in">this</span>.successfulAuthentication(request, response, chain, authResult);<span class="comment">//调用认证成功处理方法。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//successfulAuthentication  认证成功处理方法</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">successfulAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">       <span class="comment">//省略...</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.successHandler.onAuthenticationSuccess(request, response, authResult);<span class="comment">//调用了认证成功处理器的处理方法。</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//unsuccessfulAuthentication 认证失败处理方法。</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">unsuccessfulAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//省略...</span></span><br><span class="line">        <span class="built_in">this</span>.failureHandler.onAuthenticationFailure(request, response, failed);<span class="comment">//调用了认证失败处理器的处理方法。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>private AuthenticationSuccessHandler successHandler</code>认证成功处理器<strong>接口</strong></li><li><code>private AuthenticationFailureHandler failureHandler</code>认证失败处理器<strong>接口</strong></li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>实际上在<code>UsernamePasswordAuthenticationFilte</code>r进行登录认证的时候</p><ul><li>如果登录成功了是会调用<code>AuthenticationSuccessHandle</code>r的方法进行认证成功后的处理的。<code>AuthenticationSuccessHandler</code>就是登录成功处理器。</li><li>如果认证失败了是会调用<code>AuthenticationFailureHandler</code>的方法进行认证失败后的处理的。<code>AuthenticationFailureHandler</code>就是登录失败处理器。</li></ul><p>因此</p><p><img src="/%5Cimage%5Carticle%5CSpringSecurity%E5%85%B6%E4%BB%96%E8%AE%A4%E8%AF%81%E6%96%B9%E6%A1%88%5Cimage-20220822165028412.png" alt="image-20220822165028412"></p><p>自定义<strong>认证成功处理器</strong> </p><ol><li>实现接口<code>AuthenticationSuccessHandler</code></li><li>注入Spring容器</li><li>撰写方法体</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SGSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationSuccessHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;认证成功了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义<strong>认证失败处理器</strong> </p><ol><li>实现接口<code>AuthenticationFailureHandler</code></li><li>注入Spring容器</li><li>撰写方法体</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SGFailureHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationFailureHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后使用配置类进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationSuccessHandler successHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationFailureHandler failureHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.formLogin()</span><br><span class="line"><span class="comment">//                配置认证成功处理器</span></span><br><span class="line">                .successHandler(successHandler)</span><br><span class="line"><span class="comment">//                配置认证失败处理器</span></span><br><span class="line">                .failureHandler(failureHandler);</span><br><span class="line"></span><br><span class="line">        http.authorizeRequests().anyRequest().authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="登出成功处理器【了解一下即可】"><a href="#登出成功处理器【了解一下即可】" class="headerlink" title="登出成功处理器【了解一下即可】"></a>登出成功处理器【了解一下即可】</h1><p>自定义<strong>登出成功处理器</strong> </p><ol><li>实现接口<code>AuthenticationFailureHandler</code></li><li>注入Spring容器</li><li>撰写方法体</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SGLogoutSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">LogoutSuccessHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLogoutSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;注销成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http.logout()</span><br><span class="line">          <span class="comment">//配置注销成功处理器</span></span><br><span class="line">          .logoutSuccessHandler(logoutSuccessHandler);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">认证成功处理器，认证失败处理器，登出处理器.</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/category/Spring/"/>
    
    
    <category term="Spring-Security" scheme="http://example.com/tag/Spring-Security/"/>
    
  </entry>
  
</feed>
