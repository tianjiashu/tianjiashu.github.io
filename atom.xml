<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucky Dog&#39;s blogs</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-31T11:02:15.514Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安装ssh连接工具</title>
    <link href="http://example.com/post/bea0af19.html"/>
    <id>http://example.com/post/bea0af19.html</id>
    <published>2022-07-31T09:09:15.000Z</published>
    <updated>2022-07-31T11:02:15.514Z</updated>
    
    <content type="html"><![CDATA[<p>通过SSH连接工具可以实现从本地连接到远程LInux服务器。</p><p>安装SSH连接工具，使用的是FinalShell </p><p> <strong>百度云盘链接</strong>【很简单…】：  </p><p>首先必须知道服务器的 <code>IP地址</code></p><p>打开FinalShell，按如下步骤点击，然后再点SHH连接</p><img src="/image/article/安装ssh连接工具/image-20220731171653824.png" alt="image-20220731171653824" style="zoom:60%;" /><p>填入如下信息</p><img src="/image/article/安装ssh连接工具/image-20220731171908861.png" alt="image-20220731171908861" style="zoom:67%;" /><p>然后就配置完成了</p><img src="/image/article/安装ssh连接工具/image-20220731172831473.png" alt="image-20220731172831473" style="zoom:50%;" /><p>初次登录会弹出如下提示框，直接<code>接受并保存</code>即可。</p><img src="/image/article/安装ssh连接工具/image-20220731172744258.png" alt="image-20220731172744258" style="zoom:70%;" /><p>如果连接失败，有可能是你IP地址填的不对。</p>]]></content>
    
    
    <summary type="html">ssh连接工具的安装</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/category/Linux/"/>
    
    
    <category term="Linux虚拟机" scheme="http://example.com/tag/Linux%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Linux虚拟机网卡设置问题</title>
    <link href="http://example.com/post/3ca46669.html"/>
    <id>http://example.com/post/3ca46669.html</id>
    <published>2022-07-31T08:38:19.000Z</published>
    <updated>2022-07-31T10:53:09.208Z</updated>
    
    <content type="html"><![CDATA[<p>安装Linux虚拟机完成之后，进入linux界面。</p><p>由于启动服务器时，未加载网卡，导致IP地址初始化失败。</p><p>在Linux命令行输入：<code>ip addr</code></p><p><img src="/image/article/Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E5%8D%A1%E8%AE%BE%E7%BD%AE%E9%97%AE%E9%A2%98/image-20220731164052203.png" alt="image-20220731164052203"></p><h1 id="网卡设置"><a href="#网卡设置" class="headerlink" title="网卡设置"></a>网卡设置</h1><p>修改网络初始化配置，设定网卡在系统启动时初始化。依次输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /<span class="comment">#进入根目录</span></span><br><span class="line"><span class="built_in">cd</span> etc<span class="comment">#进入etc目录</span></span><br><span class="line"><span class="built_in">cd</span> sysconfig<span class="comment">#进入sysconfig目录</span></span><br><span class="line"><span class="built_in">cd</span> network-scripts<span class="comment">#进入network-scripts</span></span><br><span class="line">vi ifcfg-ens33<span class="comment">#编辑ifcfg-ens33文件</span></span><br></pre></td></tr></table></figure><p>进入编辑vim界面，按 <code>i</code> 进入编辑界面。移动光标，修改配置文件。</p><p><img src="/image/article/Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E5%8D%A1%E8%AE%BE%E7%BD%AE%E9%97%AE%E9%A2%98/image-20220731164915361.png" alt="image-20220731164915361"></p><p>然后按 <code>Esc</code> ，输入<code>:wq</code> ，【注意 **:**】，然后回车。</p><p>然后<font color="red"><strong>重启</strong></font>…</p><p>再一次在Linux命令行输入：<code>ip addr</code>，就能看见IP地址了</p><p><img src="/image/article/Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E5%8D%A1%E8%AE%BE%E7%BD%AE%E9%97%AE%E9%A2%98/image-20220731165821505.png" alt="image-20220731165821505"></p>]]></content>
    
    
    <summary type="html">网卡设置</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/category/Linux/"/>
    
    
    <category term="Linux虚拟机" scheme="http://example.com/tag/Linux%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Linux虚拟机安装教程</title>
    <link href="http://example.com/post/afd438ef.html"/>
    <id>http://example.com/post/afd438ef.html</id>
    <published>2022-07-31T07:43:58.000Z</published>
    <updated>2022-07-31T11:00:28.173Z</updated>
    
    <content type="html"><![CDATA[<p>首先下载CentOS资源镜像，和VMware安装包。</p><blockquote><p>VMware安装包：</p><p>链接：<a href="https://pan.baidu.com/s/15qfb0UVonxJ3_y7BPvLHCQ">https://pan.baidu.com/s/15qfb0UVonxJ3_y7BPvLHCQ</a><br>提取码：lohr</p></blockquote><p>VMware安装好之后打开，然后点击创建新的虚拟机。</p><img src="/image/article/Linux虚拟机安装教程/image-20220731154931073.png" alt="image-20220731154931073" style="zoom:67%;" /><p>点击进行下一步，（一般是默认第一个的，看自己所需也可以选择第二个的）</p><img src="/image/article/Linux虚拟机安装教程/image-20220731155019296.png" alt="image-20220731155019296" style="zoom:67%;" /><p>接着安装操作系统，默认就可以，然后下一步</p><img src="/image/article/Linux虚拟机安装教程/image-20220731155101653.png" alt="image-20220731155101653" style="zoom:67%;" /><p>然后选在操作系统，在这里我们选择Linux，然后版本选择centos 64</p><img src="/image/article/Linux虚拟机安装教程/image-20220731155151860.png" alt="image-20220731155151860" style="zoom:67%;" /><p>接下来自定义虚拟机的名字，和安装途径，一般安装在空间大的盘</p><img src="/image/article/Linux虚拟机安装教程/image-20220731155231678.png" alt="image-20220731155231678" style="zoom:67%;" /><p>调整虚拟机的磁盘空间大小，一般默认20G，然后下一步</p><img src="/image/article/Linux虚拟机安装教程/image-20220731155317312.png" alt="image-20220731155317312" style="zoom:67%;" /><p>点击<strong>自定义硬件</strong></p><img src="/image/article/Linux虚拟机安装教程/image-20220731155415787.png" alt="image-20220731155415787" style="zoom:67%;" /><p>然后这里选在ISO镜像文件，没有的可以在链接里下载，然后浏览位置使用。最后点关闭就可以。</p><img src="/image/article/Linux虚拟机安装教程/image-20220731155538292.png" alt="image-20220731155538292" style="zoom:67%;" /><p>点击完成就完成了虚拟机的创建</p><img src="/image/article/Linux虚拟机安装教程/image-20220731161520167.png" alt="image-20220731161520167" style="zoom:67%;" /><p>然后打开这个虚拟机，用键盘方向键选择Install CentOS7,然后回车【它也会自己进入】</p><p><img src="/image/article/Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/image-20220731161616516.png" alt="image-20220731161616516"></p><p>等待进入选择语言界面，选择中文，简体中文。</p><p>系统安装媒介选择</p><img src="/image/article/Linux虚拟机安装教程/image-20220731162146832.png" alt="image-20220731162146832" style="zoom:67%;" /><img src="/image/article/Linux虚拟机安装教程/image-20220731162226725.png" alt="image-20220731162226725" style="zoom:67%;" /><p>然后点击<code>开始安装</code>,然后就进入了安装界面，在此界面设置root密码。设置完成后，点左上角的<code>完成</code>，就又会返回。</p><img src="/image/article/Linux虚拟机安装教程/image-20220731162340115.png" alt="image-20220731162340115" style="zoom:67%;" /><p>等待安装完成即可。安装完成之后重启就好了。</p><p>另外:</p><p>我们在虚拟机的时候，鼠标光标在linux虚拟机里“出不来”，可以使用<code>Ctrl+Alt</code>脱离出来。</p>]]></content>
    
    
    <summary type="html">Linux虚拟机安装教程</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/category/Linux/"/>
    
    
    <category term="Linux虚拟机" scheme="http://example.com/tag/Linux%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cache入门</title>
    <link href="http://example.com/post/f69f1cc4.html"/>
    <id>http://example.com/post/f69f1cc4.html</id>
    <published>2022-07-30T08:38:15.000Z</published>
    <updated>2022-07-31T07:15:49.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cahe介绍"><a href="#Spring-Cahe介绍" class="headerlink" title="Spring Cahe介绍"></a>Spring Cahe介绍</h1><p><code>Spring Cache</code> 是一个框架，实现了<strong>基于注解</strong>的缓存功能，只需要简单地加一个注解，就能实现缓存功能。<br><code>Spring Cahce</code> 提供了一层抽象，底层可以切换不同的 cache 实现。具体就是通过<code>CacheManager</code>接口来统一不同的缓存技术。<br>CacheManager 是 Spring 提供的各种缓存技术抽象接口<br>针对不同的缓存技术需要实现不同的 CacheManager:</p><table><thead><tr><th align="center"><strong>CacheManager</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">EnCacheCacheManager</td><td align="center">使用 EhCache 作为缓存技术</td></tr><tr><td align="center">GuavaCacheManager</td><td align="center">使用 Google 的 GuavaCache 作为缓存技术</td></tr><tr><td align="center">RedisCachemanager</td><td align="center">使用 Redis 作为缓存技术</td></tr></tbody></table><p>目前使用Redis缓存技术…</p><h1 id="Spring-Cache注解"><a href="#Spring-Cache注解" class="headerlink" title="Spring Cache注解"></a>Spring Cache注解</h1><table><thead><tr><th align="center">注解</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><font color="gold"><strong>@EnableCaching</strong></font></td><td align="center">开启缓存注解功能【使用在Spring Boot启动类上】</td></tr><tr><td align="center"><font color="gold"><strong>@Cacheable</strong></font></td><td align="center">在方法执行前 spring 先查看缓存中是否有数据，如果有数据，则直接返回缓存数据；若没有数据，调用方法并将方法返回值放到缓存中</td></tr><tr><td align="center"><font color="gold"><strong>@CachePut</strong></font></td><td align="center">将方法的返回值放到缓存中</td></tr><tr><td align="center"><font color="gold"><strong>@CacheEvict</strong></font></td><td align="center">将一条或多条数据从缓存中删除</td></tr></tbody></table><p><font color="gold"><strong>@Cacheable</strong></font>、<font color="gold"><strong>@CachePut</strong></font>、<font color="gold"><strong>@CacheEvict</strong></font>注解是使用在方法上面的。主要有以下的参数可以将要缓存的数据进行过滤和配置。主要参数如下：</p><table><thead><tr><th align="center">参数名称</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">缓存的名称，必须指定最少一个，一个value可以对应多个key</td></tr><tr><td align="center">key</td><td align="center">缓存的key,按照SpEL表达式编写</td></tr><tr><td align="center">condition</td><td align="center">缓存的条件，可以为空，使用<strong>SpEL</strong>编写，返回true或者false，只有为true才进行缓存&#x2F;清除缓存，在调用方法之前之后都能判断</td></tr><tr><td align="center">unless(<font color="gold"><strong>@Cacheable</strong></font>、<font color="gold"><strong>@CachePut</strong></font>)</td><td align="center">用于否决缓存的，不像condition，该表达式只在方法执行之后判断，此时可以拿到返回值result进行判断。条件为true不会缓存，fasle才缓存</td></tr><tr><td align="center">allEntries     (<font color="gold"><strong>@CacheEvict</strong></font>)</td><td align="center">是否清空所有缓存内容，缺省为false，如果指定为true，则方法调用后将立即清空所有缓存</td></tr><tr><td align="center">beforeInvocation (<font color="gold"><strong>@CacheEvict</strong></font>)</td><td align="center">是否在方法执行前就清空，缺省为false，如果指定为true，则在方法还没有执行的时候就清空缓存，缺省情况下，如果方法执行抛出异常，则不会清空缓存</td></tr></tbody></table><p><strong>将返回值放入缓存的过程中，若没有unless或condition参数，如果返回值为null，也会放入缓存</strong></p><h1 id="SpringBoot缓存设置"><a href="#SpringBoot缓存设置" class="headerlink" title="SpringBoot缓存设置"></a>SpringBoot缓存设置</h1><p>可以使用redis作为缓存，也可以不使用外部缓存</p><h2 id="不用外部缓存"><a href="#不用外部缓存" class="headerlink" title="不用外部缓存"></a>不用外部缓存</h2><p>导入maven坐标<code>spring-boot-starter-web</code>即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color="red"><strong>底层</strong></font>默认使用的是<code>private final ConcurrentMap&lt;String, Cache&gt; cacheMap = new ConcurrentHashMap&lt;&gt;(16);</code>可以看出底层是Map。</p><h2 id="使用reids作为缓存"><a href="#使用reids作为缓存" class="headerlink" title="使用reids作为缓存"></a>使用reids作为缓存</h2><p><strong>在以上的基础上</strong>，再导入maven坐标<code>spring-boot-starter-cache</code>和<code>spring-boot-starter-data-redis</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置Spring Boot的配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span>   </span><br><span class="line">    <span class="comment">#password: 123456</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span> </span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span> </span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">1ms</span> </span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">4</span>   </span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span>   </span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">time-to-live:</span> <span class="number">1800000</span>  <span class="comment">#设置缓存数据的过期时间【单位ms】</span></span><br></pre></td></tr></table></figure><h2 id="redis和cache的使用场景和区别"><a href="#redis和cache的使用场景和区别" class="headerlink" title="redis和cache的使用场景和区别"></a>redis和cache的使用场景和区别</h2><ul><li>存储方式：<ul><li>cache 把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小 ；</li><li>redis有部分存在硬盘上，这样能保证数据的持久性，支持数据的持久化。cache挂掉后，数据不可恢复; redis数据丢失后可以通过aof恢复 。</li></ul></li><li>数据支持类型：Redis和cache都是将数据存放在内存中<ul><li>cache只支持&lt;key,value&gt;型数据，不过cache还可用于缓存其他东西，例如图片、视频等等；</li><li>Redis不仅仅支持简单的k&#x2F;v类型的数据，同时还提供list，set，hash等数据结构的存储。</li></ul></li><li>可靠性上：<ul><li>Cache不支持数据持久化，断电或重启后数据消失，但其稳定性是有保证的。</li><li>Redis支持数据持久化和数据恢复，允许单点故障，但是同时也会付出性能的代价。</li></ul></li><li>应用场景： <ul><li>Cache：动态系统中减轻数据库负载，提升性能；做缓存，适合多读少写，大数据量的情况（如人人网大量查询用户信息、好友信息、文章信息等）。</li><li>Redis：适用于对读写效率要求都很高，数据处理业务复杂和对安全性要求较高的系统（如新浪微博的计数和微博发布部分系统，对数据安全性、读写要求都很高）。</li></ul></li></ul><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p>首先你需要在启动类上开启缓存注解功能，使用注解<font color="gold"><strong>@EnableCaching</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCaching</span>  <span class="comment">//开启缓存注解功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">        log.info(<span class="string">&quot;项目启动完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CacheManager cacheManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CachePut(value = &quot;userCache&quot;,key = &quot;#result.id&quot;)</span><span class="comment">//动态key</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        增加数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">save</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        userService.save(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CacheEvict(value = &quot;userCache&quot;,key = &quot;#id&quot;)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        删除数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">        userService.removeById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CacheEvict(value = &quot;userCache&quot;,key = &quot;#user.id&quot;)</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    修改数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">update</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        userService.updateById(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cacheable(value = &quot;userCache&quot;,key = &quot;#id&quot;,condition = &quot;#result!=null&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">   查询单个数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   查询多个数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">    <span class="meta">@Cacheable(value = &quot;userCache&quot;,key = &quot;#user.id+&#x27;_&#x27;+#user.name&quot;,condition = &quot;#result!=null&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">list</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(user.getId() != <span class="literal">null</span>,User::getId,user.getId());</span><br><span class="line">        queryWrapper.eq(user.getName() != <span class="literal">null</span>,User::getName,user.getName());</span><br><span class="line">        List&lt;User&gt; list = userService.list(queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SpEL表达式"><a href="#SpEL表达式" class="headerlink" title="SpEL表达式"></a>SpEL表达式</h1><p>对于参数：key、condition、unless中，除了可以使用字符串进行配置，也可以使用SpEL表达式进行<font color="red"><strong>动态的配置</strong></font>。</p><p>Spring表达式语言全称为“Spring Expression Language”，缩写为“SpEL”。</p><p><strong>表达式语言给静态Java语言增加了动态功能。</strong></p><p>SpEL是单独模块，<font color='red'><strong>只依赖于core模块</strong></font>，不依赖于其他模块，可以单独使用。</p><p>简单使用示例如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheEvict(value = &quot;userCache&quot;,key = &quot;#user.id&quot;)</span>  <span class="comment">//以参数user的id属性的值作为key</span></span><br><span class="line"><span class="comment">//@CacheEvict(value = &quot;userCache&quot;,key = &quot;#root.args[0].id&quot;)   以方法的第一个参数的id属性的值作为 key</span></span><br><span class="line"><span class="comment">//@CacheEvict(value = &quot;userCache&quot;,key = &quot;#p0.id&quot;)以方法的第一个参数的id属性的值作为 key</span></span><br><span class="line"><span class="comment">//@CacheEvict(value = &quot;userCache&quot;,key = &quot;#result.id&quot;)以方法返回值的id属性的值作为 key</span></span><br><span class="line"><span class="comment">//@CacheEvict(value = &quot;userCache&quot;,key = &quot;#root.methodName&quot;) 以方法名作为 key</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">update</span><span class="params">(User user)</span>&#123;</span><br><span class="line">   userService.updateById(user);</span><br><span class="line">   <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Cacheable(value = &quot;userCache&quot;,key = &quot;#id&quot;)</span>  <span class="comment">//以参数id作为key</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(id);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：</p><p>​<a href="https://blog.csdn.net/qq_42038623/article/details/120889008?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-120889008-blog-126014714.pc_relevant_sortByAnswer&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-120889008-blog-126014714.pc_relevant_sortByAnswer&utm_relevant_index=1">Spring学习笔记（三十二）——SpringBoot中cache缓存的介绍和使用_不愿意做鱼的小鲸鱼的博客-CSDN博客_spring-boot-starter-cache</a></p>]]></content>
    
    
    <summary type="html">基本使用</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/category/Spring/"/>
    
    
    <category term="Spring-Cache" scheme="http://example.com/tag/Spring-Cache/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Data-Redis</title>
    <link href="http://example.com/post/78e49ba4.html"/>
    <id>http://example.com/post/78e49ba4.html</id>
    <published>2022-07-29T08:12:15.000Z</published>
    <updated>2022-07-30T10:07:33.460Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博客是一篇笔记博客，看的是黑马的瑞吉外卖的视频。【好记性不如烂笔头】</p><p>在Spring Boot项目中，可以使用Spring Data Redis来简化Redis操作。</p><p>首先需要导入maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Spring Boot中的配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span> </span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span>   <span class="comment">#默认端口号</span></span><br><span class="line">    <span class="comment">#password: 123456</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span> <span class="comment">#默认提供了16个数据库（可以在配置文件中改） 默认操作0号数据库，可以在命令行 select 1 选择1号数据库，</span></span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="comment">#Redis连接池配置</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span> <span class="comment">#最大链接数</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">1ms</span> <span class="comment">#连接池最大阻塞等待时间</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">4</span>   <span class="comment">#连接池的最大空闲连接</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span>   <span class="comment">#连接池的最小空闲连接</span></span><br></pre></td></tr></table></figure><p>Spring Data Redis中提供了一个高度封装的类:<font color="red"> <strong>RedisTemplate</strong></font>，针对jedis客户端中大量api进行了归类封装,将同一类型操作封装为operation接口，具体分类如下:</p><ul><li><strong>ValueOperations</strong> 简单的K-V操作</li><li><strong>SetOperations</strong> set类型数据操作</li><li><strong>ZSetOperations</strong>  zset类型数据操作</li><li><strong>HashOperations</strong>  针对Map类型的数据操作</li><li><strong>ListOperations</strong>  针对list类型的数据操作</li></ul><p><strong>说明</strong>：RedisTemplate 这个类可以由Spring Boot自动装配的，前提是配置好</p><p>在<code>spring-boot-test-autoconfigure-..</code>这个jar包中，META-INF目录下有个<code>spring.factories</code>【它进行了很多自动化配置】文件。Spring Boot项目在运行的时候，就会加载这个文件，在这个文件里找到 <code>org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration</code>,按Ctrl点进去，就可以看到一个配置类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(  //在容器中没有这个Bean时，加载</span></span><br><span class="line"><span class="meta">    name = &#123;&quot;redisTemplate&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> <span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line">    RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>();</span><br><span class="line">    template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">    <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以可以直接使用<font color="gold"><strong>@Autowired</strong></font>注解，直接注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> RedisTemplate&lt;String,String&gt; redisTemplate;</span><br></pre></td></tr></table></figure><p>这是指定了泛型的，也可以不指定泛型，最后再说明这两个之间区别是什么。</p><h1 id="代码示范"><a href="#代码示范" class="headerlink" title="代码示范"></a>代码示范</h1><h2 id="ValueOperations-简单的K-V操作"><a href="#ValueOperations-简单的K-V操作" class="headerlink" title="ValueOperations:简单的K-V操作"></a>ValueOperations:简单的K-V操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span> &#123;</span><br><span class="line">    ValueOperations&lt;String, String&gt; valueOperations = redisTemplate.opsForValue();</span><br><span class="line">    <span class="comment">//添加</span></span><br><span class="line">    valueOperations.set(<span class="string">&quot;country&quot;</span>,<span class="string">&quot;China&quot;</span>);</span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">country</span> <span class="operator">=</span> valueOperations.get(<span class="string">&quot;country&quot;</span>);</span><br><span class="line">    System.out.println(country);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置超时时间</span></span><br><span class="line">    valueOperations.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>,<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果存在就不设置</span></span><br><span class="line">    valueOperations.setIfAbsent(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> valueOperations.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HashOperations-针对Map类型的数据操作"><a href="#HashOperations-针对Map类型的数据操作" class="headerlink" title="HashOperations 针对Map类型的数据操作"></a>HashOperations 针对Map类型的数据操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line">    HashOperations&lt;String, String, String&gt; hashOperations = redisTemplate.opsForHash();</span><br><span class="line">    hashOperations.put(<span class="string">&quot;002&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    hashOperations.put(<span class="string">&quot;002&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;23&quot;</span>);</span><br><span class="line">    hashOperations.put(<span class="string">&quot;002&quot;</span>,<span class="string">&quot;address&quot;</span>,<span class="string">&quot;xian&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取所有key</span></span><br><span class="line">    Set&lt;String&gt; keys = hashOperations.keys(<span class="string">&quot;002&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> hashOperations.get(<span class="string">&quot;002&quot;</span>, key);</span><br><span class="line">        System.out.println(key+<span class="string">&quot;:&quot;</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取所有的value</span></span><br><span class="line">    List&lt;String&gt; values = hashOperations.values(<span class="string">&quot;002&quot;</span>);</span><br><span class="line">    System.out.println(values);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//批量添加</span></span><br><span class="line">    Map&lt;String,String&gt; user = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    user.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lisi&quot;</span>);user.put(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;29&quot;</span>);user.put(<span class="string">&quot;address&quot;</span>,<span class="string">&quot;bj&quot;</span>);</span><br><span class="line">    hashOperations.putAll(<span class="string">&quot;001&quot;</span>,user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//批量获取</span></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;name&quot;</span>);list.add(<span class="string">&quot;age&quot;</span>);list.add(<span class="string">&quot;address&quot;</span>);</span><br><span class="line">    List&lt;String&gt; multiGet = hashOperations.multiGet(<span class="string">&quot;001&quot;</span>, list);</span><br><span class="line">    System.out.println(multiGet);</span><br><span class="line">    <span class="comment">//批量获取2</span></span><br><span class="line">    Map&lt;String, String&gt; map = hashOperations.entries(<span class="string">&quot;001&quot;</span>);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ListOperations-针对list类型的数据操作"><a href="#ListOperations-针对list类型的数据操作" class="headerlink" title="ListOperations  针对list类型的数据操作"></a>ListOperations  针对list类型的数据操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;</span><br><span class="line">    ListOperations&lt;String, String&gt; listOperations = redisTemplate.opsForList();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加 </span></span><br><span class="line">    listOperations.leftPush(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    listOperations.leftPushAll(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>);<span class="comment">//添加多个</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取长度</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> listOperations.size(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> listOperations.leftPop(<span class="string">&quot;mylist&quot;</span>);<span class="comment">//弹出</span></span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; mylist = listOperations.range(<span class="string">&quot;mylist&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    System.out.println(mylist);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1，2，3，4，5依次从左边进</p><p>5，4，3，2，1依次从左边出</p><p>Redis的list类型类似双端队列</p><h2 id="SetOperations-set类型数据操作"><a href="#SetOperations-set类型数据操作" class="headerlink" title="SetOperations set类型数据操作"></a>SetOperations set类型数据操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span>&#123;</span><br><span class="line">    SetOperations&lt;String, String&gt; setOperations = redisTemplate.opsForSet();</span><br><span class="line">    <span class="comment">//添加</span></span><br><span class="line">    setOperations.add(<span class="string">&quot;myset&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;lisi&quot;</span>,<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取  members(key)</span></span><br><span class="line">    Set&lt;String&gt; stringSet = setOperations.members(<span class="string">&quot;myset&quot;</span>);</span><br><span class="line">    System.out.println(stringSet);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    setOperations.remove(<span class="string">&quot;myset&quot;</span>,<span class="string">&quot;lisi&quot;</span>,<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">    Set&lt;String&gt; myset = setOperations.members(<span class="string">&quot;myset&quot;</span>);</span><br><span class="line">    System.out.println(myset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ZSetOperations-zset类型数据操作"><a href="#ZSetOperations-zset类型数据操作" class="headerlink" title="ZSetOperations  zset类型数据操作"></a>ZSetOperations  zset类型数据操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testZset</span><span class="params">()</span>&#123;</span><br><span class="line">    ZSetOperations&lt;String, String&gt; zSetOperations = redisTemplate.opsForZSet();</span><br><span class="line">    <span class="comment">//添加</span></span><br><span class="line">    zSetOperations.add(<span class="string">&quot;myzset&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    zSetOperations.add(<span class="string">&quot;myzset&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    zSetOperations.add(<span class="string">&quot;myzset&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="number">9</span>);</span><br><span class="line">    zSetOperations.add(<span class="string">&quot;myzset&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="number">13</span>);</span><br><span class="line"><span class="comment">//获取</span></span><br><span class="line">    Set&lt;String&gt; myzset = zSetOperations.range(<span class="string">&quot;myzset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    System.out.println(myzset);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//改变分数</span></span><br><span class="line">    zSetOperations.incrementScore(<span class="string">&quot;myzset&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    myzset = zSetOperations.range(<span class="string">&quot;myzset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    System.out.println(myzset);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    zSetOperations.remove(<span class="string">&quot;myzset&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line">    myzset = zSetOperations.range(<span class="string">&quot;myzset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    System.out.println(myzset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="公共操作"><a href="#公共操作" class="headerlink" title="公共操作"></a>公共操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testcommon</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//获取Redis所有key</span></span><br><span class="line">    Set&lt;String&gt; keys = redisTemplate.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    System.out.println(keys);</span><br><span class="line">    <span class="comment">//判断某个key是否存在</span></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">key</span> <span class="operator">=</span> redisTemplate.hasKey(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    System.out.println(key);</span><br><span class="line">    <span class="comment">//删除指定的key</span></span><br><span class="line">    redisTemplate.delete(<span class="string">&quot;myset&quot;</span>);</span><br><span class="line">    keys = redisTemplate.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    System.out.println(keys);</span><br><span class="line">    <span class="comment">//获取指定的key对应的value数据类型</span></span><br><span class="line">    <span class="type">DataType</span> <span class="variable">type</span> <span class="operator">=</span> redisTemplate.type(<span class="string">&quot;001&quot;</span>);</span><br><span class="line">    System.out.println(type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="RedisTemplate指定泛型和不指定泛型的区别"><a href="#RedisTemplate指定泛型和不指定泛型的区别" class="headerlink" title="RedisTemplate指定泛型和不指定泛型的区别"></a>RedisTemplate指定泛型和不指定泛型的区别</h1><p>其实区别就是在操作redis时，<font color="red"><strong>key和value的序列化方式不同</strong></font>。用代码测一下。</p><h2 id="指定泛型"><a href="#指定泛型" class="headerlink" title="指定泛型"></a>指定泛型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringRedisApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        ValueOperations&lt;String, String&gt; valueOperations = redisTemplate.opsForValue();</span><br><span class="line">        valueOperations.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在redis存储了一个key为name的数据，value为zhangsan。</p><p>然后打开命令行 </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; keys *</span><br><span class="line"><span class="number">1</span>) &quot;name&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; get name</span><br><span class="line">&quot;zhangsan&quot;</span><br></pre></td></tr></table></figure><p>这很正常吧</p><h2 id="不指定泛型"><a href="#不指定泛型" class="headerlink" title="不指定泛型"></a>不指定泛型</h2><p><strong>重启redis服务。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringRedisApplicationTests</span> &#123;</span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    private RedisTemplate&lt;String,String&gt; redisTemplate;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ValueOperations</span> <span class="variable">valueOperations</span> <span class="operator">=</span> redisTemplate.opsForValue();</span><br><span class="line">        valueOperations.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在redis存储了一个key为name的数据，value为zhangsan。</p><p>然后打开命令行 </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; keys *</span><br><span class="line"><span class="number">1</span>) &quot;\xac\xed\x00\x05t\x00\x04name&quot;  #发现不一样的了吧</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; get name </span><br><span class="line">(nil)           #获取不到</span><br></pre></td></tr></table></figure><p>这就是序列化方式不一样。</p><p>然后再不指定泛型的情况下，配置一下<code>RedisTemplate</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object,Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span>&#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//默认的key序列化器为：JdkSerializationRedisSerializer</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line"></span><br><span class="line">        redisTemplate.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重启redis服务，</strong>然后在运行以上程序，然后再在命令行试一下</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; keys *</span><br><span class="line"><span class="number">1</span>) &quot;name&quot;</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; get name</span><br><span class="line">&quot;\xac\xed\x00\x05t\x00\bzhangsan&quot;  </span><br></pre></td></tr></table></figure><p><code>&quot;\xac\xed\x00\x05t\x00\bzhangsan&quot; </code>出现这个的原因是，没有设置value的序列化。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后可以看出</p><p><code>private RedisTemplate&lt;String,String&gt; redisTemplate;</code>泛型的指定可以决定<code>RedisTemplate</code>的key和value的序列化方式。</p>]]></content>
    
    
    <summary type="html">入门</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/category/Spring/"/>
    
    
    <category term="Spring-Data-Redis" scheme="http://example.com/tag/Spring-Data-Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis五种常用数据类型</title>
    <link href="http://example.com/post/d2e965a3.html"/>
    <id>http://example.com/post/d2e965a3.html</id>
    <published>2022-07-28T09:51:07.000Z</published>
    <updated>2022-07-28T13:42:03.687Z</updated>
    
    <content type="html"><![CDATA[<p>redis存储的是：key,value格式的数据，其中<font color="blue"><strong>key都是字符串</strong></font>，<font color="blue"><strong>value有5种不同的数据结构</strong></font></p><h1 id="redis的数据结构"><a href="#redis的数据结构" class="headerlink" title="redis的数据结构"></a>redis的数据结构</h1><ul><li>value的数据结构：<ol><li>字符串类型 <strong>string</strong></li><li>哈希类型 hash ： <strong>map格式</strong>  </li><li>列表类型 list ： <strong>linkedlist格式</strong>。支持重复元素</li><li>集合类型 set  ： 不允许重复元素 <strong>HashSet格式</strong></li><li>有序集合类型 sortedset：<strong>不允许重复元素，且元素有顺序</strong></li></ol></li></ul><ul><li><table><thead><tr><th align="center"></th><th align="center">存储</th><th align="center">获取</th><th align="center">删除</th></tr></thead><tbody><tr><td align="center">String</td><td align="center"><strong>set <font color="blue">key</font> <font color="red">value</font></strong></td><td align="center"><strong>get <font color="blue">key</font></strong></td><td align="center"><strong>del <font color="blue">key</font></strong></td></tr><tr><td align="center">hash</td><td align="center"><strong>hset <font color="blue">key</font> field <font color="red">value</font></strong></td><td align="center"><strong>hget <font color="blue">key</font> field &#x2F; hgetall <font color="blue">key</font></strong></td><td align="center"><strong>hdel <font color="blue">key</font> field</strong></td></tr><tr><td align="center">list</td><td align="center"><strong>lpush\rpush <font color="blue">key</font> <font color="red">value</font></strong></td><td align="center"><strong>lrange <font color="blue">key</font> start end</strong></td><td align="center"><strong>lpop\rpop <font color="blue">key</font></strong></td></tr><tr><td align="center">set</td><td align="center"><strong>sadd <font color="blue">key</font> <font color="red">value</font></strong></td><td align="center"><strong>smember <font color="blue">key</font></strong></td><td align="center"><strong>srem <font color="blue">key</font> <font color="red">value</font></strong></td></tr><tr><td align="center">sortset</td><td align="center"><strong>zadd <font color="blue">key</font> score <font color="red">value</font></strong></td><td align="center"><strong>zrange <font color="blue">key</font> start end [wirthscores]</strong></td><td align="center"><strong>zrem <font color="blue">key</font> <font color="red">value</font></strong></td></tr></tbody></table></li></ul><p>说明【表格装不下了，楞跻也不美观，所以在这进行说明 ≡(▔﹏▔)≡】</p><ol><li><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><ol><li><p>存储： </p><ul><li><p>设置指定的值：<font color="red" size=4><strong>set key value</strong></font></p></li><li><p>设置指定key的值，并将key的过期时间设为seconds秒： <font color="red" size=4><strong>setex key seconds value</strong></font></p><p>例如：<code>setex city 10 Beijing</code></p></li><li><p>只有key不存在时设置key 的值：<font color="red" size=4><strong>setnx key value</strong></font></p></li></ul></li><li><p>获取：  <font color="red" size=4><strong>get key</strong></font></p></li><li><p>删除一个或多个： <font color="red" size=4><strong>del key [key …]</strong></font></p></li></ol><img src="/image/article/Redis五种数据类型.assets/image-20220728183640550.png" alt="image-20220728183640550" style="zoom:70%;" /></li><li><h2 id="哈希类型："><a href="#哈希类型：" class="headerlink" title="哈希类型："></a>哈希类型：</h2><p>类似Java的Map, <strong>field相当于Map的key,value相当于Map的value.</strong>  </p><ol><li>存储：<font color="red" size=4> <strong>hset</strong> key <strong>field</strong> value</font>  </li><li>获取： <ul><li><font color="red" size=4><strong>hget key field</strong></font>: 获取指定的field对应的值</li><li><font color="red" size=4><strong>hkeys key</strong></font>: 获取哈希表中所有字段</li><li><font color="red" size=4><strong>hvals key</strong></font>: 获取哈希表中所有值</li><li><font color="red" size=4><strong>hgetall key</strong></font>：获取所有的field和value</li></ul></li><li>删除一个或多个： <font color="red" size=4><strong>hdel key field [field…]</strong></font></li></ol><img src="/image/article/Redis五种数据类型.assets/image-20220728184110716.png" alt="image-20220728184110716" style="zoom:67%;" /></li><li><h2 id="列表类型："><a href="#列表类型：" class="headerlink" title="列表类型："></a>列表类型：</h2><ol><li>添加：<ul><li><p><font color="red" size=4><strong>lpush key value [value…]</strong></font> : 将元素加入列表<font color="blue" size=4><strong>左边</strong></font></p></li><li><p><font color="red" size=4><strong>rpush key value [value…]</strong></font> ：将元素加入列表<font color="blue" size=4><strong>右边</strong></font></p></li></ul></li><li>获取：<ul><li><font color="red" size=4><strong>lrange key start end</strong></font> ：范围获取 【start , end 】索引起始为0</li><li><font color="red" size=4><strong>llen key</strong></font> ：获取列表长度</li></ul></li><li>删除：<ul><li><font color="red" size=4><strong>lpop key</strong></font>： 删除列表<font color="blue" size=4><strong>最左边</strong></font>的元素，并将元素返回</li><li><font color="red" size=4><strong>rpop key</strong></font>： 删除列表<font color="blue" size=4><strong>最右边</strong></font>的元素，并将元素返回</li></ul></li></ol><img src="/image/article/Redis五种数据类型.assets/image-20220728185126513.png" alt="image-20220728185126513" style="zoom: 67%;" /></li><li><h2 id="集合类型："><a href="#集合类型：" class="headerlink" title="集合类型："></a>集合类型：</h2><ol><li><p>存储：<font color="red" size=4><strong>sadd key value [value …]</strong></font></p></li><li><p>获取：</p><ul><li><font color="red" size=4><strong>smembers key</strong></font>:获取set集合中所有元素</li><li><font color="red" size=4><strong>scard key</strong></font>:获取set集合成员数</li></ul></li><li><p>删除：<font color="red" size=4><strong>srem key value [value …]</strong></font>:删除set集合中的一个或者多个元素</p></li><li><p>其他：</p><ul><li><p><font color="red" size=4><strong>sinter key [key …]</strong></font>:返回给定所有集合的交集</p><p>例如：<code>sinter city1 city2 city3</code></p></li><li><p><font color="red" size=4><strong>sunion key [key…]</strong></font>:返回给定所有集合的并集</p></li><li><p><font color="red" size=4><strong>sdiff key [key…]</strong></font>:返回给定所有集合的差集</p></li></ul></li></ol><img src="/image/article/Redis五种数据类型.assets/image-20220728203425934.png" alt="image-20220728203425934" style="zoom:67%;" /></li><li><h2 id="有序集合类型sortedset："><a href="#有序集合类型sortedset：" class="headerlink" title="有序集合类型sortedset："></a>有序集合类型sortedset：</h2><p>不允许重复元素，且元素有顺序.<font color ="red" size=5><strong>每个元素都会关联一个double类型的分数</strong></font>。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><ol><li><p>存储：</p><ol><li><p><font color ="red" size=4><strong>zadd key score value [score value …]</strong></font>向有序集合中添加一个或多个成员，或更新已存在成员的分数</p></li><li><p><font color ="red" size=4><strong>zincrby key increment member</strong></font>有序集合中对指定成员的分数加上增量increment</p><p>例如：<code>zincrby names 20 zhangsan</code></p></li></ol></li><li><p>获取：<font color ="red" size=4><strong>zrange key start end [withscores]</strong></font></p><img src="/image/article/Redis五种数据类型.assets/image-20220728210651009.png" alt="image-20220728210651009" style="zoom:50%;" /></li><li><p>删除：<font color ="red" size=4><strong>zrem key value [value…]</strong></font></p></li></ol><img src="/image/article/Redis五种数据类型.assets/image-20220728203951597.png" alt="image-20220728203951597" style="zoom:67%;" /></li></ol><h1 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h1><ol><li><font color ="red" size=4><strong>keys parttern</strong> </font>: 查询所有符合给定模式（pattern）的key</li><li><font color ="red" size=4><strong>type key</strong> </font>： 获取键对应的value的类型</li><li><font color ="red" size=4><strong>del key [key…]</strong></font>：删除指定的key value</li><li><font color ="red" size=4><strong>exists key</strong></font>：检查给定的key是否存在</li><li><font color ="red" size=4><strong>ttl key [key…]</strong></font>：返回给定的key的剩余生存时间，以秒为单位。</li></ol><img src="/image/article/Redis五种数据类型.assets/image-20220728204310186.png" alt="image-20220728204310186" style="zoom:67%;" /><p><font size=5><strong>更多命令可以参考<a href="http://www.redis.net.cn/">redis中文网</a></strong></font></p>]]></content>
    
    
    <summary type="html">Redis入门</summary>
    
    
    
    <category term="Redis" scheme="http://example.com/category/Redis/"/>
    
    
    <category term="Redis" scheme="http://example.com/tag/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis简介</title>
    <link href="http://example.com/post/958f52e2.html"/>
    <id>http://example.com/post/958f52e2.html</id>
    <published>2022-07-28T09:35:45.000Z</published>
    <updated>2022-07-28T13:40:59.213Z</updated>
    
    <content type="html"><![CDATA[<p>redis是一款高性能的NOSQL系列的非关系型数据库</p><h1 id="一、什么是NOSQL"><a href="#一、什么是NOSQL" class="headerlink" title="一、什么是NOSQL"></a>一、什么是NOSQL</h1><p>​NoSQL(NoSQL &#x3D; <font color="red"><strong>Not Only SQL</strong></font>)，意即“<strong>不仅仅是SQL</strong>”，是一项全新的数据库理念，<font color="blue"><strong>泛指非关系型的数据库。</strong></font><br>​随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。</p><h1 id="二、NOSQL和关系型数据库比较"><a href="#二、NOSQL和关系型数据库比较" class="headerlink" title="二、NOSQL和关系型数据库比较"></a>二、NOSQL和关系型数据库比较</h1><p>​优点：<br>​1）成本：nosql数据库<strong>简单易部署</strong>，基本都是开源软件，不需要像使用oracle那样花费大量成本购买使用，相比关系型数据库价格便宜。<br>​2）查询速度：<font color="red"><strong>nosql数据库将数据存储于缓存之中</strong></font>，<font color="blue"><strong>关系型数据库将数据存储在硬盘中</strong></font>，自然查询速度远不及nosql数据库。<br>​3）存储数据的格式：<font color="red">nosql的存储格式是<strong>key,value形式、文档形式、图片形式等等</strong></font>，所以可以存储<strong>基础类型</strong>以及<strong>对象或者是集合等各种格式</strong>，而<font color="blue"><strong>数据库则只支持基础类型</strong></font>。<br>​4）扩展性：关系型数据库<strong>有类似join这样的多表查询机制的限制</strong>导致查询效率低。</p><p>​缺点：<br>​1）<strong>维护的工具和资料有限</strong>，因为nosql是属于新的技术，不能和关系型数据库10几年的技术同日而语。<br>​2）<strong>不提供对sql的支持</strong>，如果不支持sql这样的工业标准，将<strong>产生一定用户的学习和使用成本</strong>。【没有统一的标准】<br>​3）<strong>不提供</strong>关系型数据库对<strong>事务的处理</strong>。</p><h2 id="1、非关系型数据库的优势："><a href="#1、非关系型数据库的优势：" class="headerlink" title="1、非关系型数据库的优势："></a>1、非关系型数据库的优势：</h2><p>​1）性能NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。<br>​2）可扩展性同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。</p><h2 id="2、关系型数据库的优势："><a href="#2、关系型数据库的优势：" class="headerlink" title="2、关系型数据库的优势："></a>2、关系型数据库的优势：</h2><p>​1）复杂查询可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。<br>​2）事务支持使得对于<strong>安全性能</strong>很高的数据访问要求得以实现。对于这两类数据库，<strong>对方的优势就是自己的弱势，反之亦然</strong>。</p><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><p>​<strong>关系型数据库</strong>与<strong>NoSQL数据库</strong>并非对立而是<font color="blue"><strong>互补的关系</strong></font>，即通常情况下使用关系型数据库，在适合使用NoSQL的时候使用NoSQL数据库，<br>​让NoSQL数据库对关系型数据库的不足进行弥补。<br>​一般会将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据</p><h1 id="三、主流的NOSQL产品"><a href="#三、主流的NOSQL产品" class="headerlink" title="三、主流的NOSQL产品"></a>三、主流的NOSQL产品</h1><p>​•键值(Key-Value)存储数据库<br>​相关产品： Tokyo Cabinet&#x2F;Tyrant、<strong>Redis</strong>、Voldemort、Berkeley DB<br>​典型应用： 内容缓存，主要用于处理大量数据的高访问负载。<br>​数据模型： 一系列键值对<br>​优势： 快速查询<br>​劣势： 存储的数据缺少结构化<br>​•列存储数据库<br>​相关产品：Cassandra, HBase, Riak<br>​典型应用：分布式的文件系统<br>​数据模型：以列簇式存储，将同一列数据存在一起<br>​优势：查找速度快，可扩展性强，更容易进行分布式扩展<br>​劣势：功能相对局限<br>​•文档型数据库<br>​相关产品：CouchDB、MongoDB<br>​典型应用：Web应用（与Key-Value类似，Value是结构化的）<br>​数据模型： 一系列键值对<br>​优势：数据结构要求不严格<br>​劣势： 查询性能不高，而且缺乏统一的查询语法<br>​•图形(Graph)数据库<br>​相关数据库：Neo4J、InfoGrid、Infinite Graph<br>​典型应用：社交网络<br>​数据模型：图结构<br>​优势：利用图结构相关算法。<br>​劣势：需要对整个图做计算才能得出结果，不容易做分布式的集群方案。</p><h1 id="四、-什么是Redis"><a href="#四、-什么是Redis" class="headerlink" title="四、 什么是Redis"></a>四、 什么是Redis</h1><p>​Redis是用<strong>C语言</strong>开发的一个开源的高性能键值对（key-value）数据库，官方提供测试数据，50个并发执行100000个请求,读的速度是110000次&#x2F;s,写的速度是81000次&#x2F;s ，且Redis通过提供多种键值数据类型来适应不同场景下的存储需求，目前为止Redis支持的键值数据类型如下：</p><ol><li>字符串类型 <strong>string</strong></li><li>哈希类型 <strong>hash</strong></li><li>列表类型 <strong>list</strong></li><li>集合类型 <strong>set</strong></li><li>有序集合类型 <strong>sortedset</strong></li></ol><h2 id="redis的应用场景"><a href="#redis的应用场景" class="headerlink" title="redis的应用场景"></a>redis的应用场景</h2><p>•缓存（数据查询、短连接、新闻内容、商品内容等等）<br>•聊天室的在线好友列表<br>•任务队列。（秒杀、抢购、12306等等）<br>•应用排行榜<br>•网站访问统计<br>•数据过期处理（可以精确到毫秒<br>•分布式集群架构中的session分离</p><h1 id="五、下载安装"><a href="#五、下载安装" class="headerlink" title="五、下载安装"></a>五、下载安装</h1><ol><li><p>官网：<a href="https://redis.io/">https://redis.io</a></p></li><li><p><font color="blue"><strong>中文网</strong></font>：<a href="http://www.redis.net.cn/">http://www.redis.net.cn/</a></p></li><li><p><strong>解压直接可以使用</strong>：</p><ul><li>redis.windows.conf：配置文件</li><li>redis-cli.exe：redis的客户端</li><li>redis-server.exe：redis服务器端</li></ul></li></ol><p><img src="/image/article/Redis%E7%AE%80%E4%BB%8B/image-20220728174333931.png" alt="image-20220728174333931"></p><p><font color="red" size=5><strong>要先启动服务端，再启动命令端!!!</strong></font></p>]]></content>
    
    
    <summary type="html">Redis、NoSql相关介绍</summary>
    
    
    
    <category term="Redis" scheme="http://example.com/category/Redis/"/>
    
    
    <category term="Redis" scheme="http://example.com/tag/Redis/"/>
    
  </entry>
  
  <entry>
    <title>使用idea将自己的项目上传到github</title>
    <link href="http://example.com/post/a362d786.html"/>
    <id>http://example.com/post/a362d786.html</id>
    <published>2022-07-28T01:36:45.000Z</published>
    <updated>2022-07-28T02:33:30.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置IDEA并登录github"><a href="#配置IDEA并登录github" class="headerlink" title="配置IDEA并登录github"></a>配置IDEA并登录github</h1><p>File—-&gt;Settings —&gt;Version Conroll —&gt;Git</p><img src="/image/article/使用idea将自己的项目上传到github.assets/image-20220728094240526.png" alt="image-20220728094240526" style="zoom:50%;" /><p>然后登录Github【在idea】</p><img src="/image/article/使用idea将自己的项目上传到github.assets/image-20220728094428087.png" alt="image-20220728094428087" style="zoom:50%;" /><p>由于使用账号密码登录Github经常失败，所以使用token登录，成功率比较高，因为Github的服务器在国外。经常连接失败。</p><h2 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h2><p>首先去Github官网，登录你的账号。进入Settings,进入之后在右侧最小面找<strong>Developer settings</strong>。</p><p><img src="/image/article/使用idea将自己的项目上传到github.assets/image-20220728094641967.png" alt="image-20220728094641967" style="zoom:50%;float:left" />———————————————————-&gt;<img src="/image/article/使用idea将自己的项目上传到github.assets/image-20220728094804041.png" alt="image-20220728094804041" style="zoom:50%;" /></p><p>Personal acess tokens —&gt; Generate new token</p><img src="/image/article/使用idea将自己的项目上传到github.assets/image-20220728095010000.png" alt="image-20220728095010000" style="zoom:67%;" /><p><img src="/image/article/%E4%BD%BF%E7%94%A8idea%E5%B0%86%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0github.assets/image-20220728095228018.png" alt="image-20220728095228018"></p><p>最后点击最下面的<strong>Generate token</strong>,然后就会出现下面的画面，然后复制这个token到Github就行。</p><img src="/image/article/使用idea将自己的项目上传到github.assets/image-20220728095433663.png" alt="image-20220728095433663" style="zoom:50%;" /><img src="/image/article/使用idea将自己的项目上传到github.assets/image-20220728095530710.png" alt="image-20220728095530710" style="zoom:67%;" /><p>出现以下画面就是登录成功了。</p><img src="/image/article/使用idea将自己的项目上传到github.assets/image-20220728095617376.png" alt="image-20220728095617376" style="zoom:67%;" /><h1 id="创建-gitignore文件"><a href="#创建-gitignore文件" class="headerlink" title="创建.gitignore文件"></a>创建.gitignore文件</h1><p><strong>目的：</strong>与项目的实际功能无关，不参与服务器上部署运行。把它们忽略掉能够屏蔽 IDE 工具之间的差异</p><p>在当前项目里，创建一个<font color="red"><strong>gitignore.txt</strong></font>文件，编辑这个文件。输入以下</p><p>这是适用于Java的，如果你是GoLand，Pycharm，可以自定义该文件。**<a href="https://blog.csdn.net/zhang90283/article/details/124245456">简单教程</a>**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">*.log</span><br><span class="line">\# BlueJ files</span><br><span class="line">*.ctxt</span><br><span class="line">\# Mobile Tools for Java (J2ME)</span><br><span class="line">.mtj.tmp/</span><br><span class="line">\# Package Files #</span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.nar</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line">\# virtual machine crash logs, see </span><br><span class="line"></span><br><span class="line">http://www.java.com/en/download/help/error_hotspot.xml</span><br><span class="line">hs_err_pid*</span><br><span class="line">.classpath</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">target</span><br><span class="line">.idea</span><br><span class="line">*.iml</span><br></pre></td></tr></table></figure><p>保存退出。在项目文件夹里，右键—–&gt;Git Bash here。 进入git的<strong>命令行界面</strong>。输入以下指令。然后就会发现gitignore.txt文件就会转为.gitignore文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv gitignore.txt .gitignore</span><br></pre></td></tr></table></figure><p>【注意：一定要在仓库提交之前创建忽略性文件，否则文件会失效！】</p><p><img src="/image/article/%E4%BD%BF%E7%94%A8idea%E5%B0%86%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0github.assets/image-20220728100858186.png" alt="image-20220728100858186"></p><h1 id="初始化仓库并提交"><a href="#初始化仓库并提交" class="headerlink" title="初始化仓库并提交"></a>初始化仓库并提交</h1><p>VCS —&gt; Create Git Repository。然后选择你的项目创建。</p><p><img src="/image/article/%E4%BD%BF%E7%94%A8idea%E5%B0%86%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0github.assets/image-20220728101040685.png" alt="image-20220728101040685"></p><p>这个时候你的文件名就会变成<font color="red"><strong>红色</strong></font>,这是为什么？可以看我另一篇博客 <a href="https://luckydog-tjs.vercel.app/post/11.html"><strong>点这</strong></a></p><h2 id="将整个项目加入暂存区"><a href="#将整个项目加入暂存区" class="headerlink" title="将整个项目加入暂存区"></a>将整个项目加入暂存区</h2><img src="/image/article/使用idea将自己的项目上传到github.assets/image-20220728101414067.png" alt="image-20220728101414067" style="zoom:70%;" /><h2 id="将整个项目提交到本地仓库"><a href="#将整个项目提交到本地仓库" class="headerlink" title="将整个项目提交到本地仓库"></a>将整个项目提交到本地仓库</h2><img src="/image/article/使用idea将自己的项目上传到github.assets/image-20220728101547721.png" alt="image-20220728101547721" style="zoom:50%;" /><img src="/image/article/使用idea将自己的项目上传到github.assets/image-20220728101725380.png" alt="image-20220728101725380" style="zoom:50%;" /><p>中途可能会出现这样的提示框，它告诉你：<strong>代码存在警告，你是否再检查一下？</strong></p><p><img src="/image/article/%E4%BD%BF%E7%94%A8idea%E5%B0%86%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0github.assets/image-20220728101751116.png" alt="image-20220728101751116"></p><p>一般不用管它，直接Commit就行了。</p><h1 id="推送到Github"><a href="#推送到Github" class="headerlink" title="推送到Github"></a>推送到Github</h1><img src="/image/article/使用idea将自己的项目上传到github.assets/image-20220728102004139.png" alt="image-20220728102004139" style="zoom:67%;" /><p>Git【这个位置之前的VCS,因为使用Git创建了仓库所以变成了Git】 —&gt; Github  —-&gt; Share Project on Github。</p><p><img src="/image/article/%E4%BD%BF%E7%94%A8idea%E5%B0%86%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0github.assets/image-20220728102252205.png" alt="image-20220728102252205"></p><p>点击Share就可以上传到Github啦！注意看idea的右下角，可能会失败，因为github服务器在国外。如果上传失败，不要灰心，多试几次就好了。嘿( •̀ ω •́ )✧，上传成功后，登录自己Github账号，就可以看见啦。</p><p><font size =5><strong>如果你遇见了其他问题，欢迎评论区留言！</strong></font></p>]]></content>
    
    
    <summary type="html">使用idea将自己的项目上传到github</summary>
    
    
    
    <category term="Git" scheme="http://example.com/category/Git/"/>
    
    
    <category term="Git" scheme="http://example.com/tag/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git本地仓库操作</title>
    <link href="http://example.com/post/11.html"/>
    <id>http://example.com/post/11.html</id>
    <published>2022-07-27T07:28:17.000Z</published>
    <updated>2022-07-27T07:29:57.979Z</updated>
    
    <content type="html"><![CDATA[<p>在我们进行Git配置之后，建立了仓库。IDEA左侧目录文件颜色分为三种：<strong>黑色</strong>，<font color="green"><strong>绿色</strong></font>，<font color="red"><strong>红色</strong></font>。<strong>不同颜色代表不同状态</strong></p><ul><li>黑色：代表该文件已经提交给你Git仓库。</li><li>绿色：代表该文件已经添加到了暂存区</li><li>红色：代表该文件还没有添加到暂存区</li></ul><h1 id="加入暂存区"><a href="#加入暂存区" class="headerlink" title="加入暂存区"></a>加入暂存区</h1><p>每当创建新文件时，IDEA会提示你是否添加到暂存区。</p><img src="/image/article/Git本地仓库操作.assets/image-20220727145714913-16589050410821.png" alt="image-20220727145714913" style="zoom:67%;" /><h2 id="手动加入暂存区"><a href="#手动加入暂存区" class="headerlink" title="手动加入暂存区"></a>手动加入暂存区</h2><p>右键—&gt;Git—&gt;add【可能IDEA版本不同有一点差异，但差异不大】</p><img src="/image/article/Git本地仓库操作.assets/image-20220727145941004.png" alt="image-20220727145941004" style="zoom: 50%;" /><p>然后文件颜色会从<font color="red"><strong>红色</strong></font>变为<font color="green"><strong>绿色</strong></font>。</p><h1 id="提交到本地仓库"><a href="#提交到本地仓库" class="headerlink" title="提交到本地仓库"></a>提交到本地仓库</h1><h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><p>右键—&gt;Git—&gt;Commit File…</p><img src="/image/article/Git本地仓库操作.assets/image-20220727150243370.png" alt="image-20220727150243370" style="zoom: 50%;" /><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><img src="/image/article/Git本地仓库操作.assets/image-20220727151113467.png" alt="image-20220727151113467" style="zoom:50%;" /><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><img src="/image/article/Git本地仓库操作.assets/image-20220727150634866.png" alt="image-20220727150634866" style="zoom: 50%;" /><p>提交之后颜色从<font color="green"><strong>绿色</strong></font>变为<strong>黑色</strong></p><p>如果你一旦进行了修改，文件就从<strong>黑色</strong>变为<font color="blue"><strong>蓝色</strong></font></p><h1 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h1><p>IDEA左下角<img src="/image/article/Git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E6%93%8D%E4%BD%9C.assets/image-20220727151426192.png" alt="image-20220727151426192"></p><p>就会看见如下界面：</p><p><img src="/image/article/Git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E6%93%8D%E4%BD%9C.assets/image-20220727151524295.png" alt="image-20220727151524295"></p>]]></content>
    
    
    <summary type="html">Git集成IDEA</summary>
    
    
    
    <category term="Git" scheme="http://example.com/category/Git/"/>
    
    
    <category term="Git" scheme="http://example.com/tag/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git配置IDEA</title>
    <link href="http://example.com/post/a99f1401.html"/>
    <id>http://example.com/post/a99f1401.html</id>
    <published>2022-07-27T07:18:17.000Z</published>
    <updated>2022-07-27T07:30:08.239Z</updated>
    
    <content type="html"><![CDATA[<p>在IDEA中配置Git，首先你的电脑里得下载Git,<a href="https://git-scm.com/"><strong>下载链接</strong></a></p><h1 id="IDEA配置Git"><a href="#IDEA配置Git" class="headerlink" title="IDEA配置Git"></a>IDEA配置Git</h1><p>IDEA—&gt;setting—&gt;Git</p><p>配置你的Git.exe的目录，点击Test可以测试是否配置成功。然后就可以在IDEA中使用Git了。</p><p><img src="/image/article/Git%E9%85%8D%E7%BD%AEIDEA.assets/image-20220727142723917.png" alt="image-20220727142723917"></p><h1 id="Git获取仓库"><a href="#Git获取仓库" class="headerlink" title="Git获取仓库"></a>Git获取仓库</h1><p>使用Git获取仓库有两种方式:</p><ul><li>从本地初始化仓库</li><li>从远程仓库克隆</li></ul><h2 id="从本地初始化仓库"><a href="#从本地初始化仓库" class="headerlink" title="从本地初始化仓库"></a>从本地初始化仓库</h2><p>在IDEA上侧，选择VCS(版本控制)—-&gt;Create Git Reposity…</p><img src="/image/article/Git配置IDEA.assets/image-20220727143403083.png" alt="image-20220727143403083" style="zoom: 67%;" /><p>然后选择你要初始化仓库的文件夹。</p><img src="/image/article/Git配置IDEA.assets/image-20220727143444356.png" alt="image-20220727143444356" style="zoom:50%;" /><p>初始化成功后，在原文件夹就会看见 一个**.git<strong>的</strong>隐藏文件夹**。里面存储的是仓库的信息。</p><p>上侧边栏的 VCS就会变成Git</p><p><img src="/image/article/Git%E9%85%8D%E7%BD%AEIDEA.assets/image-20220727143721917.png" alt="image-20220727143721917"></p><h2 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h2><h3 id="在创建项目界面"><a href="#在创建项目界面" class="headerlink" title="在创建项目界面"></a>在创建项目界面</h3><p>选择Get from VCS </p><img src="/image/article/Git配置IDEA.assets/image-20220727143832197.png" alt="image-20220727143832197" style="zoom:67%;" /><h3 id="在主界面"><a href="#在主界面" class="headerlink" title="在主界面"></a>在主界面</h3><p>VCS—&gt;Get from VCS</p><p><img src="/image/article/Git%E9%85%8D%E7%BD%AEIDEA.assets/image-20220727144212322.png" alt="image-20220727144212322"></p><p>然后再URL里输入你的GitHub或Gitee的仓库的URL地址。</p><img src="/image/article/Git配置IDEA.assets/image-20220727143900000.png" alt="image-20220727143900000" style="zoom:70%;" /><h1 id="gitgnore文件说明"><a href="#gitgnore文件说明" class="headerlink" title=".gitgnore文件说明"></a>.gitgnore文件说明</h1><p>它是用来说明，仓库中哪些文件不需要进行管理。在该文件夹中进行配置，可以<strong>指定哪些文件&#x2F;文件夹</strong>，在<strong>提交&#x2F;推送</strong>的时候忽略它。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># Compiled class file</span><br><span class="line">*.class                    //忽略后缀为 class是文件</span><br><span class="line">\# Log file</span><br><span class="line">*.log</span><br><span class="line">\# BlueJ files</span><br><span class="line">*.ctxt</span><br><span class="line">\# Mobile Tools for Java (J2ME)</span><br><span class="line">.mtj.tmp/</span><br><span class="line">\# Package Files #</span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.nar</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line">\# virtual machine crash logs, see </span><br><span class="line"></span><br><span class="line">http://www.java.com/en/download/help/error_hotspot.xml</span><br><span class="line">hs_err_pid*</span><br><span class="line">.classpath</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">target    //target文件夹忽略</span><br><span class="line">.idea//.idea文件夹忽略</span><br><span class="line">*.iml</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Git集成IDEA</summary>
    
    
    
    <category term="Git" scheme="http://example.com/category/Git/"/>
    
    
    <category term="Git" scheme="http://example.com/tag/Git/"/>
    
  </entry>
  
</feed>
