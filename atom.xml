<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lucky Dog&#39;s blogs</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-08-28T12:14:44.706Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前缀树</title>
    <link href="http://example.com/post/84520ef4.html"/>
    <id>http://example.com/post/84520ef4.html</id>
    <published>2022-08-28T11:35:48.000Z</published>
    <updated>2022-08-28T12:14:44.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前缀树简介"><a href="#前缀树简介" class="headerlink" title="前缀树简介"></a>前缀树简介</h1><p>又称单词查找树，字典树，<code>Trie</code>树，是一种树形结构，是一种<strong>哈希树</strong>的变种。</p><p>典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。</p><p>它的优点是：<code>利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高</code>。</p><p>是一种典型的用时间换空间的数据结构</p><p><strong>前缀树的性质：</strong></p><ul><li><font color="red"><strong>根节点不包含字符</strong></font>，除根节点外每一个节点都只包含一个字符</li><li>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串</li><li>每个节点的所有子节点包含的字符都不相同</li></ul><p>假设有<code>b</code>，<code>abc</code>，<code>abd</code>，<code>bcd</code>，<code>abcd</code>，<code>efg</code>，<code>hii </code>这6个单词,那我们创建<code>trie</code>树就得到</p><p><img src="/%5Cimage%5Carticle%5C%E5%89%8D%E7%BC%80%E6%A0%91%5C20190924193658133.png" alt="20190924193658133"></p><p>其中红色的节点表示，从根节点到该节点连成的字符串，是前缀树包含的。</p><h1 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h1><p>定义<strong>前缀树节点</strong>的数据结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    Map&lt;Character,Node&gt; child;</span><br><span class="line">    <span class="type">boolean</span> isEnd;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">()</span>&#123;</span><br><span class="line">        child = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        isEnd = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用<code>Map</code>来存储该节点的孩子节点</p><p>布尔类型的<code>isEnd</code>很重要，前缀树包含某一字符串，但该前缀树不一定存入该字符串。【如上图所示的红色节点】</p><p>它标识以该字符为结尾的字符串是存入的字符串。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tire.insert(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">tire.search(<span class="string">&quot;app&quot;</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><font size= 4><strong>前缀树的实现</strong></font></p><p><strong>字符串插入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> root;<span class="comment">//指针指向根节点,从前缀树的根节点开始遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;<span class="comment">//遍历该字符串</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(!node.child.containsKey(c))&#123;<span class="comment">//如果该节点的孩子节点不包含该字符</span></span><br><span class="line">            node.child.put(c,<span class="keyword">new</span> <span class="title class_">Node</span>());<span class="comment">//新加入该字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==word.length()-<span class="number">1</span>)node.child.get(c).isEnd=<span class="literal">true</span>;<span class="comment">//当到了最后的一个字符时，就标记为一个字符串的结尾。</span></span><br><span class="line">        node = node.child.get(c);<span class="comment">//指针指向孩子节点。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>字符串查找</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> root;<span class="comment">//指针指向根节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;<span class="comment">//遍历该字符串</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">        <span class="comment">//如果存在某个节点的孩子不包含该字符串，就说明前缀树中不存在该字符串</span></span><br><span class="line">        <span class="keyword">if</span>(!node.child.containsKey(c))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        node = node.child.get(c);<span class="comment">//指针指向孩子节点。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.isEnd;<span class="comment">//都包含的还不行，还得看看该节点是否标记为字符串的结束标志</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>前缀树是否包含字符串的前缀</strong></p><p>和字符串代码唯一不同的是：</p><p>如果包含该字符串，最后<code>return</code>的时候，不会判断该节点是否标记为字符串结束标志。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; prefix.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> prefix.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(!node.child.containsKey(c))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        node = node.child.get(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>找到以某字符串为前缀的字符串</strong></p><p>例如：</p><p>前缀树包含的字符串有，<code>apple</code>、<code>code</code>、<code>appl</code>、<code>leet</code>、<code>apples</code>、<code>abc</code>、<code>ace</code></p><p>找到以<code>app</code>为前缀的字符们：<code>apple</code>、<code>appl</code>、<code>apples</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">searchprefix</span><span class="params">(String word)</span> &#123;</span><br><span class="line">    cnt = <span class="number">0</span>;   <span class="comment">//前缀字符串数量</span></span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> root;<span class="comment">//指针指向根节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length();i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (!node.child.containsKey(c)) <span class="keyword">return</span> res;<span class="comment">//如果不包含该前缀字符串直接return res</span></span><br><span class="line">        node = node.child.get(c);<span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找到前缀之后，以前缀末尾字符的节点开始进行深度优先遍历。</span></span><br><span class="line">    dfs(word, node, res, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(String word, Node node, List&lt;String&gt; res, String path)</span> &#123;  <span class="comment">// 深度优先搜索</span></span><br><span class="line">    <span class="keyword">if</span> (cnt &gt;= COUNT) <span class="keyword">return</span>;<span class="comment">//COUNT为要查找的前缀字符串数量</span></span><br><span class="line">    <span class="keyword">if</span> (node.isEnd &amp;&amp; !word.equals(word + path)) &#123;</span><br><span class="line">        res.add(word + path);</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;Character, Node&gt; entry : node.child.entrySet()) &#123;</span><br><span class="line">        node = entry.getValue();</span><br><span class="line">        path = path + entry.getKey();</span><br><span class="line">        dfs(word, node, res, path);</span><br><span class="line">        path = path.substring(<span class="number">0</span>, path.length() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="完整Java代码"><a href="#完整Java代码" class="headerlink" title="完整Java代码"></a>完整Java代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT</span> <span class="operator">=</span> <span class="number">10</span>;  <span class="comment">// 提示内容的最大数目</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">        Map&lt;Character,Node&gt; child;</span><br><span class="line">        <span class="type">boolean</span> isEnd;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">()</span>&#123;</span><br><span class="line">            child = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            isEnd = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Node root;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(!node.child.containsKey(c))&#123;</span><br><span class="line">                node.child.put(c,<span class="keyword">new</span> <span class="title class_">Node</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i==word.length()-<span class="number">1</span>)node.child.get(c).isEnd=<span class="literal">true</span>;</span><br><span class="line">            node = node.child.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(!node.child.containsKey(c))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            node = node.child.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node.isEnd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; prefix.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> prefix.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(!node.child.containsKey(c))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            node = node.child.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">searchprefix</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> root;    </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length();i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (!node.child.containsKey(c)) <span class="keyword">return</span> res;</span><br><span class="line">            node = node.child.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(word, node, res, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(String word, Node node, List&lt;String&gt; res, String path)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (cnt &gt;= COUNT) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.isEnd &amp;&amp; !word.equals(word + path)) &#123;</span><br><span class="line">            res.add(word + path);</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Character, Node&gt; entry : node.child.entrySet()) &#123;</span><br><span class="line">            node = entry.getValue();</span><br><span class="line">            path = path + entry.getKey();</span><br><span class="line">            dfs(word, node, res, path);</span><br><span class="line">            path = path.substring(<span class="number">0</span>, path.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">前缀树的简介以及前缀树的Java实现。</summary>
    
    
    
    <category term="数据结构" scheme="http://example.com/category/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://example.com/tag/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot跨域请求</title>
    <link href="http://example.com/post/1efeaa73.html"/>
    <id>http://example.com/post/1efeaa73.html</id>
    <published>2022-08-25T07:27:28.000Z</published>
    <updated>2022-08-25T10:22:29.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="跨域请求的概念"><a href="#跨域请求的概念" class="headerlink" title="跨域请求的概念"></a>跨域请求的概念</h1><p>浏览器出于安全的考虑，使用 <code>XMLHttpRequest</code>对象发起 HTTP请求时必须遵守同源策略，否则就是跨域的HTTP请求，<strong>默认情况下是被<font color="red">禁止</font>的</strong>。 </p><p><font color="red">同源策略</font>要求源相同才能正常进行通信，即<strong>协议、域名【或者是主机名】、端口号</strong>都完全一致。 </p><p>说通俗一点</p><ul><li>浏览器从一个域名的网页去请求另一个域名的资源时，<u>域名、端口、协议任一不同</u>，都是跨域</li><li>只要协议、域名、端口有任何一个不同，都被当作是不同的域，之间的请求就是跨域操作。</li></ul><p>例如：</p><table><thead><tr><th>前端</th><th>后端</th></tr></thead><tbody><tr><td><code>http://localost:8080</code></td><td><code>http://localhost:8081</code></td></tr></tbody></table><p>协议相同，主机名相同，但端口号不同。这就是跨域请求。</p><blockquote><p>注意</p><ul><li>只有浏览器才会有这个跨域请求的问题，如果是移动端跨域请求就不会出现问题。</li><li><code>XMLHttpRequest</code>对象就是<code>ajax</code>发送异步请求时使用的对象，所以也就是说浏览器使用<code>ajax</code>请求时才会出现跨域请求的问题。</li></ul><p>总得来说，发生跨域请求问题的场景就是：<strong>浏览器使用<code>ajax</code>请求</strong></p></blockquote><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>解决跨域请求有多种方案</p><p>我们可以使用<code>CORS</code>解决跨域。</p><h2 id="什么是CORS"><a href="#什么是CORS" class="headerlink" title="什么是CORS"></a>什么是<code>CORS</code></h2><p>​<code>CORS</code>是一个<code>W3C</code>标准，全称是”跨域资源共享”（Cross-origin resource sharing），允许浏览器向跨源服务器，发出<code>XMLHttpRequest</code>请求，从而克服了AJAX只能同源使用的限制。</p><p>​它通过服务器增加一个特殊的<code>Header[Access-Control-Allow-Origin]</code>来告诉客户端跨域的限制，如果浏览器支持<code>CORS</code>、并且判断Origin通过的话，就会允许<code>XMLHttpRequest</code>发起跨域请求。</p><p>如果是一个跨域请求，就会再发送一个带有<font color="red"><code>Origin</code></font>的请求头。里面的值就是<strong>这个页面所在的域</strong></p><p><img src="/%5Cimage%5Carticle%5CSpringBoot%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%5Cimage-20220825170142608.png" alt="image-20220825170142608"></p><p>发送给服务器之后，如果我们配置了跨域，响应头就会带有<font color="red"><code>Access-Control-Allow-Origin</code></font>，它的值表示<strong>服务器允许跨域的域</strong>，</p><p>如果该值和请求头的<code>Origin</code>值一样，则表示允许跨域。就会请求成功。</p><p><img src="/%5Cimage%5Carticle%5CSpringBoot%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%5Cimage-20220825170405785.png" alt="image-20220825170405785"></p><p>如果我们要自己使用<code>Cors</code>解决跨域请求的问题其实就是</p><p>解析请求头，然后去添加响应头就好了。但我们没必要自己去写，<code>SpringBoot</code>有这样的解决跨域请求的拦截器，只需要配置就可以。</p><blockquote><p>如果我们进行了<code>Cors</code>配置，但响应头中没有<code>Access-Control-Allow-Origin</code>，说明我们的配置是有问题的。</p></blockquote><h1 id="SpringBoot使用CORS解决跨域"><a href="#SpringBoot使用CORS解决跨域" class="headerlink" title="SpringBoot使用CORS解决跨域"></a>SpringBoot使用CORS解决跨域</h1><ul><li><p>使用<font color="gold"><code>@CrossOrigin</code></font></p><p>可以在支持跨域的<strong>方法</strong>上或者是<strong>Controller类</strong>上加上<font color="gold"><code>@CrossOrigin</code></font>注解</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServcie userServcie;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//调用service查询数据 ，进行返回</span></span><br><span class="line">        List&lt;User&gt; users = userServcie.findAll();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(<span class="number">200</span>,users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>value</code>属性可以设置多个URL。</p></li><li><p><code>origins</code>属性也可以设置多个URL。例如：<code>@CrossOrigin(origins = &quot;http://domain2.com&quot;, maxAge = 3600)</code></p></li><li><p><code>maxAge</code>属性指定了准备响应前的缓存持续的最大时间。就是探测请求的有效期。</p></li><li><p><code>allowCredentials</code>属性表示用户是否可以发送、处理 cookie。默认为false</p></li><li><p><code>allowedHeaders</code> 属性表示允许的请求头部有哪些。</p></li><li><p><code>methods</code> 属性表示允许请求的方法，默认get,post,head</p></li></ul><blockquote><p>如果你不设置他的<strong>value</strong>属性，或者是<strong>origins</strong>属性，就默认是可以允许所有的URL&#x2F;域访问。</p><p><font color="red">value和origins的效果是一样的，当value和origins同时使用时，配置的值不一样会报错!</font></p></blockquote></li><li><p>使用 <code>WebMvcConfigurer</code> 的 <code>addCorsMappings</code> 方法配置<code>CorsInterceptor</code></p><p>使用注解有一个缺陷，当我们的Controller类过多时，就需要频繁加注解。因此我们可以<strong>使用配置类才进行批量映射</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">      <span class="comment">// 设置允许跨域的路径</span></span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置允许跨域请求的域名</span></span><br><span class="line">                .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">// 是否允许cookie</span></span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">                <span class="comment">// 设置允许的请求方式</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;PUT&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置允许的header属性</span></span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">// 跨域允许时间</span></span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>addMapping(&quot;/user/**&quot;)</code>：其中* 表示匹配到下一层；** 表示后面不管有多少层，都能匹配。</p></li><li><p><code>allowedOriginPatterns(&quot;http:localhost:8080&quot;)</code>，只有<code>http:localhost:8080</code>可以访问。<code>*</code>表示任意域名</p></li><li><p><code>.maxAge(3600);</code>：</p><p>如果我们使用比较复杂的请求，比如<code>PUT</code>请求。</p><p>那这个请求它不是只发送一个请求，如果是跨域请求，浏览器会先发送一个询问允许我跨域请求的请求。如果服务端是允许的，就会再响应头中添加对应的响应头。</p><p>如果每次请求都发送一个询问请求那就会很浪费时间。</p><p>而<code>maxAge</code>相当于持久的时间。如果我们这个请求被允许了，那在3600秒之内，浏览器再去发送跨域请求，就不会再发送询问请求。</p></li></ul></li></ul><h1 id="当时使用SpringSecurity时"><a href="#当时使用SpringSecurity时" class="headerlink" title="当时使用SpringSecurity时"></a>当时使用SpringSecurity时</h1><p>当有跨域请求时，还得经过<code>SringSecurity</code>的过滤器，光靠<code>SpringBoot</code>是不行的，如果<code>SpringSecurity</code>是不允许跨域的还是不行。</p><p>因此还需要配置<code>SpringSecurity</code>来进行跨域请求。配置方法如下：<code>http.cors();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        http</span><br><span class="line">                <span class="comment">//关闭csrf</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="comment">//不通过Session获取SecurityContext</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 对于登录接口 允许匿名访问</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/login&quot;</span>).anonymous()</span><br><span class="line">                <span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">        http.cors();<span class="comment">//允许跨域请求</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">什么是跨域请求？如何解决跨域请求？当使用SpringSecurity是进行跨域请求配置。</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/category/Spring/"/>
    
    
    <category term="跨域请求" scheme="http://example.com/tag/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot静态资源配置</title>
    <link href="http://example.com/post/4c95c618.html"/>
    <id>http://example.com/post/4c95c618.html</id>
    <published>2022-08-24T12:42:15.000Z</published>
    <updated>2022-08-25T10:22:29.021Z</updated>
    
    <content type="html"><![CDATA[<p><code>SpringBoot</code>默认把静态资源文件放在<code>resource/static/</code>，默认的静态资源路径匹配为<code>/** </code>。</p><p>如果我们在<code>resource/static/</code>下放一张图片，启动<code>SpringBoot</code>后去访问它的话。访问路径为**<code>http://localhost:8080/1.png</code>**</p><p>我们可以放置的文件目录有：</p><ul><li><code>resources/static</code></li><li><code>resources/public</code></li><li><code>resources/resources</code> </li><li><code>resources/META-INF/resources</code></li></ul><h2 id="更改静态资源访问路径"><a href="#更改静态资源访问路径" class="headerlink" title="更改静态资源访问路径"></a>更改静态资源访问路径</h2><p>前面我们提到，默认的静态资源访问路径是<code>/**</code></p><p>我们可以通过配置文件来更改静态资源访问路径</p><p><strong>例如：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>资源放置目录</th><th>更改之前访问路径</th><th>更改之后访问路径</th></tr></thead><tbody><tr><td><code>resource/static/login.html</code></td><td><code>localhost:8080/login.html</code></td><td><code>localhost:8080/res/login.html</code></td></tr><tr><td><code>resource/static/page/index.html</code></td><td><code>localhost:8080/page/index.html</code></td><td><code>localhost:8080/res/page/index.html</code></td></tr></tbody></table><p>相当于多了一个前缀<code>/res/</code></p><h2 id="修改静态资源存放目录"><a href="#修改静态资源存放目录" class="headerlink" title="修改静态资源存放目录"></a>修改静态资源存放目录</h2><p>前面我们提到，静态资源只能存在以下目录。</p><ul><li><code>resources/static</code></li><li><code>resources/public</code></li><li><code>resources/resources</code> </li><li><code>resources/META-INF/resources</code></li></ul><p>当我们在<code>resources/</code>，创建了一个目录<code>data</code>【只要不是<code>static</code>、<code>public</code>、<code>resources</code>、<code>META_INF</code>就行】</p><p>把静态资源放在<code>/resouces/data/</code>目录下，启动<code>SpringBoot</code>是无法访问到的。</p><p>那我们想访问到怎么办？</p><p>修改配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">classpath:/data/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">classpath:/page/</span></span><br></pre></td></tr></table></figure><p>我们可以添加<strong>多个存放目录</strong>。</p><p>配置之前，<code>SpringBoot</code>它只知道<code>static</code>、<code>public</code>、<code>resources</code>、<code>META-INF/resources</code>这些目录下存放着静态文件。</p><p>配置之后，<code>SpringBoot</code>就知道了 除了<code>static</code>、<code>public</code>、<code>resources</code>、<code>META-INF/resources</code>这些目录下存放着静态文件。<code>data</code>、<code>page</code>这些目录也存放着静态文件。</p><p>当我们访问 <strong><code>/data/1.png</code><strong>文件时，访问路径是：</strong><code>http://localhost:8080/1.png</code></strong></p><h2 id="静态资源映射"><a href="#静态资源映射" class="headerlink" title="静态资源映射"></a>静态资源映射</h2><p>当我们进行如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">classpath:/data/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">classpath:/page/</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">访问目录</th><th align="center">访问路径</th></tr></thead><tbody><tr><td align="center"><code>/data/1.png</code></td><td align="center"><code>localhost:8080/res/1.png</code></td></tr><tr><td align="center"><code>/page/2.png</code></td><td align="center"><code>localhost:8080/res/2.png</code></td></tr></tbody></table><p>但，如果我们想<font color="red"><strong>实现如下效果</strong></font>：</p><table><thead><tr><th align="center">访问目录</th><th align="center">访问路径</th></tr></thead><tbody><tr><td align="center"><code>/data/1.png</code></td><td align="center"><code>localhost:8080/data/1.png</code></td></tr><tr><td align="center"><code>/page/2.png</code></td><td align="center"><code>localhost:8080/page/2.png</code></td></tr></tbody></table><p>那我们可以经过<font color="blue"><strong>配置类</strong></font>进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/data/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/data/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/page/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/page/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">更改静态资源访问路径,更改静态资源存放目录以及静态资源映射</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/category/Spring/"/>
    
    
    <category term="SpringBoot" scheme="http://example.com/tag/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>卷积神经网络featuremap的可视化</title>
    <link href="http://example.com/post/b3200ed2.html"/>
    <id>http://example.com/post/b3200ed2.html</id>
    <published>2022-08-24T09:48:47.000Z</published>
    <updated>2022-08-24T10:31:20.294Z</updated>
    
    <content type="html"><![CDATA[<p>所需要的Python的包：</p><ul><li>pytorch</li><li>matplotlib</li><li>opencv</li></ul><p>此次我们以LeNet进行举例</p><p>Lenet是一个 7 层的神经网络，包含 3 个卷积层，2 个池化层，1 个全连接层。其中所有卷积层的所有卷积核都为 5x5，步长 strid&#x3D;1，池化方法都为全局 pooling，激活函数为 Sigmoid，网络结构如下：</p><p><img src="/%5Cimage%5Carticle%5C%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9Cfeaturemap%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%5Cimage-20220824175322171.png" alt="image-20220824175322171"></p><p>下面我们就来可视化一下它的三个卷积层。</p><p>首先定义LeNet的网络结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LeNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(LeNet,self).__init__()</span><br><span class="line">        self.RELU = nn.ReLU()</span><br><span class="line">        self.conv1 = nn.Conv2d(in_channels=<span class="number">3</span>,out_channels=<span class="number">6</span>,kernel_size=(<span class="number">5</span>,<span class="number">5</span>),padding=(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">        self.Sigmoid = nn.Sigmoid()</span><br><span class="line">        self.avgpool = nn.AvgPool2d(kernel_size=(<span class="number">2</span>,<span class="number">2</span>),stride=<span class="number">2</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(in_channels=<span class="number">6</span>,out_channels=<span class="number">16</span>,kernel_size=(<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line">        self.avgpool2 = nn.AvgPool2d(kernel_size=(<span class="number">2</span>,<span class="number">2</span>),stride=(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">        self.conv3 = nn.Conv2d(in_channels=<span class="number">16</span>,out_channels=<span class="number">120</span>,kernel_size=(<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">        self.flatten = nn.Flatten()</span><br><span class="line">        self.line = nn.Linear(<span class="number">120</span>,<span class="number">84</span>)</span><br><span class="line">        self.output = nn.Sequential(</span><br><span class="line">            nn.Linear(in_features=<span class="number">84</span>,out_features=<span class="number">2</span>,bias=<span class="literal">False</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x = self.RELU(self.conv1(x))</span><br><span class="line">        x = self.avgpool(x)</span><br><span class="line">        x = self.RELU(self.conv2(x))</span><br><span class="line">        x = self.avgpool2(x)</span><br><span class="line">        x = self.conv3(x)</span><br><span class="line">        x = self.flatten(x)</span><br><span class="line">        x = self.line(x)</span><br><span class="line">        <span class="keyword">return</span> self.output(x)</span><br></pre></td></tr></table></figure><blockquote><p>结构是稍微有一些改变的，比如：</p><ul><li><p>激活函数我改用了RELU</p></li><li><p>输入层的通道数从单通道改为了三通道</p></li></ul><p>不过这些都问题不大，不影响我们去可视化。</p></blockquote><p>导包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> LeNet <span class="keyword">import</span> LeNet  <span class="comment">#我把网络结构的代码写到了LeNet.py，所以需要从另一个文件里导入</span></span><br></pre></td></tr></table></figure><p>首先我们需要初始化我们的网络模型，并加载之前训练好的权重文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">device = torch.device(<span class="string">&#x27;cuda&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line">model = LeNet().<span class="built_in">eval</span>()</span><br><span class="line">model.load_state_dict(torch.load(<span class="string">&quot;LeNet_model.pth&quot;</span>,map_location=<span class="string">&quot;cpu&quot;</span>))</span><br></pre></td></tr></table></figure><blockquote><p>注意，如果你的网络有BN层，<code>LeNet().eval()</code>是一定要加的，<code>.eval()</code>表示模型进入测试模式。</p></blockquote><p>定义两个列表容器，一个存卷积层的权重，一个存卷积层。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model_weights =[]</span><br><span class="line">conv_layers = []</span><br></pre></td></tr></table></figure><p>递归的遍历卷积神经网络，将卷积层和卷积层的权重存起来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getConv</span>(<span class="params">children</span>):</span><br><span class="line">    <span class="keyword">for</span> child <span class="keyword">in</span> children:</span><br><span class="line">        <span class="keyword">if</span> child.__class__.__name__ == <span class="string">&quot;Conv2d&quot;</span>:</span><br><span class="line">            model_weights.append(child.weight)</span><br><span class="line">            conv_layers.append(child)</span><br><span class="line">        <span class="keyword">elif</span> child.__class__.__name__==<span class="string">&quot;Sequential&quot;</span>:</span><br><span class="line">            getConv(child.children())</span><br><span class="line">getConv(model.children()) </span><br></pre></td></tr></table></figure><p>然后的步骤就类似于测试的步骤</p><ol><li><p>读取图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image = cv.imread(<span class="string">&quot;20160330_170504_473.jpg&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>对图片进行transform变换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">transform = transforms.Compose(</span><br><span class="line">            [</span><br><span class="line">                transforms.ToPILImage(),</span><br><span class="line">                transforms.Resize((<span class="number">28</span>,<span class="number">28</span>)),</span><br><span class="line">                transforms.ToTensor(),</span><br><span class="line">             ]</span><br><span class="line">        )</span><br><span class="line">transform_image = transform(image)</span><br></pre></td></tr></table></figure></li><li><p>由于transform_image 的维度是[3,28,28]的，我们要把他扩展成[1, 3, 28, 28]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = Variable(torch.unsqueeze(transform_image,dim=<span class="number">0</span>).<span class="built_in">float</span>(),requires_grad = <span class="literal">False</span>)</span><br></pre></td></tr></table></figure></li><li><p>利用之前的存起来的卷积层，对图片依次进行计算得到了featuremap，然后再依次存起来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">outputs = []</span><br><span class="line">names = []</span><br><span class="line"><span class="keyword">for</span> layer <span class="keyword">in</span> conv_layers:</span><br><span class="line">    x = layer(x)</span><br><span class="line">    outputs.append(x)</span><br><span class="line">    names.append(layer.__class__.__name__)</span><br></pre></td></tr></table></figure></li></ol><p>由于featuremap通道数并不是单通道，而是多通道的。我们可以把每个通道进行可视化，也可以将这些通道取平均，压缩为单通道。</p><ul><li><p>取平均，压缩为单通道**[建议压缩为单通道]**</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> output <span class="keyword">in</span> outputs:</span><br><span class="line">    output = output.squeeze(<span class="number">0</span>)</span><br><span class="line">    gray_scale = torch.<span class="built_in">sum</span>(output,<span class="number">0</span>)/output.shape[<span class="number">0</span>]</span><br><span class="line">    results.append(gray_scale.detach().numpy())</span><br></pre></td></tr></table></figure></li><li><p>存每一个通道</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> output <span class="keyword">in</span> outputs:</span><br><span class="line">    output = output.squeeze(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> feature <span class="keyword">in</span> output:</span><br><span class="line">        results.append(feature.detach().numpy())</span><br></pre></td></tr></table></figure></li></ul><p>最后就可以使用matplotlib可视化了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    plt.imshow(result)</span><br><span class="line">    <span class="comment">#plt.imshow(result,cmap=&quot;gray&quot;)</span></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p>结果：</p><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">原图</td><td align="center"><img src="/%5Cimage%5Carticle%5C%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9Cfeaturemap%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%5C20160330_170504_473.jpg" alt="20160330_170504_473"></td></tr><tr><td align="center">第一层featuremap</td><td align="center"><img src="\image\article\卷积神经网络featuremap的可视化\1.png" alt="1" style="zoom:50%;" /></td></tr><tr><td align="center">第二层featuremap</td><td align="center"><img src="\image\article\卷积神经网络featuremap的可视化\2.png" alt="2" style="zoom:50%;" /></td></tr><tr><td align="center">第三层featuremap</td><td align="center"><img src="\image\article\卷积神经网络featuremap的可视化\3.png" alt="3" style="zoom:50%;" /></td></tr></tbody></table><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> LeNet <span class="keyword">import</span> LeNet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getConv</span>(<span class="params">children</span>):</span><br><span class="line">    <span class="keyword">for</span> child <span class="keyword">in</span> children:</span><br><span class="line">        <span class="keyword">if</span> child.__class__.__name__ == <span class="string">&quot;Conv2d&quot;</span>:</span><br><span class="line">            model_weights.append(child.weight)</span><br><span class="line">            conv_layers.append(child)</span><br><span class="line">        <span class="keyword">elif</span> child.__class__.__name__==<span class="string">&quot;Sequential&quot;</span>:</span><br><span class="line">            getConv(child.children())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    device = torch.device(<span class="string">&#x27;cuda&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line">    model = LeNet().<span class="built_in">eval</span>()</span><br><span class="line">    model.load_state_dict(torch.load(<span class="string">&quot;LeNet_model.pth&quot;</span>,map_location=<span class="string">&quot;cpu&quot;</span>))</span><br><span class="line">    children = model.children()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    model_weights =[]</span><br><span class="line">    conv_layers = []</span><br><span class="line">    </span><br><span class="line">    getConv(children)</span><br><span class="line">    model.to(device)</span><br><span class="line">    transform = transforms.Compose(</span><br><span class="line">                [</span><br><span class="line">                    transforms.ToPILImage(),</span><br><span class="line">                    transforms.Resize((<span class="number">28</span>,<span class="number">28</span>)),</span><br><span class="line">                    transforms.ToTensor(),</span><br><span class="line">                 ]</span><br><span class="line">            )</span><br><span class="line">    image = cv.imread(<span class="string">&quot;20160330_170504_473.jpg&quot;</span>)</span><br><span class="line">    transform_image = transform(image)</span><br><span class="line">    x = Variable(torch.unsqueeze(transform_image,dim=<span class="number">0</span>).<span class="built_in">float</span>(),requires_grad = <span class="literal">False</span>)</span><br><span class="line">    outputs = []</span><br><span class="line">    names = []</span><br><span class="line">    <span class="keyword">for</span> layer <span class="keyword">in</span> conv_layers:</span><br><span class="line">        x = layer(x)</span><br><span class="line">        outputs.append(x)</span><br><span class="line">        names.append(layer.__class__.__name__)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> output <span class="keyword">in</span> outputs:</span><br><span class="line">        output = output.squeeze(<span class="number">0</span>)</span><br><span class="line">        gray_scale = torch.<span class="built_in">sum</span>(output,<span class="number">0</span>)/output.shape[<span class="number">0</span>]</span><br><span class="line">        results.append(gray_scale.detach().numpy())</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">        plt.imshow(result)</span><br><span class="line">        plt.show()</span><br></pre></td></tr></table></figure><p>还可以</p><p>应用于其他经典网络，比如Resnet、Alexnet、VGG等等。</p>]]></content>
    
    
    <summary type="html">神经网络对人们来说就像是一个黑箱子，并不知道其中提取了哪些特征，于是我们可以获取它的featuremap来进行可视化。以LeNet为例。</summary>
    
    
    
    <category term="Python" scheme="http://example.com/category/Python/"/>
    
    
    <category term="神经网络" scheme="http://example.com/tag/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合Mybatis-plus</title>
    <link href="http://example.com/post/c1b62771.html"/>
    <id>http://example.com/post/c1b62771.html</id>
    <published>2022-08-23T12:41:18.000Z</published>
    <updated>2022-08-24T10:31:20.285Z</updated>
    
    <content type="html"><![CDATA[<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><ul><li>mybatis-plus</li><li>mysql驱动</li><li>druid数据库连接池【可选】</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Druid数据库连接池，可以不加，使用默认的数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h3><ul><li><p>使用druid数据源</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/reggie?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure></li><li><p>使用默认数据源</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/reggie?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure></li></ul><p>当我们在Mapper包下创建接口时，为了表示此接口为Mapper接口。</p><p>有两种选择：</p><ul><li><p>在每个Mapper接口上使用<font color="gold"><strong>@Mapper</strong></font>注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在启动类上配置Mapper扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="设置表名的映射规则"><a href="#设置表名的映射规则" class="headerlink" title="设置表名的映射规则"></a>设置表名的映射规则</h3><p>默认情况下MP操作的表名就是实体类的类名，但是如果表名和类名不一致就需要我们自己设置映射规则。</p><p>如果不进行表名映射规则的设定，则需要<strong>数据库的表名</strong>和<strong>实体类名</strong>要保持一致。</p><p>如果不一致，有两种设置方法</p><ul><li><p>单独设置</p><p>可以在实体类的类名上加上<font color="gold"><strong>@TableName</strong></font>注解进行标识。</p><p>如果表名是tb_user，而实体类名是User则可以使用以下写法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>全局设置</p><p>如果数据库中的表，都有一个公共的前缀</p><blockquote><p>比如：</p><ul><li><p>数据库表：sys_user，sys_menu，sys_dish…</p></li><li><p>实体类：User，Menu，Dish</p></li></ul></blockquote><p>然后就可以在配置文件中，全局设置表名前缀</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment">#表名前缀</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">sys_</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="设置主键生成策略"><a href="#设置主键生成策略" class="headerlink" title="设置主键生成策略"></a>设置主键生成策略</h3><p>Mybatis Plus 为我们提供了三种设置 主键生成策略的方式。它们的优先级顺序是：局部注解 &gt; 全局 &gt; 默认(雪花算法)。</p><p>Mybatis Plus如果不做任何主键策略配置，<strong>默认使用的是雪花算法</strong>。该策略会根据雪花算法生成主键ID，主键类型为Long或String</p><ul><li><p>局部注解</p><p>我们可以在实体类的Id字段上使用<font color="gold">@TableId</font>注解，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"><span class="comment">//.....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全部主键策略定义在了枚举类<code>IdType</code>中，<code>IdType</code>有如下的取值</p><ul><li><p><code>AUTO</code></p><p>数据库ID自增，<strong>依赖于数据库</strong>。该类型请确保数据库设置了 ID自增 否则无效</p></li><li><p><code>NONE</code></p><p>未设置主键类型。若在代码中没有手动设置主键，则会根据<strong>主键的全局策略</strong>自动生成（默认的主键全局策略是基于雪花算法的自增ID）</p></li><li><p><code>INPUT</code></p><p>需要手动设置主键，若不设置。插入操作生成SQL语句时，主键这一列的值会是<code>null</code>。</p></li><li><p><code>ASSIGN_ID</code></p><p>当没有手动设置主键，即实体类中的主键属性为空时，才会自动填充，使用雪花算法</p></li><li><p><code>ASSIGN_UUID</code></p><p>当实体类的主键属性为空时，才会自动填充，使用UUID</p></li></ul></li><li><p>全局配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment"># id生成策略 auto为数据库自增</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="设置字段映射规则"><a href="#设置字段映射规则" class="headerlink" title="设置字段映射规则"></a>设置字段映射规则</h3><p>默认情况下MP会根据实体类的属性名去映射表的列名。</p><p>也就是说，在什么都不配置的情况下，<strong>实体类的属性名</strong>和<strong>映射表的列名</strong>必须一致。</p><p>如果不一致，可以使用<font color="gold"><code>@TableField</code></font>来设置映射关系。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(&quot;address&quot;)</span><span class="comment">//列名为address,字段名为addressStr</span></span><br><span class="line"><span class="keyword">private</span> String addressStr;</span><br></pre></td></tr></table></figure><h3 id="设置字段和列名的驼峰映射"><a href="#设置字段和列名的驼峰映射" class="headerlink" title="设置字段和列名的驼峰映射"></a>设置字段和列名的驼峰映射</h3><p><font color="red">默认情况</font>下MP会开启<strong>字段名列名的驼峰映射</strong>， 即从经典数据库列名 A_COLUMN（下划线命名） 到经典 Java 属性名 aColumn（驼峰命名） 的类似映射 。</p><table><thead><tr><th align="center">属性名&#x2F;类名</th><th align="center">列名&#x2F;表名</th></tr></thead><tbody><tr><td align="center">userName</td><td align="center">user_name</td></tr><tr><td align="center">passWord</td><td align="center">pass_word</td></tr></tbody></table><p>我们可以在配置文件中关闭这中映射</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>配置方式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># 日志</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">添加依赖，配置数据源、映射规则配置以及主键生成配置。</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/category/Spring/"/>
    
    
    <category term="Mybatis-plus" scheme="http://example.com/tag/Mybatis-plus/"/>
    
  </entry>
  
  <entry>
    <title>SpringSecurity配置类</title>
    <link href="http://example.com/post/627dc999.html"/>
    <id>http://example.com/post/627dc999.html</id>
    <published>2022-08-22T07:32:49.000Z</published>
    <updated>2022-08-22T12:28:51.386Z</updated>
    
    <content type="html"><![CDATA[<p>在学习这门课的时候，实现各种功能时进行了各种配置。我想将各种配置综合讲述一下。</p><p>首先自定义配置类，需要继承<code>WebSecurityConfigurerAdapter</code>这个类。</p><p>在这个类里面做了一些<strong>默认配置</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span>&#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font size=5><strong>更改<code>PasswordEncoder</code>的实现为<code>BCryptPasswordEncoder</code>。</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font size=5><strong>注入<code>AuthenticationManager</code>,用它的方法进行认证</strong></font></p><p><code>authenticationManager.authenticate()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="安全过滤器链配置方法HttpSecurity-http配置方法"><a href="#安全过滤器链配置方法HttpSecurity-http配置方法" class="headerlink" title="安全过滤器链配置方法HttpSecurity http配置方法"></a><code>安全过滤器链配置方法HttpSecurity http</code>配置方法</h2><h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="built_in">super</span>.configure(http);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>super.configure(http);</code>使用了父类中一些<font color="red"><strong>默认配置</strong></font>。查看源代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    ((HttpSecurity)((HttpSecurity)((AuthorizedUrl)http.authorizeRequests().anyRequest()).authenticated()</span><br><span class="line">                    .and()).</span><br><span class="line">     formLogin()</span><br><span class="line">     .and())</span><br><span class="line">    .httpBasic();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>http.authorizeRequests().anyRequest().authenticated()</code>表示<strong>对任何请求都要进行权限认证</strong></p><p><code>http.formLogin()</code>，加入了<code>UsernamePasswordAuthenticationFilter</code>过滤器。</p><p>默认配置：</p><ul><li>所有的请求访问都需要被授权。</li><li>使用 form 表单进行登陆(默认路径为&#x2F;login)，也就是前几篇我们见到的登录页。</li><li>防止 <code>CSRF</code> 攻击、<code>XSS</code>攻击。</li><li>启用 HTTP Basic 认证</li></ul><h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><p>关闭防止<code>csrf</code>攻击</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.csrf().disable()</span><br></pre></td></tr></table></figure><blockquote><p>为什么要关闭防止<code>csrf</code>攻击?</p><p><code>CSRF</code>是指跨站请求伪造（Cross-site request forgery），是web常见的攻击之一。</p><p>​<a href="https://blog.csdn.net/freeking101/article/details/86537087">https://blog.csdn.net/freeking101/article/details/86537087</a></p><p><code>SpringSecurity</code>去防止<code>CSRF</code>攻击的方式就是通过<code>csrf_token</code>。后端会生成一个<code>csrf_token</code>，前端发起请求的时候需要携带这个<code>csrf_token</code>,后端会有过滤器进行校验，如果没有携带或者是伪造的就不允许访问。</p><p>但是在前后端分离的项目中我们的认证信息其实是token，而token并不是存储中cookie中，并且需要前端代码去把token设置到请求头中才可以，所以<code>CSRF</code>攻击也就不用担心了。</p><p>因此使用token是天然防止<code>csrf</code>攻击的。</p></blockquote><p>不通过<code>Session</code>获取<code>SecurityContext</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br></pre></td></tr></table></figure><h3 id="权限配置"><a href="#权限配置" class="headerlink" title="权限配置"></a>权限配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/user/login&quot;</span>).anonymous()</span><br><span class="line">                        .anyRequest().authenticated();</span><br></pre></td></tr></table></figure><p>对于登录接口 允许匿名访问除上面外的所有请求全部需要鉴权认证</p><blockquote><p>参考链接：</p><p><a href="https://blog.csdn.net/qq_41865652/article/details/123685248">https://blog.csdn.net/qq_41865652/article/details/123685248</a></p><p><a href="https://blog.csdn.net/Shair911/article/details/104181917/">https://blog.csdn.net/Shair911/article/details/104181917/</a></p></blockquote><p><code>http.authorizeRequests()</code>主要是对<code>url</code>进行访问权限控制，通过这个方法来实现<code>url</code>授权操作。</p><ul><li><p><code>anyRequest()</code>，表示匹配所有的<code>url</code>请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http.authorizeRequests()</span><br><span class="line">        <span class="comment">// 匹配所有的请求，并且所有请求都需要登录认证</span></span><br><span class="line">        .anyRequest().authenticated();</span><br></pre></td></tr></table></figure></li><li><p><code>antMatcher(String regx)</code>，传递一个<code>ant</code>表达式参数，表示匹配所有满足<code>ant</code>表达式的请求</p><ul><li><p><strong>ant表达式中特殊字符解释</strong></p><table><thead><tr><th>规则</th><th>解释说明</th></tr></thead><tbody><tr><td>？</td><td>匹配一个字符</td></tr><tr><td>*</td><td>匹配0个或多个字符</td></tr><tr><td>**</td><td>匹配0个或多个目录</td></tr></tbody></table><p>配置类代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">http.authorizeRequests()</span><br><span class="line">        <span class="comment">// 允许登录页面匿名访问</span></span><br><span class="line">        .antMatchers(<span class="string">&quot;/showLogin&quot;</span>, <span class="string">&quot;/errPage&quot;</span>).anonymous()</span><br><span class="line">        <span class="comment">// 所有的静态资源允许匿名访问</span></span><br><span class="line">        .antMatchers(</span><br><span class="line">                <span class="string">&quot;/css/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/js/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/images/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/fonts/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/favicon.ico&quot;</span></span><br><span class="line">                ).anonymous()</span><br><span class="line">        <span class="comment">// 其他所有的请求都需要登录认证</span></span><br><span class="line">        .anyRequest().authenticated();</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>antMatcher(HttpMethod.*, String regx)</code>，传递一个请求方法类型参数加ant表达式参数，表示匹配所有满足ant表达式的指定请求方式的<code>url</code></p><p>请求方式的枚举类如下：</p><p><img src="/%5Cimage%5Carticle%5CSpringSecurity%E9%85%8D%E7%BD%AE%E7%B1%BB%5Cimage-20220822175402125.png" alt="image-20220822175402125"></p><p>配置类代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http.authorizeRequests()</span><br><span class="line">    <span class="comment">// 允许GET请求登录页面匿名访问</span></span><br><span class="line">    .antMatchers(HttpMethod.GET, <span class="string">&quot;/showLogin&quot;</span>, <span class="string">&quot;/errPage&quot;</span>).anonymous();</span><br></pre></td></tr></table></figure></li></ul><h3 id="访问控制方法"><a href="#访问控制方法" class="headerlink" title="访问控制方法"></a>访问控制方法</h3><table><thead><tr><th align="center">方法名称</th><th align="center">方法作用</th></tr></thead><tbody><tr><td align="center"><code>permitAll()</code></td><td align="center">表示所匹配的URL任何人都允许访问</td></tr><tr><td align="center"><code>anonymous()</code></td><td align="center">表示可以<strong>匿名访问</strong>匹配的URL。和<code>permitAll()</code>效果类似，只是设置为<code>anonymous()</code>的url会执行<code>filterChain</code>中的filter</td></tr><tr><td align="center"><code>denyAll()</code></td><td align="center">表示所匹配的URL都不允许被访问。</td></tr><tr><td align="center"><code>authenticated()</code></td><td align="center">表示所匹配的URL都需要被认证才能访问</td></tr><tr><td align="center"><code>rememberMe()</code></td><td align="center">允许通过remember-me登录的用户访问</td></tr><tr><td align="center"><code>access()</code></td><td align="center"><code>SpringEl</code>表达式结果为true时可以访问</td></tr><tr><td align="center"><code>fullyAuthenticated()</code></td><td align="center">用户完全认证可以访问（非remember-me下自动登录）</td></tr><tr><td align="center"><code>hasRole()</code></td><td align="center">如果有参数，参数表示角色，则其角色可以访问</td></tr><tr><td align="center"><code>hasAnyRole()</code></td><td align="center">如果有参数，参数表示角色，则其中任何一个角色可以访问</td></tr><tr><td align="center"><code>hasAuthority()</code></td><td align="center">如果有参数，参数表示权限，则其权限可以访问</td></tr><tr><td align="center"><code>hasAnyAuthority()</code></td><td align="center">如果有参数，参数表示权限，则其中任何一个权限可以访问</td></tr><tr><td align="center"><code>hasIpAddress()</code></td><td align="center">如果有参数，参数表示<code>IP</code>地址，如果用户<code>IP</code>和参数匹配，则可以访问</td></tr></tbody></table><p>配置案例示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//任何用户都可以访问</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/index&quot;</span>).permitAll();</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/index&quot;</span>).access(<span class="string">&quot;permitAll&quot;</span>);]</span><br><span class="line"></span><br><span class="line"><span class="comment">//任何用户都不能访问</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/home&quot;</span>).denyAll();</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/home&quot;</span>).access(<span class="string">&quot;denyAll&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//认证用户可以访问（除了匿名认证）</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).authenticated();</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).access(<span class="string">&quot;authenticated&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//认证用户可以访问（除了匿名认证，记住我）</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).fullyAuthenticated();</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).access(<span class="string">&quot;fullyAuthenticated&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//记住我的认证可以访问</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).rememberMe();</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).access(<span class="string">&quot;rememberMe&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名用户可以访问</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).anonymous();</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).access(<span class="string">&quot;anonymous&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否有权限</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/index&quot;</span>).hasAuthority(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/index&quot;</span>).access(<span class="string">&quot;hasAuthority(&#x27;user&#x27;)&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否有任意一个权限</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/home&quot;</span>).hasAnyAuthority(<span class="string">&quot;update&quot;</span>, <span class="string">&quot;delete&quot;</span>, <span class="string">&quot;insert&quot;</span>);</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/home&quot;</span>).access(<span class="string">&quot;hasAnyAuthority(&#x27;update&#x27;,&#x27;delete&#x27;,&#x27;insert&#x27;)&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//spring security中的role并非是一个或多个权限的集合，而是权限的一种，通常以ROLE_开头</span></span><br><span class="line"><span class="comment">//role就是ROLE_开头的权限</span></span><br><span class="line"><span class="comment">//注意：hasRole、hasAnyRole里面的role不需要以ROLE_开头，否则会报异常</span></span><br><span class="line"><span class="comment">//注意：如果在access里面使用hasRole、hasAnyRole则ROLE_前缀可加，可不加</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/index&quot;</span>).hasRole(<span class="string">&quot;GUEST&quot;</span>);</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/index&quot;</span>).access(<span class="string">&quot;hasRole(&#x27;GUEST&#x27;)&quot;</span>);</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).hasAuthority(<span class="string">&quot;ROLE_GUEST&quot;</span>);</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/home&quot;</span>).hasAnyRole(<span class="string">&quot;GUEST&quot;</span>, <span class="string">&quot;USER&quot;</span>, <span class="string">&quot;ADMIN&quot;</span>);</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/home&quot;</span>).access(<span class="string">&quot;hasAnyRole(&#x27;ROLE_GUEST&#x27;,&#x27;ROLE_USER&#x27;,&#x27;ROLE_ADMIN&#x27;)&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="添加过滤器到过滤器链"><a href="#添加过滤器到过滤器链" class="headerlink" title="添加过滤器到过滤器链"></a>添加过滤器到过滤器链</h3><p>先将获取过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br></pre></td></tr></table></figure><p>然后配置到过滤器链中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line"><span class="comment">//将jwtAuthenticationTokenFilter 过滤器放到UsernamePasswordAuthenticationFilter过滤器前。</span></span><br></pre></td></tr></table></figure><ul><li><p><code>addFilterBefore()</code>：将过滤器放到 **过滤器之前。</p></li><li><p><code>addFilter()</code>：将过滤器放到过滤器链最后。</p></li><li><p><code>addFilterAfter()</code>：将过滤器放到 **过滤器之后。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.addFilterAfter(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line"><span class="comment">//将jwtAuthenticationTokenFilter 过滤器放到UsernamePasswordAuthenticationFilter过滤器后。</span></span><br></pre></td></tr></table></figure></li><li><p><code>addFilterAt</code>：将过滤器放在**过滤的位置。并不是取代。</p></li></ul><h3 id="配置异常处理器"><a href="#配置异常处理器" class="headerlink" title="配置异常处理器"></a>配置异常处理器</h3><p>先获取异常处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AuthenticationEntryPoint authenticationEntryPoint;</span><br></pre></td></tr></table></figure><p>然后进行配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.exceptionHandling().authenticationEntryPoint(authenticationEntryPoint)</span><br><span class="line">        .accessDeniedHandler(accessDeniedHandler);</span><br></pre></td></tr></table></figure><h3 id="表单登录配置"><a href="#表单登录配置" class="headerlink" title="表单登录配置"></a>表单登录配置</h3><p>取消默认的自带的表单登录配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.formLogin().disable();</span><br></pre></td></tr></table></figure><p>配置演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception  &#123;</span><br><span class="line">http</span><br><span class="line">.formLogin()<span class="comment">//开启formLogin默认配置        </span></span><br><span class="line">.loginPage(<span class="string">&quot;/login/auth&quot;</span>).permitAll()<span class="comment">//请求时未登录跳转接口</span></span><br><span class="line">                .failureUrl(<span class="string">&quot;/login/fail&quot;</span>)<span class="comment">//用户密码错误跳转接口</span></span><br><span class="line">.defaultSuccessUrl(<span class="string">&quot;/login/success&quot;</span>,<span class="literal">true</span>)<span class="comment">//登录成功跳转接口</span></span><br><span class="line">.loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)<span class="comment">//post登录接口，登录验证由系统实现</span></span><br><span class="line">.usernameParameter(<span class="string">&quot;username&quot;</span>)<span class="comment">//要认证的用户参数名，默认username</span></span><br><span class="line">.passwordParameter(<span class="string">&quot;password&quot;</span>)<span class="comment">//要认证的密码参数名，默认password</span></span><br><span class="line">.and()</span><br><span class="line">.logout()<span class="comment">//配置注销</span></span><br><span class="line">.logoutUrl(<span class="string">&quot;/logout&quot;</span>)<span class="comment">//注销接口</span></span><br><span class="line">.logoutSuccessUrl(<span class="string">&quot;/login/logout&quot;</span>).permitAll()<span class="comment">//注销成功跳转接口</span></span><br><span class="line">.deleteCookies(<span class="string">&quot;myCookie&quot;</span>) <span class="comment">//删除自定义的cookie</span></span><br><span class="line">.and()</span><br><span class="line">.csrf().disable();           <span class="comment">//禁用csrf</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>formLogin()</code>就会添加如下过滤器</p><ul><li><code>UsernamePasswordAuthenticationFilter</code></li><li><code>DefaultLoginPageGeneratingFilter</code></li><li><code>DefaultLogoutPageGeneratingFilter</code></li></ul><p><strong>添加认证成功处理器和认证失败处理器</strong></p><p>先获取认证成功处理器和认证失败处理器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AuthenticationSuccessHandler successHandler;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AuthenticationFailureHandler failureHandler;</span><br></pre></td></tr></table></figure><p>然后再进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> http.formLogin()</span><br><span class="line"><span class="comment">//                配置认证成功处理器</span></span><br><span class="line">      .successHandler(successHandler)</span><br><span class="line"><span class="comment">//                配置认证失败处理器</span></span><br><span class="line">      .failureHandler(failureHandler);</span><br></pre></td></tr></table></figure><h1 id="总的配置代码"><a href="#总的配置代码" class="headerlink" title="总的配置代码"></a>总的配置代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationEntryPoint authenticationEntryPoint;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        http</span><br><span class="line">                <span class="comment">//关闭csrf</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="comment">//不通过Session获取SecurityContext</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 对于登录接口 允许匿名访问</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/login&quot;</span>).anonymous()</span><br><span class="line">                <span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置异常处理器。</span></span><br><span class="line">        http.exceptionHandling().authenticationEntryPoint(authenticationEntryPoint)</span><br><span class="line">                .accessDeniedHandler(accessDeniedHandler);</span><br><span class="line"></span><br><span class="line">        http.authorizeRequests().antMatchers().hasAuthority(<span class="string">&quot;system:test:index&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">在学习 三更老师 的SpringSecurity课程后所做的配置类的笔记综述</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/category/Spring/"/>
    
    
    <category term="Spring-Security" scheme="http://example.com/tag/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>SpringSecurity其他认证方案</title>
    <link href="http://example.com/post/6c46e8af.html"/>
    <id>http://example.com/post/6c46e8af.html</id>
    <published>2022-08-22T07:32:32.000Z</published>
    <updated>2022-08-22T12:25:41.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="之前的认证方案"><a href="#之前的认证方案" class="headerlink" title="之前的认证方案"></a>之前的认证方案</h1><p>回顾一下之前的认证方案</p><p>我们的认证是自定义了一个认证处理器<code>JwtAuthenticationTokenFilter</code>，并把他加在了<code>UsernamePasswordAuthenticationFilter</code>过滤器的前面。<font color="red"><strong>在过滤器链中我们去掉了<code>UsernamePasswordAuthenticationFilter</code></strong></font></p><p>登录认证的过程是：</p><ol><li><p>先经过<code>JwtAuthenticationTokenFilter</code>，查看token。</p></li><li><p>token为null放行。</p></li><li><p>然后进入登录接口<code>/user/login</code>，然后调用了Service层的<code>LoginService</code>。</p></li><li><p>在<code>LoginServiceImpl</code>里，实现了<strong>认证过程</strong>。</p><p>调用<code>authenticationManager.authenticate()</code>方法进行认证。</p><ul><li>认证成功【<code>UsernamePasswordAuthenticationToken!=null</code>】</li></ul><blockquote><ol><li><code>UsernamePasswordAuthenticationToken</code>中获取<code>UserDetails</code>的实现类<code>LoginUser</code>。</li><li>从<code>Loginuser</code>中获取<code>UserId</code>。</li><li>使用<code>Jwt</code>工具类加密<code>userId</code>生成<code>token</code>。</li><li>将<code>Loginuser</code>存储到<code>redis</code>中。</li><li>将<code>token</code>封装成响应体返回给前端。</li></ol></blockquote><ul><li>认证失败【<code>UsernamePasswordAuthenticationToken==null</code>】</li></ul><blockquote><p>抛出异常。<code>throw new RuntimeException(&quot;用户名或密码错误&quot;);</code></p></blockquote></li></ol><p><strong>注意：我们没有使用<code>UsernamePasswordAuthenticationFilter</code></strong></p><h1 id="另一种认证方案"><a href="#另一种认证方案" class="headerlink" title="另一种认证方案"></a>另一种认证方案</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>我们将<strong>认证成功处理的内容</strong> 和 <strong>认证失败处理的内容</strong>都放在了<code>LoginServiceImpl</code>。</p><p>而实际上<code>UsernamePasswordAuthenticationFilter</code>过滤器，里面自带了认证成功处理器和认证失败处理器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsernamePasswordAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title class_">AbstractAuthenticationProcessingFilter</span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p><code>UsernamePasswordAuthenticationFilter</code>继承了一个抽象的父类<code>AbstractAuthenticationProcessingFilter</code>。</p><p>我们来看一看其中的<code>doFilter</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractAuthenticationProcessingFilter</span> <span class="keyword">extends</span> <span class="title class_">GenericFilterBean</span> <span class="keyword">implements</span> <span class="title class_">ApplicationEventPublisherAware</span>, MessageSourceAware &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">AuthenticationSuccessHandler</span> <span class="variable">successHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SavedRequestAwareAuthenticationSuccessHandler</span>();  <span class="comment">//默认的认证成功处理器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">AuthenticationFailureHandler</span> <span class="variable">failureHandler</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line"> <span class="title class_">SimpleUrlAuthenticationFailureHandler</span>();<span class="comment">//默认的认证失败处理器。</span></span><br><span class="line">   <span class="comment">//.....</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest)req;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse)res;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.requiresAuthentication(request, response)) &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">                <span class="built_in">this</span>.logger.debug(<span class="string">&quot;Request is to process authentication&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Authentication authResult;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                authResult = <span class="built_in">this</span>.attemptAuthentication(request, response);<span class="comment">//获取用户信息Authentication</span></span><br><span class="line">                <span class="keyword">if</span> (authResult == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">this</span>.sessionStrategy.onAuthentication(authResult, request, response);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InternalAuthenticationServiceException var8) &#123;<span class="comment">//发生异常---&gt;认证失败</span></span><br><span class="line">                <span class="built_in">this</span>.logger.error(<span class="string">&quot;An internal error occurred while trying to authenticate the user.&quot;</span>, var8);</span><br><span class="line">                <span class="built_in">this</span>.unsuccessfulAuthentication(request, response, var8);<span class="comment">//调用了认证失败处理方法。</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (AuthenticationException var9) &#123;<span class="comment">//发生异常---&gt;认证失败</span></span><br><span class="line">                <span class="built_in">this</span>.unsuccessfulAuthentication(request, response, var9);<span class="comment">//调用了认证失败处理方法。</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.continueChainBeforeSuccessfulAuthentication) &#123;</span><br><span class="line">                chain.doFilter(request, response);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//能运行到这说明认证成功了</span></span><br><span class="line">            <span class="built_in">this</span>.successfulAuthentication(request, response, chain, authResult);<span class="comment">//调用认证成功处理方法。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//successfulAuthentication  认证成功处理方法</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">successfulAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">       <span class="comment">//省略...</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.successHandler.onAuthenticationSuccess(request, response, authResult);<span class="comment">//调用了认证成功处理器的处理方法。</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//unsuccessfulAuthentication 认证失败处理方法。</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">unsuccessfulAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//省略...</span></span><br><span class="line">        <span class="built_in">this</span>.failureHandler.onAuthenticationFailure(request, response, failed);<span class="comment">//调用了认证失败处理器的处理方法。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>private AuthenticationSuccessHandler successHandler</code>认证成功处理器<strong>接口</strong></li><li><code>private AuthenticationFailureHandler failureHandler</code>认证失败处理器<strong>接口</strong></li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>实际上在<code>UsernamePasswordAuthenticationFilte</code>r进行登录认证的时候</p><ul><li>如果登录成功了是会调用<code>AuthenticationSuccessHandle</code>r的方法进行认证成功后的处理的。<code>AuthenticationSuccessHandler</code>就是登录成功处理器。</li><li>如果认证失败了是会调用<code>AuthenticationFailureHandler</code>的方法进行认证失败后的处理的。<code>AuthenticationFailureHandler</code>就是登录失败处理器。</li></ul><p>因此</p><p><img src="/%5Cimage%5Carticle%5CSpringSecurity%E5%85%B6%E4%BB%96%E8%AE%A4%E8%AF%81%E6%96%B9%E6%A1%88%5Cimage-20220822165028412.png" alt="image-20220822165028412"></p><p>自定义<strong>认证成功处理器</strong> </p><ol><li>实现接口<code>AuthenticationSuccessHandler</code></li><li>注入Spring容器</li><li>撰写方法体</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SGSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationSuccessHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;认证成功了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义<strong>认证失败处理器</strong> </p><ol><li>实现接口<code>AuthenticationFailureHandler</code></li><li>注入Spring容器</li><li>撰写方法体</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SGFailureHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationFailureHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后使用配置类进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationSuccessHandler successHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationFailureHandler failureHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.formLogin()</span><br><span class="line"><span class="comment">//                配置认证成功处理器</span></span><br><span class="line">                .successHandler(successHandler)</span><br><span class="line"><span class="comment">//                配置认证失败处理器</span></span><br><span class="line">                .failureHandler(failureHandler);</span><br><span class="line"></span><br><span class="line">        http.authorizeRequests().anyRequest().authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="登出成功处理器【了解一下即可】"><a href="#登出成功处理器【了解一下即可】" class="headerlink" title="登出成功处理器【了解一下即可】"></a>登出成功处理器【了解一下即可】</h1><p>自定义<strong>登出成功处理器</strong> </p><ol><li>实现接口<code>AuthenticationFailureHandler</code></li><li>注入Spring容器</li><li>撰写方法体</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SGLogoutSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">LogoutSuccessHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLogoutSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;注销成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http.logout()</span><br><span class="line">          <span class="comment">//配置注销成功处理器</span></span><br><span class="line">          .logoutSuccessHandler(logoutSuccessHandler);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">认证成功处理器，认证失败处理器，登出处理器.</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/category/Spring/"/>
    
    
    <category term="Spring-Security" scheme="http://example.com/tag/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>SpringSecurity中的异常处理</title>
    <link href="http://example.com/post/6e466a9f.html"/>
    <id>http://example.com/post/6e466a9f.html</id>
    <published>2022-08-21T13:38:13.000Z</published>
    <updated>2022-08-22T06:38:11.956Z</updated>
    
    <content type="html"><![CDATA[<p>在<strong>认证失败</strong>或者是<strong>授权失败</strong>的情况下也能和我们的接口一样返回相同结构的<code>json</code>。</p><p>这样可以让前端能对响应进行统一的处理。要实现这个功能我们需要知道<code>SpringSecurity</code>的异常处理机制。</p><p>例如：当我们登录时</p><p>如果登录失败，返回的<code>JSON</code>如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-08-21T14:00:09.643+00:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">403</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Forbidden&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/user/login&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>如果登录成功，返回的<code>JSON</code>如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;登陆成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIzYjg0MDEzZTk4MjA0OWViYmQwMTUxZTVlYTViMjllYSIsInN1YiI6IjMiLCJpc3MiOiJzZyIsImlhdCI6MTY2MTA5MDUzNCwiZXhwIjoxNjYxMDk0MTM0fQ.4gxXmtTBqpIE7TpuTGnpCxlkSOw7ikOagzLypc2pQPU&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>为了统一<code>JSON</code>的格式</p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E6%8E%88%E6%9D%83%5Cimage-20211214144425527-16611501787821.png" alt="image-20211214144425527"></p><p>在<code>SpringSecurity</code>中，如果我们在认证或者授权的过程中出现了异常会被<code>ExceptionTranslationFilter</code>捕获到。在<code>ExceptionTranslationFilter</code>中会去判断是认证失败还是授权失败出现的异常。</p><blockquote><p>注意：在认证授权的过程中发生的任何异常都会被抛出，也就是说在控制台是看不见的。当程序在认证授权过程中出问题时，需要DEBUG去查看，然后<code>try...catch</code>捕获异常，看看是什么原因报错。</p></blockquote><ul><li><p>如果是<strong>认证过程</strong>中出现的异常会被封装成<code>AuthenticationException</code>然后调用<font color="blue"><code>AuthenticationEntryPoint</code></font>对象的方法去进行异常处理。</p></li><li><p>如果是<strong>授权过程</strong>中出现的异常会被封装成<code>AccessDeniedException</code>然后调用<font color="blue"><code>AccessDeniedHandler</code></font>对象的方法去进行异常处理。</p></li></ul><h3 id="自定义异常处理"><a href="#自定义异常处理" class="headerlink" title="自定义异常处理"></a>自定义异常处理</h3><p>如果我们需要自定义异常处理，我们只需要自定义<font color="blue"><code>AuthenticationEntryPoint</code></font>和<font color="blue"><code>AccessDeniedHandler</code></font>然后配置给<code>SpringSecurity</code>即可。</p><ol><li><p>创建一个包 <code>handler</code></p></li><li><p>自定义实现类</p><ol><li><p>实现<font color="blue"><code>AuthenticationEntryPoint</code></font>接口【处理认证过程中】</p><ol><li><p>首先需要定义一个响应对象，<code>new ResponseResult(403, &quot;权限不足&quot;);</code></p><p>认证失败响应码可以是401，或者是<code>HttpStatus.UNAUTHORIZED.value()</code>。</p></li><li><p>将对象序列化为<code>JSON</code>字符串<code>JSON.toJSONString()</code></p></li><li><p>使用<code>WebUtils</code>工具类，将字符串写到<code>response</code>中</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthenticationEntryPointImpl</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationEntryPoint</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(<span class="number">401</span>, <span class="string">&quot;认证失败请重新登录&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(result);</span><br><span class="line">        WebUtils.renderString(response,json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>实现<font color="blue"><code>AccessDeniedHandler</code></font>接口【处理授权过程中】</p><p>过程和上面一样</p><p>权限不足响应码可以是403，或者是<code>HttpStatus.FORBIDDEN.value()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessDeniedHandlerImpl</span> <span class="keyword">implements</span> <span class="title class_">AccessDeniedHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AccessDeniedException e)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(<span class="number">403</span>, <span class="string">&quot;权限不足&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(result);</span><br><span class="line">        WebUtils.renderString(httpServletResponse,jsonString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>配置<code>SpringSecurity</code>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationEntryPoint authenticationEntryPoint;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置异常处理器。</span></span><br><span class="line">        http.exceptionHandling()</span><br><span class="line">            .authenticationEntryPoint(authenticationEntryPoint)</span><br><span class="line">            .accessDeniedHandler(accessDeniedHandler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><code>WebUtils</code>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebUtils</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字符串渲染到客户端</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 渲染对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string 待渲染的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">renderString</span><span class="params">(HttpServletResponse response, String string)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            response.setStatus(<span class="number">200</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().print(string);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还拿之前的举例</p><p>例如：当我们登录时</p><p>如果登录失败，返回的<code>JSON</code>如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">403</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;认证失败请重新登录&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>如果登录成功，返回的<code>JSON</code>如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;登陆成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIzYjg0MDEzZTk4MjA0OWViYmQwMTUxZTVlYTViMjllYSIsInN1YiI6IjMiLCJpc3MiOiJzZyIsImlhdCI6MTY2MTA5MDUzNCwiZXhwIjoxNjYxMDk0MTM0fQ.4gxXmtTBqpIE7TpuTGnpCxlkSOw7ikOagzLypc2pQPU&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">使用SpringSecurity的异常处理的过滤器对向前端的响应进行统一。</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/category/Spring/"/>
    
    
    <category term="Spring-Security" scheme="http://example.com/tag/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Security授权</title>
    <link href="http://example.com/post/eb53ef22.html"/>
    <id>http://example.com/post/eb53ef22.html</id>
    <published>2022-08-20T10:04:25.000Z</published>
    <updated>2022-08-22T12:25:16.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="授权系统的作用"><a href="#授权系统的作用" class="headerlink" title="授权系统的作用"></a>授权系统的作用</h1><p>例如一个学校图书馆的管理系统，如果是普通学生登录就能看到借书还书相关的功能，不可能让他看到并且去使用添加书籍信息，删除书籍信息等功能。但是如果是一个图书馆管理员的账号登录了，应该就能看到并使用添加书籍信息，删除书籍信息等功能。</p><p>​总结起来就是<font color="red"><strong>不同的用户可以使用不同的功能</strong></font>。这就是权限系统要去实现的效果。</p><p>​我们不能只依赖前端去判断用户的权限来选择显示哪些菜单哪些按钮。因为如果只是这样，如果有人知道了对应功能的接口地址就可以不通过前端，直接去发送请求来实现相关功能操作。</p><p>​所以我们还需要在后台进行用户权限的判断，判断当前用户是否有相应的权限，必须具有所需权限才能进行相应的操作。</p><h1 id="授权的基本流程"><a href="#授权的基本流程" class="headerlink" title="授权的基本流程"></a>授权的基本流程</h1><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E6%8E%88%E6%9D%83%5Cimage-20211214144425527.png" alt="image-20211214144425527"></p><p>在<code>SpringSecurity</code>中，会使用默认的<font color="blue"><code>FilterSecurityInterceptor</code></font>来进行权限校验。在<code>FilterSecurityInterceptor</code>中会从<code>SecurityContextHolder</code>获取其中的<code>Authentication</code>，然后获取其中的权限信息。当前用户是否拥有访问当前资源所需的权限。</p><p>所以我们在项目中<strong>只需要把当前登录用户的权限信息</strong>也存入<code>Authentication</code>。</p><p>然后设置我们的资源所需要的权限即可。</p><p>在讲解<a href="https://luckydog-tjs.vercel.app/post/e123c807.html"><strong>登录认证详解</strong></a>时，我们有一些遗留代码没有写，都是关于权限的。如下：</p><ul><li><p>在<code>UserDetailsService</code>接口的实现时，遗留了查询用户的权限，并封装到<code>UserDetails</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MenuMapper menuMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">//根据传入了Passward查询用户</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getUserName,username);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> service.getOne(queryWrapper);</span><br><span class="line">        <span class="comment">//如果没有查询到用户就抛出异常</span></span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(user))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;1111&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// TODO 查询对应的权限</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginUser</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在实现认证过滤器时，遗留了获取权限信息封装到<code>Authentication</code>中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//首先需要获取token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> httpServletRequest.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//判断token是否为Null</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(token)) &#123;</span><br><span class="line">            filterChain.doFilter(httpServletRequest, httpServletResponse);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如何不为空，解析token，获得了UserId</span></span><br><span class="line">        String userId;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtil.parseJWT(token);</span><br><span class="line">            userId = claims.getSubject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;toen非法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据UserId查redis获取用户数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;login:&quot;</span>+userId;</span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">LoginUser</span> <span class="operator">=</span> redisCache.getCacheObject(key);</span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(LoginUser))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//然后封装Authentication对象存入SecurityContextHolder</span></span><br><span class="line">        <span class="comment">// TODO 获取权限信息封装到Authentication中</span></span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(LoginUser,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(httpServletRequest,httpServletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>在<code>SpringSecurity</code>中，用什么表示权限？</p><p>权限其实就是 <font color="blue"><strong>带有特殊意义的字符串</strong></font>。</p></blockquote><h1 id="RBAC权限模型"><a href="#RBAC权限模型" class="headerlink" title="RBAC权限模型"></a>RBAC权限模型</h1><p><code>RBAC</code>权限模型（Role-Based Access Control）即：<font color="red"><strong>基于角色的权限控制</strong></font>。这是目前最常被开发者使用也是相对易用、通用权限模型。</p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E6%8E%88%E6%9D%83%5Cimage-20220821202618630.png" alt="image-20220821202618630"></p><p>基本表：</p><ul><li>sys_user：用户表，记录用户的基本信息。</li><li>sys_role：角色表，记录一些角色信息，比如 项目经理、程序员，项目组组长….</li><li>sys_menu：权限表，记录一些权限信息，比如，删除权限，更新权限等等…</li></ul><p>关系表：</p><ul><li>sys_user_role：用户和角色是多对多的关系，一个用户可以有多个角色，一个角色可以被多个用户所拥有【这个表描述，一个用户有哪些角色】</li><li>sys_role_menu：角色和权限也是多对多关系【这个表描述，一个角色有哪些权限】</li></ul><p>这样就可以描述了 一个用户有哪些权限了。</p><p>当我们要查询一个用户有哪些权限时，<code>SQL</code>语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">DISTINCT m.`perms`</span><br><span class="line">FROM</span><br><span class="line">sys_user_role ur</span><br><span class="line">LEFT JOIN `sys_role` r ON ur.`role_id` = r.`id`</span><br><span class="line">LEFT JOIN `sys_role_menu` rm ON ur.`role_id` = rm.`role_id`</span><br><span class="line">LEFT JOIN `sys_menu` m ON m.`id` = rm.`menu_id`</span><br><span class="line">WHERE</span><br><span class="line">user_id = 2</span><br><span class="line">AND r.`status` = 0</span><br><span class="line">AND m.`status` = 0</span><br></pre></td></tr></table></figure><h1 id="授权过程"><a href="#授权过程" class="headerlink" title="授权过程"></a>授权过程</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>建表语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS = 0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for sys_menu</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `sys_menu`;</span><br><span class="line">CREATE TABLE `sys_menu`  (</span><br><span class="line">  `id` bigint NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `menu_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;菜单名&#x27;,</span><br><span class="line">  `path` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;路由地址&#x27;,</span><br><span class="line">  `component` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;组件路径&#x27;,</span><br><span class="line">  `visible` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;菜单状态（0显示 1隐藏）&#x27;,</span><br><span class="line">  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;菜单状态（0正常 1停用）&#x27;,</span><br><span class="line">  `perms` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;权限标识&#x27;,</span><br><span class="line">  `icon` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT &#x27;#&#x27; COMMENT &#x27;菜单图标&#x27;,</span><br><span class="line">  `create_by` bigint NULL DEFAULT NULL,</span><br><span class="line">  `create_time` datetime NULL DEFAULT NULL,</span><br><span class="line">  `update_by` bigint NULL DEFAULT NULL,</span><br><span class="line">  `update_time` datetime NULL DEFAULT NULL,</span><br><span class="line">  `del_flag` int NULL DEFAULT 0 COMMENT &#x27;是否删除（0未删除 1已删除）&#x27;,</span><br><span class="line">  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;备注&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci COMMENT = &#x27;菜单表&#x27; ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of sys_menu</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `sys_menu` VALUES (2, &#x27;部门管理&#x27;, &#x27;dept&#x27;, &#x27;system/dept/index&#x27;, &#x27;0&#x27;, &#x27;0&#x27;, &#x27;system:dept:index&#x27;, &#x27;#&#x27;, NULL, NULL, NULL, NULL, 0, NULL);</span><br><span class="line">INSERT INTO `sys_menu` VALUES (3, &#x27;测试&#x27;, &#x27;test&#x27;, &#x27;system/test/index&#x27;, &#x27;0&#x27;, &#x27;0&#x27;, &#x27;system:test:index&#x27;, &#x27;#&#x27;, NULL, NULL, NULL, NULL, 0, NULL);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for sys_role</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `sys_role`;</span><br><span class="line">CREATE TABLE `sys_role`  (</span><br><span class="line">  `id` bigint NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `role_key` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;角色权限字符串&#x27;,</span><br><span class="line">  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;角色状态（0正常 1停用）&#x27;,</span><br><span class="line">  `del_flag` int NULL DEFAULT 0 COMMENT &#x27;del_flag&#x27;,</span><br><span class="line">  `create_by` bigint NULL DEFAULT NULL,</span><br><span class="line">  `create_time` datetime NULL DEFAULT NULL,</span><br><span class="line">  `update_by` bigint NULL DEFAULT NULL,</span><br><span class="line">  `update_time` datetime NULL DEFAULT NULL,</span><br><span class="line">  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;备注&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci COMMENT = &#x27;角色表&#x27; ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of sys_role</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `sys_role` VALUES (3, &#x27;CEO&#x27;, &#x27;ceo&#x27;, &#x27;0&#x27;, 0, NULL, NULL, NULL, NULL, NULL);</span><br><span class="line">INSERT INTO `sys_role` VALUES (4, &#x27;Coder&#x27;, &#x27;coder&#x27;, &#x27;0&#x27;, 0, NULL, NULL, NULL, NULL, NULL);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for sys_role_menu</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `sys_role_menu`;</span><br><span class="line">CREATE TABLE `sys_role_menu`  (</span><br><span class="line">  `role_id` bigint NOT NULL AUTO_INCREMENT COMMENT &#x27;角色ID&#x27;,</span><br><span class="line">  `menu_id` bigint NOT NULL DEFAULT 0 COMMENT &#x27;菜单id&#x27;,</span><br><span class="line">  PRIMARY KEY (`role_id`, `menu_id`) USING BTREE,</span><br><span class="line">  INDEX `menu_id`(`menu_id`) USING BTREE,</span><br><span class="line">  CONSTRAINT `menu_id` FOREIGN KEY (`menu_id`) REFERENCES `sys_menu` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,</span><br><span class="line">  CONSTRAINT `role_id` FOREIGN KEY (`role_id`) REFERENCES `sys_role` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT</span><br><span class="line">) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of sys_role_menu</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `sys_role_menu` VALUES (3, 2);</span><br><span class="line">INSERT INTO `sys_role_menu` VALUES (3, 3);</span><br><span class="line">INSERT INTO `sys_role_menu` VALUES (4, 3);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for sys_user</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `sys_user`;</span><br><span class="line">CREATE TABLE `sys_user`  (</span><br><span class="line">  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,</span><br><span class="line">  `user_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;用户名&#x27;,</span><br><span class="line">  `nick_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;昵称&#x27;,</span><br><span class="line">  `password` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;密码&#x27;,</span><br><span class="line">  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;账号状态（0正常 1停用）&#x27;,</span><br><span class="line">  `email` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">  `phonenumber` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;手机号&#x27;,</span><br><span class="line">  `sex` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;用户性别（0男，1女，2未知）&#x27;,</span><br><span class="line">  `avatar` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;头像&#x27;,</span><br><span class="line">  `user_type` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT &#x27;1&#x27; COMMENT &#x27;用户类型（0管理员，1普通用户）&#x27;,</span><br><span class="line">  `create_by` bigint NULL DEFAULT NULL COMMENT &#x27;创建人的用户id&#x27;,</span><br><span class="line">  `create_time` datetime NULL DEFAULT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `update_by` bigint NULL DEFAULT NULL COMMENT &#x27;更新人&#x27;,</span><br><span class="line">  `update_time` datetime NULL DEFAULT NULL COMMENT &#x27;更新时间&#x27;,</span><br><span class="line">  `del_flag` int NULL DEFAULT 0 COMMENT &#x27;删除标志（0代表未删除，1代表已删除）&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci COMMENT = &#x27;用户表&#x27; ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of sys_user</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `sys_user` VALUES (3, &#x27;TJS&#x27;, &#x27;111&#x27;, &#x27;$2a$10$1s.BtZ6Ay/nU7VB/cgaTv.PiYezHYWOLntRsUqFgter/hsMDViZ0K&#x27;, &#x27;0&#x27;, NULL, NULL, NULL, NULL, &#x27;1&#x27;, NULL, NULL, NULL, NULL, 0);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for sys_user_role</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `sys_user_role`;</span><br><span class="line">CREATE TABLE `sys_user_role`  (</span><br><span class="line">  `user_id` bigint NOT NULL AUTO_INCREMENT COMMENT &#x27;用户id&#x27;,</span><br><span class="line">  `role_id` bigint NOT NULL DEFAULT 0 COMMENT &#x27;角色id&#x27;,</span><br><span class="line">  PRIMARY KEY (`user_id`, `role_id`) USING BTREE,</span><br><span class="line">  INDEX `rold_id`(`role_id`) USING BTREE,</span><br><span class="line">  CONSTRAINT `rold_id` FOREIGN KEY (`role_id`) REFERENCES `sys_role` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,</span><br><span class="line">  CONSTRAINT `user_id` FOREIGN KEY (`user_id`) REFERENCES `sys_user` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of sys_user_role</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `sys_user_role` VALUES (3, 3);</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS = 1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建<font color="red"><strong>权限实体类</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(value=&quot;sys_menu&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Menu</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">54979041104113736L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String menuName;<span class="comment">//菜单名</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String path;<span class="comment">//路由地址</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String component;<span class="comment">//组件路径</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String visible;<span class="comment">//菜单状态（0显示 1隐藏）</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String status;<span class="comment">//菜单状态（0正常 1停用）</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String perms;<span class="comment">//权限标识</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> String icon; <span class="comment">//菜单图标</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long updateBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;<span class="comment">//是否删除（0未删除 1已删除）</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> String remark;<span class="comment">//备注</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="从数据库查询权限信息"><a href="#从数据库查询权限信息" class="headerlink" title="从数据库查询权限信息"></a>从数据库查询权限信息</h2><p>我们只需要根据<font color="red"><strong>用户id去查询到其所对应的权限信息</strong></font>即可。</p><p>定义一个<font color="blue"><code>MenuMapper</code></font>，在Mapper包下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MenuMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Menu&gt; &#123;</span><br><span class="line">    List&lt;String&gt; <span class="title function_">selectPermsByUserId</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件在 resources&#x2F;Mapper下创建<code>MenuMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.Mapper.MenuMapper&quot;</span>&gt;</span><span class="comment">&lt;!--注意这个命名空间别出错--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPermsByUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            DISTINCT m.`perms`</span><br><span class="line">        FROM</span><br><span class="line">            sys_user_role ur</span><br><span class="line">                LEFT JOIN `sys_role` r ON ur.`role_id` = r.`id`</span><br><span class="line">                LEFT JOIN `sys_role_menu` rm ON ur.`role_id` = rm.`role_id`</span><br><span class="line">                LEFT JOIN `sys_menu` m ON m.`id` = rm.`menu_id`</span><br><span class="line">        WHERE</span><br><span class="line">            user_id = #&#123;userid&#125;<span class="comment">&lt;!--user_id需要使用占位符--&gt;</span></span><br><span class="line">          AND r.`status` = 0</span><br><span class="line">          AND m.`status` = 0</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在配置文件中，配置如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/Mapper/**/*.xml</span></span><br><span class="line">  <span class="comment">#这表明 classpath下，Mapper包中，任意层级包，任意以xml为结尾的文件。</span></span><br></pre></td></tr></table></figure><p>然后我们要修改UserDetails的实现类</p><p>因为我们要把权限信息封装进去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="comment">//@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginUser</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; permissions;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储SpringSecurity所需要的权限信息的集合</span></span><br><span class="line">    <span class="meta">@JSONField(serialize = false)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;SimpleGrantedAuthority&gt; authorities;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginUser</span><span class="params">(User user, List&lt;String&gt; permissions)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">        <span class="built_in">this</span>.permissions = permissions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">if</span>(!Objects.isNull(authorities))<span class="keyword">return</span> authorities;</span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(permissions))<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        authorities = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String permission : permissions) &#123;</span><br><span class="line">            <span class="type">SimpleGrantedAuthority</span> <span class="variable">authority</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(permission);</span><br><span class="line">            authorities.add(authority);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getUserName() ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要说明的是：</p><ul><li><p><code>private List&lt;String&gt; permissions;</code>代表权限字符串集合。</p></li><li><p><code>private List&lt;SimpleGrantedAuthority&gt; authorities;</code>代表权限集合，我们要把<code>LoginUser</code>存入到<code>Redis</code>当中，默认情况下不会将<code>SimpleGrantedAuthority</code>进行序列化的，到时候会出问题报异常，因此需要使用<code>@JSONField(serialize = false)</code>禁止让他序列化。</p></li><li><p><code>getAuthorities()</code>：这个方法是用来获取权限信息，需要返回权限信息的集合。</p><p>方法体内就是<font color="red"><strong>把<code>List&lt;String&gt;</code>转换为<code>List&lt;SimpleGrantedAuthority&gt;</code>。</strong></font></p></li><li><p><code>SimpleGrantedAuthority</code>：这个类是<code>GrantedAuthority</code>接口的实现类，<strong>构造方法是传入一个字符串</strong>。</p></li><li><p>还新增了一个构造方法。<code>public LoginUser(User user, List&lt;String&gt; permissions)</code>。</p></li></ul><p>在<code>UserDetailsService</code>接口的实现时，查询用户的权限，并封装到<code>UserDetails</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MenuMapper menuMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">//根据传入了Passward查询用户</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getUserName,username);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> service.getOne(queryWrapper);</span><br><span class="line">        <span class="comment">//如果没有查询到用户就抛出异常</span></span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(user))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;1111&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// TODO 查询对应的权限</span></span><br><span class="line">        List&lt;String&gt; list = menuMapper.selectPermsByUserId(user.getId());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginUser</span>(user,list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="封装权限信息到Authentication中。"><a href="#封装权限信息到Authentication中。" class="headerlink" title="封装权限信息到Authentication中。"></a>封装权限信息到<code>Authentication</code>中。</h2><p>此时，<code>UserDetails</code>【实现类是<code>LoginUser</code>】中已经有了全新信息。因此只需要从中获取即可。<code>LoginUser.getAuthorities()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//首先需要获取token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> httpServletRequest.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//判断token是否为Null</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(token)) &#123;</span><br><span class="line">            filterChain.doFilter(httpServletRequest, httpServletResponse);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如何不为空，解析token，获得了UserId</span></span><br><span class="line">        String userId;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtil.parseJWT(token);</span><br><span class="line">            userId = claims.getSubject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;toen非法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据UserId查redis获取用户数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;login:&quot;</span>+userId;</span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">LoginUser</span> <span class="operator">=</span> redisCache.getCacheObject(key);</span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(LoginUser))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//然后封装Authentication对象存入SecurityContextHolder</span></span><br><span class="line">        <span class="comment">// TODO 获取权限信息封装到Authentication中</span></span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(LoginUser,<span class="literal">null</span>,LoginUser.getAuthorities());</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(httpServletRequest,httpServletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="限制访问资源所需权限"><a href="#限制访问资源所需权限" class="headerlink" title="限制访问资源所需权限"></a>限制访问资源所需权限</h2><p><code>SpringSecurity</code>为我们提供了基于注解的权限控制方案，这也是我们项目中主要采用的方式。我们可以使用注解去指定访问对应的资源所需的权限。</p><p>但是要使用它我们需要先开启相关配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br></pre></td></tr></table></figure><p>然后就可以使用对应的注解。<font color="gold"><strong>@PreAuthorize</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;system:test:index&#x27;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>权限表</p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E6%8E%88%E6%9D%83%5Cimage-20220821210526692.png" alt="image-20220821210526692"></p><h1 id="权限控制方案"><a href="#权限控制方案" class="headerlink" title="权限控制方案"></a>权限控制方案</h1><h2 id="基于注解的权限控制方案"><a href="#基于注解的权限控制方案" class="headerlink" title="基于注解的权限控制方案"></a>基于注解的权限控制方案</h2><p>参考：</p><ul><li><a href="https://blog.csdn.net/qq_35067322/article/details/124207162">https://blog.csdn.net/qq_35067322/article/details/124207162</a></li><li><a href="https://www.jianshu.com/p/9f1aab4440d2">https://www.jianshu.com/p/9f1aab4440d2</a></li></ul><p><strong>Spring Security</strong>默认是关闭方法注解的，开启它只需要通过引入<font color="gold"><code>@EnableGlobalMethodSecurity</code></font>注解即可:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span>&#123;</span><br><span class="line"><span class="comment">//... </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@EnableGlobalMethodSecurity</code> 提供了以下三种方式:</p><ul><li><code>prePostEnabled</code>：基于表达式的注解</li><li><code>securedEnabled</code>：开启基于角色的注解</li><li><code>jsr250Enabled</code>：开启对JSR250的注解。</li></ul><p>可以根据需要选择使用这三种的一种或者其中几种。</p><p>下面我们大概了解一下</p><h3 id="prePostEnabled-true"><a href="#prePostEnabled-true" class="headerlink" title="prePostEnabled = true"></a><code>prePostEnabled = true</code></h3><p>开启后支持<strong>Spring EL表达式</strong>，如果没有访问方法的权限，会抛出<code>AccessDeniedException</code>，启用了如下注解：</p><ul><li><p><font color="gold"><strong>@PreAuthorize</strong></font>：进入<font color="red"><strong>方法之前</strong></font>验证授权</p><p>可以使用SPEL表达式或者调用自带的方法，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;#userId == authentication.principal.userId or hasAuthority(‘ADMIN’)&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">changePassword</span><span class="params">(<span class="type">long</span> userId )</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>表示在<code>changePassword</code>方法执行之前，判断方法参数<code>userId</code>的值是否等于<code>principal</code>中保存的当前用户的<code>userId</code>，或者当前用户是否具有<code>ROLE_ADMIN</code>权限，两种符合其一，就可以访问该 方法。</p><p>使用方法进行校验：</p><ul><li><p><code>hasAuthority</code>：只能传入一个权限，只有用户有这个权限才可以访问资源。</p></li><li><p><code>hasAnyAuthority</code>：可以传入多个权限，只有用户有其中任意一个权限都可以访问对应资源。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;admin&#x27;,&#x27;test&#x27;,&#x27;system:dept:list&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>hasRole</code>：要求有对应的角色才可以访问，但是它内部会把我们传入的参数拼接上 <strong>ROLE_</strong> 后再去比较。所以这种情况下要用用户对应的权限也要有 <strong>ROLE_</strong> 这个前缀才可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;system:dept:list&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>用户有<code>system:dept:list</code>权限是无法访问的，得有<code>ROLE_system:dept:list</code>权限才可以。</p></blockquote></li><li><p><code>hasAnyRole</code>：有任意的角色就可以访问。</p></li></ul></li><li><p><font color="gold"><strong>@PostAuthorize</strong></font>：检查授权<font color="red"><strong>方法之后</strong></font>才被执行并且可以影响执行方法的返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostAuthorize(&quot;returnObject.username == authentication.principal.nickName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CustomUser <span class="title function_">loadUserDetail</span><span class="params">(String username)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userRoleRepository.loadUserByUserName(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><font color="gold"><strong>@PostFilter</strong></font>：在方法执行之后执行，而且这里可以调用方法的返回值，然后对返回值进行过滤或处理或修改并返回</p></li><li><p><font color="gold"><strong>@PreFilter</strong></font>：在方法执行之前执行，而且这里可以调用方法的参数，然后对参数值进行过滤或处理或修改</p></li></ul><h3 id="securedEnabled-true"><a href="#securedEnabled-true" class="headerlink" title="securedEnabled=true"></a><code>securedEnabled=true</code></h3><p>主要开启了<font color="gold"><strong>@Secured</strong></font></p><p>注解规定了访问访方法的角色列表，在列表中最少指定一种角色</p><p><code>@Secured</code>在方法上指定安全性，要求 角色&#x2F;权限等 只有对应 角色&#x2F;权限 的用户才可以调用这些方法。 如果有人试图调用一个方法，但是不拥有所需的 角色&#x2F;权限，那会将会拒绝访问将引发异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Secured(&quot;ROLE_VIEWER&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SecurityContext</span> <span class="variable">securityContext</span> <span class="operator">=</span> SecurityContextHolder.getContext();</span><br><span class="line">    <span class="keyword">return</span> securityContext.getAuthentication().getName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Secured(&#123; &quot;ROLE_DBA&quot;, &quot;ROLE_ADMIN&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUsername2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Secured(&quot;ROLE_VIEWER&quot;)</code> 表示只有拥有<code>ROLE_VIEWER</code>角色的用户，才能够访问<code>getUsername()</code>方法。</p><p><code>@Secured(&#123; &quot;ROLE_DBA&quot;, &quot;ROLE_ADMIN&quot; &#125;)</code> 表示用户拥有”<code>ROLE_DBA&quot;, &quot;ROLE_ADMIN&quot;</code> 两个角色中的任意一个角色，均可访问 <code>getUsername2</code> 方法。</p><blockquote><p>@Secured,不支持Spring EL表达式</p></blockquote><h3 id="jsr250Enabled-true"><a href="#jsr250Enabled-true" class="headerlink" title="jsr250Enabled = true"></a><code>jsr250Enabled = true</code></h3><ol><li><font color="gold"><strong>@DenyAll</strong></font>：拒绝所有权限</li><li><font color="gold"><strong>@RolesAllowed</strong></font>：在功能及使用方法上与 <code>@Secured</code> 完全相同</li><li><font color="gold"><strong>@PermitAll</strong></font>：接受所有权限</li></ol><h2 id="基于配置文件的权限控制方案"><a href="#基于配置文件的权限控制方案" class="headerlink" title="基于配置文件的权限控制方案"></a>基于配置文件的权限控制方案</h2><p> 使用配置文件进行权限控制方案，适合对<strong>静态资源</strong>进行配置。</p><p>在权限可以在配置类中进行配置。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">         http.authorizeRequests().antMatchers(<span class="string">&quot;/hello&quot;</span>).hasAuthority(<span class="string">&quot;system:test:index&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="权限配置"><a href="#权限配置" class="headerlink" title="权限配置"></a>权限配置</h3><blockquote><p>参考链接：</p><p><a href="https://blog.csdn.net/qq_41865652/article/details/123685248">https://blog.csdn.net/qq_41865652/article/details/123685248</a></p><p><a href="https://blog.csdn.net/Shair911/article/details/104181917/">https://blog.csdn.net/Shair911/article/details/104181917/</a></p></blockquote><p><code>http.authorizeRequests()</code>主要是对<code>url</code>进行访问权限控制，通过这个方法来实现<code>url</code>授权操作。</p><ul><li><p><code>anyRequest()</code>，表示匹配所有的<code>url</code>请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http.authorizeRequests()</span><br><span class="line">        <span class="comment">// 匹配所有的请求，并且所有请求都需要登录认证</span></span><br><span class="line">        .anyRequest().authenticated();</span><br></pre></td></tr></table></figure></li><li><p><code>antMatcher(String regx)</code>，传递一个<code>ant</code>表达式参数，表示匹配所有满足<code>ant</code>表达式的请求</p><ul><li><p><strong>ant表达式中特殊字符解释</strong></p><table><thead><tr><th>规则</th><th>解释说明</th></tr></thead><tbody><tr><td>？</td><td>匹配一个字符</td></tr><tr><td>*</td><td>匹配0个或多个字符</td></tr><tr><td>**</td><td>匹配0个或多个目录</td></tr></tbody></table><p>配置类代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">http.authorizeRequests()</span><br><span class="line">        <span class="comment">// 允许登录页面匿名访问</span></span><br><span class="line">        .antMatchers(<span class="string">&quot;/showLogin&quot;</span>, <span class="string">&quot;/errPage&quot;</span>).anonymous()</span><br><span class="line">        <span class="comment">// 所有的静态资源允许匿名访问</span></span><br><span class="line">        .antMatchers(</span><br><span class="line">                <span class="string">&quot;/css/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/js/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/images/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/fonts/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/favicon.ico&quot;</span></span><br><span class="line">                ).anonymous()</span><br><span class="line">        <span class="comment">// 其他所有的请求都需要登录认证</span></span><br><span class="line">        .anyRequest().authenticated();</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>antMatcher(HttpMethod.*, String regx)</code>，传递一个请求方法类型参数加ant表达式参数，表示匹配所有满足ant表达式的指定请求方式的<code>url</code></p><p>请求方式的枚举类如下：</p><p><img src="/%5Cimage%5Carticle%5CSpringSecurity%E9%85%8D%E7%BD%AE%E7%B1%BB%5Cimage-20220822175402125.png" alt="image-20220822175402125"></p><p>配置类代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http.authorizeRequests()</span><br><span class="line">    <span class="comment">// 允许GET请求登录页面匿名访问</span></span><br><span class="line">    .antMatchers(HttpMethod.GET, <span class="string">&quot;/showLogin&quot;</span>, <span class="string">&quot;/errPage&quot;</span>).anonymous();</span><br></pre></td></tr></table></figure></li></ul><h3 id="访问控制方法"><a href="#访问控制方法" class="headerlink" title="访问控制方法"></a>访问控制方法</h3><table><thead><tr><th align="center">方法名称</th><th align="center">方法作用</th></tr></thead><tbody><tr><td align="center"><code>permitAll()</code></td><td align="center">表示所匹配的URL任何人都允许访问</td></tr><tr><td align="center"><code>anonymous()</code></td><td align="center">表示可以<strong>匿名访问</strong>匹配的URL。和<code>permitAll()</code>效果类似，只是设置为<code>anonymous()</code>的url会执行<code>filterChain</code>中的filter</td></tr><tr><td align="center"><code>denyAll()</code></td><td align="center">表示所匹配的URL都不允许被访问。</td></tr><tr><td align="center"><code>authenticated()</code></td><td align="center">表示所匹配的URL都需要被认证才能访问</td></tr><tr><td align="center"><code>rememberMe()</code></td><td align="center">允许通过remember-me登录的用户访问</td></tr><tr><td align="center"><code>access()</code></td><td align="center"><code>SpringEl</code>表达式结果为true时可以访问</td></tr><tr><td align="center"><code>fullyAuthenticated()</code></td><td align="center">用户完全认证可以访问（非remember-me下自动登录）</td></tr><tr><td align="center"><code>hasRole()</code></td><td align="center">如果有参数，参数表示角色，则其角色可以访问</td></tr><tr><td align="center"><code>hasAnyRole()</code></td><td align="center">如果有参数，参数表示角色，则其中任何一个角色可以访问</td></tr><tr><td align="center"><code>hasAuthority()</code></td><td align="center">如果有参数，参数表示权限，则其权限可以访问</td></tr><tr><td align="center"><code>hasAnyAuthority()</code></td><td align="center">如果有参数，参数表示权限，则其中任何一个权限可以访问</td></tr><tr><td align="center"><code>hasIpAddress()</code></td><td align="center">如果有参数，参数表示<code>IP</code>地址，如果用户<code>IP</code>和参数匹配，则可以访问</td></tr></tbody></table><p>配置案例示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//任何用户都可以访问</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/index&quot;</span>).permitAll();</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/index&quot;</span>).access(<span class="string">&quot;permitAll&quot;</span>);]</span><br><span class="line"></span><br><span class="line"><span class="comment">//任何用户都不能访问</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/home&quot;</span>).denyAll();</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/home&quot;</span>).access(<span class="string">&quot;denyAll&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//认证用户可以访问（除了匿名认证）</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).authenticated();</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).access(<span class="string">&quot;authenticated&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//认证用户可以访问（除了匿名认证，记住我）</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).fullyAuthenticated();</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).access(<span class="string">&quot;fullyAuthenticated&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//记住我的认证可以访问</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).rememberMe();</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).access(<span class="string">&quot;rememberMe&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名用户可以访问</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).anonymous();</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).access(<span class="string">&quot;anonymous&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否有权限</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/index&quot;</span>).hasAuthority(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/index&quot;</span>).access(<span class="string">&quot;hasAuthority(&#x27;user&#x27;)&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否有任意一个权限</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/home&quot;</span>).hasAnyAuthority(<span class="string">&quot;update&quot;</span>, <span class="string">&quot;delete&quot;</span>, <span class="string">&quot;insert&quot;</span>);</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/home&quot;</span>).access(<span class="string">&quot;hasAnyAuthority(&#x27;update&#x27;,&#x27;delete&#x27;,&#x27;insert&#x27;)&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//spring security中的role并非是一个或多个权限的集合，而是权限的一种，通常以ROLE_开头</span></span><br><span class="line"><span class="comment">//role就是ROLE_开头的权限</span></span><br><span class="line"><span class="comment">//注意：hasRole、hasAnyRole里面的role不需要以ROLE_开头，否则会报异常</span></span><br><span class="line"><span class="comment">//注意：如果在access里面使用hasRole、hasAnyRole则ROLE_前缀可加，可不加</span></span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/index&quot;</span>).hasRole(<span class="string">&quot;GUEST&quot;</span>);</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/index&quot;</span>).access(<span class="string">&quot;hasRole(&#x27;GUEST&#x27;)&quot;</span>);</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/admin&quot;</span>).hasAuthority(<span class="string">&quot;ROLE_GUEST&quot;</span>);</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/home&quot;</span>).hasAnyRole(<span class="string">&quot;GUEST&quot;</span>, <span class="string">&quot;USER&quot;</span>, <span class="string">&quot;ADMIN&quot;</span>);</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">&quot;/home&quot;</span>).access(<span class="string">&quot;hasAnyRole(&#x27;ROLE_GUEST&#x27;,&#x27;ROLE_USER&#x27;,&#x27;ROLE_ADMIN&#x27;)&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="hasAuthority-源码解读"><a href="#hasAuthority-源码解读" class="headerlink" title="hasAuthority 源码解读"></a>hasAuthority 源码解读</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">SecurityExpressionRoot</span> <span class="keyword">implements</span> <span class="title class_">SecurityExpressionOperations</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SecurityExpressionRoot</span><span class="params">(Authentication authentication)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (authentication == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Authentication object cannot be null&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.authentication = authentication;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">hasAuthority</span><span class="params">(String authority)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.hasAnyAuthority(authority);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">hasAnyAuthority</span><span class="params">(String... authorities)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.hasAnyAuthorityName((String)<span class="literal">null</span>, authorities);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到 <code>hasAuthority() </code>方法存在于<code>SecurityExpressionRoot</code>类中，返回的是布尔类型。</p><p>它调用了<code>hasAnyAuthority()</code>方法。而它又进一步调用了<code>this.hasAnyAuthorityName((String)null, authorities)</code>。</p><p><code>hasAnyAuthorityName</code>源码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">hasAnyAuthorityName</span><span class="params">(String prefix, String... roles)</span> &#123;</span><br><span class="line">    Set&lt;String&gt; roleSet = <span class="built_in">this</span>.getAuthoritySet();</span><br><span class="line">    String[] var4 = roles;</span><br><span class="line">    <span class="type">int</span> <span class="variable">var5</span> <span class="operator">=</span> roles.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="number">0</span>; var6 &lt; var5; ++var6) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">role</span> <span class="operator">=</span> var4[var6];</span><br><span class="line">        <span class="type">String</span> <span class="variable">defaultedRole</span> <span class="operator">=</span> getRoleWithDefaultPrefix(prefix, role);</span><br><span class="line">        <span class="keyword">if</span> (roleSet.contains(defaultedRole)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入了两个参数：<strong>前缀字符串</strong> 和 **权限字符串(可变参数)**。</p><ol><li><code>Set&lt;String&gt; roleSet = this.getAuthoritySet();</code>获取权限集合，也就是访问该接口，需要哪些权限。</li><li><code>String[] var4 = roles;</code>，这是我们传入的权限，代表用户具有哪些权限。</li><li>然后遍历该权限数组<ol><li><code>String role = var4[var6]</code>获取权限。</li><li><code>String defaultedRole = getRoleWithDefaultPrefix(prefix, role);</code>将前缀和权限名拼接，由于传进来的前缀字符串为null,所以拼接之后不变。</li><li><code>if (roleSet.contains(defaultedRole))return true</code>，如果所需权限集合包含该权限返回true。</li></ol></li><li><code>return false;</code></li></ol><blockquote><p> 由此可见，它内部其实是调用<code>authentication</code>的<code>getAuthorities</code>方法获取用户的权限列表。然后判断我们存入的方法参数数据在权限列表中。</p></blockquote><h2 id="自定义权限校验方法"><a href="#自定义权限校验方法" class="headerlink" title="自定义权限校验方法"></a>自定义权限校验方法</h2><p>如果要自定义权限校验方法</p><p>只需要定义一个类，该类<font color="red"><strong>使用注解注入到Spring容器中</strong></font>。</p><p>然后在类中定义一个方法，让它的<font color="red"><strong>返回值为布尔类型</strong></font>即可。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;ex&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SGExpressionRoot</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasAuthority</span><span class="params">(String authority)</span>&#123;</span><br><span class="line">        <span class="comment">//获取当前用户的权限</span></span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authentication.getPrincipal();</span><br><span class="line">        List&lt;String&gt; permissions = loginUser.getPermissions();</span><br><span class="line">        <span class="comment">//判断用户权限集合中是否存在authority</span></span><br><span class="line">        <span class="keyword">return</span> permissions.contains(authority);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们使用时，需要使用<code>SPEL</code>表达式，</p><p><font color="blue"><code>@Bean的名字</code></font>就可以获取容器中的Bean，然后就可以使用当中的方法。</p><p><font color="blue"><code>@Component(&quot;ex&quot;)</code></font>可以指定Bean的名字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;@ex.hasAuthority(&#x27;system:dept:list&#x27;)&quot;)</span><span class="comment">//@ex相当于获取容器中bean的名字为ex的对象</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">使用Spring-Security进行授权的流程【三更草堂课程笔记】</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/category/Spring/"/>
    
    
    <category term="Spring-Security" scheme="http://example.com/tag/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Security登录认证详解</title>
    <link href="http://example.com/post/e123c807.html"/>
    <id>http://example.com/post/e123c807.html</id>
    <published>2022-08-18T05:52:35.000Z</published>
    <updated>2022-08-22T07:30:32.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="登录校验过程"><a href="#登录校验过程" class="headerlink" title="登录校验过程"></a>登录校验过程</h1><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%5Cimage-20211215094003288.png" alt="image-20211215094003288"></p><h1 id="原理初探"><a href="#原理初探" class="headerlink" title="原理初探"></a>原理初探</h1><p>想要知道如何实现自己的登陆流程就必须要先知道入门案例中<code>SpringSecurity</code>的流程。</p><h2 id="SpringSecurity完整流程"><a href="#SpringSecurity完整流程" class="headerlink" title="SpringSecurity完整流程"></a>SpringSecurity完整流程</h2><p><code>SpringSecurity</code>的原理其实就是一个<font color="red"><strong>过滤器链</strong></font>，内部包含了提供各种功能的过滤器。</p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%5Cimage-20211214144425527.png" alt="image-20211214144425527"></p><p><font color="red"><strong>图中只展示了核心过滤器</strong></font>，其它的非核心过滤器并没有在图中展示。</p><ul><li><code>UsernamePasswordAuthenticationFilter</code>:负责处理我们在登陆页面填写了用户名密码后的登陆请求。入门案例的认证工作主要有它负责。【判断你的用户名和密码是否正确】</li><li><code>ExceptionTranslationFilter</code>：处理过滤器链中抛出的任何<code>AccessDeniedException</code>和<code>AuthenticationException</code> 。【处理认证授权过程中的所有异常，方便统一处理】</li><li><code>FilterSecurityInterceptor</code>：负责权限校验的过滤器。【它会判断你登录成功的用户是“谁”，“你”具有什么权限，当前访问的资源需要什么权限】</li></ul><p>可以通过Debug查看当前系统中SpringSecurity过滤器链中有哪些过滤器及它们的顺序。</p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%5Cimage-20211214145824903.png" alt="image-20211214145824903"></p><p>我们可以看到一共有15个过滤器。大概了解几个过滤器：</p><p><code>DefaultLoginPageGeneratingFilter</code>：默认登录页就是这个过滤器显示出来的，如果不想要默认登录页，就去掉这个过滤器就可以了。</p><p><code>DefaultLogoutPageGeneratingFilter</code>：用来显示默认注销的页面</p><h2 id="认证流程详解"><a href="#认证流程详解" class="headerlink" title="认证流程详解"></a>认证流程详解</h2><p><code>UsernamePasswordAuthenticationFilter</code>这个过滤器来实现认证过程逻辑的。实际上不是它这一个类就实现了，它还通过其他类来帮助他实现的，下图就是该过滤器内部实现大致流程。</p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%5Cimage-20211214151515385.png" alt="image-20211214151515385"></p><p>过程详解：</p><p>当前端提交用户名和密码过来时，进入了<code>UsernamePasswordAuthenticationFilter</code>过滤器。</p><ul><li><p>在<code>UsernamePasswordAuthenticationFilter</code>过滤器里，将传进来的用户名和密码被封装成了<font color="blue"><strong><code>Authentication</code></strong></font>对象【这时候最多只有用户名和密码，权限还没有】，<font color="blue"><strong><code>Authentication</code></strong></font>对象通过<font color="green"><strong><code>ProviderManager</code>的<code>authenticate</code>方法</strong></font>进行认证。</p><ul><li><p>在<font color="green"><strong><code>ProviderManager</code></strong></font>里面，通过调用<code>DaoAuthenticationProvider</code>的<code>authenticate</code>方法进行认证。</p><ul><li><p>在<code>DaoAuthenticationProvider</code>里，调用<font color="orange"><strong><code>InMemoryUserDetailsManager</code>的<code>loadUserByUsername</code>方法</strong></font>查询用户。【传入的参数只有<font color="red"><strong>用户名字符串</strong></font>】</p><ul><li>在<font color="orange"><strong><code>InMemoryUserDetailsManager</code>的<code>loadUserByUsername</code>方法</strong></font>里执行了以下操作<ol><li>根据用户名查询对于用户以及这个用户的权限信息【<font color="red"><strong>在内存里查</strong></font>】</li><li>把对应的用户信息包括权限信息封装成<font color="DarkVoilet"><strong><code>UserDetails</code>对象</strong></font>。</li><li>返回<font color="DarkVoilet"><strong><code>UserDetails</code>对象</strong></font>。</li></ol></li></ul></li><li><p>返回给了<code>DaoAuthenticationProvider</code>，在这个对象里执行了以下操作</p><ol><li>通过<font color="DarkTurquoise"><strong><code>PasswordEncoder</code></strong></font>对比<font color="DarkVoilet"><strong><code>UserDetails</code></strong></font>中的密码和<font color="blue"><strong><code>Authentication</code></strong></font>密码是否正确。【<font color="red"><strong>校验密码（经过加密的）</strong></font>】</li><li>如果正确就把<font color="DarkVoilet"><strong><code>UserDetails</code></strong></font>的<strong>权限信息</strong>设置到<font color="blue"><strong><code>Authentication</code></strong></font>对象中。</li><li>返回<font color="blue"><strong><code>Authentication</code></strong></font>对象。</li></ol></li></ul></li></ul></li><li><p>又回到了过滤器里面<code>UsernamePasswordAuthenticationFilter</code>。</p><ol><li><p>如果上一步返回了<font color="blue"><strong><code>Authentication</code></strong></font>对象</p><p>就使用**<code>SecurityContextHolder.getContext().setAuthentication()</code>**方法存储对象。</p><p><strong>其他过滤器</strong>会通过<code>SecurityContextHolder</code>来获取当前用户信息。【当前过滤器认证完了，后面的过滤器还需要获取用户信息，比如授权过滤器】</p></li></ol></li></ul><blockquote><p>彩色字体的类均是比较重要的<font color="red"><strong>接口</strong></font>，在实现认证的过程中均需要自定义一个类来重新实现或者变更为Spring中其他实现类。</p></blockquote><p>概念速查：</p><ul><li><p><font color="blue"><strong><code>Authentication</code></strong></font>接口: 它的实现类，表示当前访问系统的用户，<font color="red"><strong>封装了用户的权限等相关信息。</strong></font></p></li><li><p><font color="green"><strong><code>AuthenticationManager</code></strong></font>接口：定义了认证Authentication的方法 ,实现类是<font color="green"><strong><code>ProviderManager</code></strong></font></p><ul><li>它的实现类是<font color="green"><strong><code>ProviderManager</code></strong></font>，它的功能主要是实现<font color="red"><strong>认证用户</strong></font>，因为在写登录接口时，可以通过配置类的方式，注入Spring容器中来使用它的**<code>authenticate</code>方法**。</li></ul></li><li><p><font color="orange"><strong><code>UserDetailsService</code></strong></font>接口：加载用户特定数据的核心接口。里面定义了一个<font color="red"><strong>根据用户名查询用户信息的方法</strong></font>。</p><ul><li>原本的实现类是<font color="orange"><strong><code>InMemoryUserDetailsManager</code></strong></font>，它是在内存中查询，因为我们需要自定义改接口。</li></ul></li><li><p><font color="DarkVoilet"><strong><code>UserDetails</code></strong></font>接口：提供核心用户信息。通过<font color="orange"><strong><code>UserDetailsService</code></strong></font>根据用户名获取处理的用户信息要封装成<font color="DarkVoilet"><strong><code>UserDetails</code></strong></font>对象返回。然后将这些信息封装到<font color="blue"><strong><code>Authentication</code></strong></font>对象中。</p><ul><li>当我们自定义<font color="orange"><strong><code>UserDetailsService</code></strong></font>接口时，需要我们定义一个<font color="red"><strong>实体类</strong></font>来实现这个接口来供<font color="orange"><strong><code>UserDetailsService</code></strong></font>接口返回。【注意是实体类】</li></ul></li></ul><h1 id="实现登录认证"><a href="#实现登录认证" class="headerlink" title="实现登录认证"></a>实现登录认证</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p><font color="blue" size=5><strong>登录</strong></font></p><p>​①自定义登录接口  <img src="/%5Cimage%5Carticle%5CSpring-Security%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%5CIMG_0414(20220818-140941).PNG" alt="IMG_0414(20220818-140941)"></p><p>​调用<code>ProviderManager</code>的方法进行认证 如果认证通过生成<code>jwt</code></p><p>​把用户信息存入<code>redis</code>中【<code>userId</code>作为Key，用户信息作为Value】</p><p>​②自定义<code>UserDetailsService </code></p><p>​【因为原本这个<strong>接口的实现类</strong>是<strong>在内存中查询用户信息</strong>，不符合我们的要求，所以需要我们自己去实现它来自定义】</p><p>​在这个实现类中去查询数据库 </p><p><font color="blue" size=5><strong>校验</strong></font>：【校验的话，需要我们自己去<strong>自定义一个过滤器</strong>】</p><img src="\image\article\Spring-Security登录认证\IMG_0415(20220818-141117).PNG" alt="IMG_0415(20220818-141117)" style="zoom: 80%;" /><p>​①定义<code>Jwt</code>认证过滤器</p><p>​获取token</p><p>​解析token获取其中的<code>userid</code></p><p>​从<code>redis</code>中获取用户信息【如果每次请求都查询数据库就很浪费时间】</p><p>​存入<code>SecurityContextHolder</code></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><ul><li><p><code>spring-boot-starter-security</code></p></li><li><p><code>JWT</code></p></li><li><p><code>spring-boot-starter-data-redis</code></p></li><li><p><code>fastjson</code></p></li><li><p><code>mybatis-plus</code></p></li><li><p><code>mysql-connector-java</code></p></li><li><p><code>lombok</code></p><p>对于<code>JWT</code>，由于版本原因还需要引入以下maven坐标。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="配置文件【数据库和redis】"><a href="#配置文件【数据库和redis】" class="headerlink" title="配置文件【数据库和redis】"></a>配置文件【<code>数据库</code>和<code>redis</code>】</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.37.131:3306/Security?characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.37</span><span class="number">.131</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span>   <span class="comment">#默认端口号</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span> <span class="comment">#默认提供了16个数据库（可以在配置文件中改） 默认操作0号数据库，可以在命令行 select 1 选择1号数据库，</span></span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="comment">#Redis连接池配置</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span> <span class="comment">#最大链接数</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">1ms</span> <span class="comment">#连接池最大阻塞等待时间</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">4</span>   <span class="comment">#连接池的最大空闲连接</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span>   <span class="comment">#连接池的最小空闲连接</span></span><br></pre></td></tr></table></figure><h3 id="添加配置类"><a href="#添加配置类" class="headerlink" title="添加配置类"></a>添加配置类</h3><p><code>Redis</code>的配置类</p><blockquote><p>Key序列化为String,Value序列化为json</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis使用FastJson序列化</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sg</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastJsonRedisSerializer</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">RedisSerializer</span>&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Charset</span> <span class="variable">DEFAULT_CHARSET</span> <span class="operator">=</span> Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; clazz;</span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FastJsonRedisSerializer</span><span class="params">(Class&lt;T&gt; clazz)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.clazz = clazz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] serialize(T t) <span class="keyword">throws</span> SerializationException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> SerializationException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bytes == <span class="literal">null</span> || bytes.length &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes, DEFAULT_CHARSET);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(str, clazz);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> JavaType <span class="title function_">getJavaType</span><span class="params">(Class&lt;?&gt; clazz)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeFactory.defaultInstance().constructType(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(value = &#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span></span><br><span class="line">    &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="type">FastJsonRedisSerializer</span> <span class="variable">serializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastJsonRedisSerializer</span>(Object.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setValueSerializer(serializer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Hash的key也采用StringRedisSerializer的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setHashValueSerializer(serializer);</span><br><span class="line"></span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>Mybatis-plus</code>，要在启动类上加上<font color="gold"><strong>@MapperScan</strong></font>注解，来配置Mapper扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.Mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Demo1Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="响应类"><a href="#响应类" class="headerlink" title="响应类"></a>响应类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseResult</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提示信息，如果有错误时，前端可以获取该字段进行提示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询到的结果数据，</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, String msg, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><p><code>JWt</code>的工具类还有<code>Redis</code>的工具类。【针对于工具类，我觉得有必要总结一个博客，以后开发肯定是常用的。代码太长就不贴了】</p><p><code>Redis</code>工具类使用<font color="gold"><strong>@Component</strong></font>注解来注入到Spring容器中。</p><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户表(User)实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;sys_user&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">40356785423868312L</span>;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;<span class="comment">//主键</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String userName;<span class="comment">//用户名</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String nickName;<span class="comment">//昵称</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">//密码</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String status;<span class="comment">//账号状态（0正常 1停用）</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String email;<span class="comment">// 邮箱</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String phonenumber;<span class="comment">//手机号</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String sex;<span class="comment">//用户性别（0男，1女，2未知）</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String avatar;<span class="comment">//头像</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String userType;<span class="comment">//用户类型（0管理员，1普通用户）</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long createBy;<span class="comment">//创建人的用户id</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Date createTime;<span class="comment">//创建时间</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> Long updateBy;<span class="comment">//更新人</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Date updateTime;<span class="comment">//更新时间</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;<span class="comment">//删除标志（0代表未删除，1代表已删除）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建一个用户表"><a href="#创建一个用户表" class="headerlink" title="创建一个用户表"></a>创建一个用户表</h3><p>建表语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `sys_user` (</span><br><span class="line">  `id` BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,</span><br><span class="line">  `user_name` VARCHAR(64) NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;用户名&#x27;,</span><br><span class="line">  `nick_name` VARCHAR(64) NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;昵称&#x27;,</span><br><span class="line">  `password` VARCHAR(64) NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;密码&#x27;,</span><br><span class="line">  `status` CHAR(1) DEFAULT &#x27;0&#x27; COMMENT &#x27;账号状态（0正常 1停用）&#x27;,</span><br><span class="line">  `email` VARCHAR(64) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">  `phonenumber` VARCHAR(32) DEFAULT NULL COMMENT &#x27;手机号&#x27;,</span><br><span class="line">  `sex` CHAR(1) DEFAULT NULL COMMENT &#x27;用户性别（0男，1女，2未知）&#x27;,</span><br><span class="line">  `avatar` VARCHAR(128) DEFAULT NULL COMMENT &#x27;头像&#x27;,</span><br><span class="line">  `user_type` CHAR(1) NOT NULL DEFAULT &#x27;1&#x27; COMMENT &#x27;用户类型（0管理员，1普通用户）&#x27;,</span><br><span class="line">  `create_by` BIGINT(20) DEFAULT NULL COMMENT &#x27;创建人的用户id&#x27;,</span><br><span class="line">  `create_time` DATETIME DEFAULT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `update_by` BIGINT(20) DEFAULT NULL COMMENT &#x27;更新人&#x27;,</span><br><span class="line">  `update_time` DATETIME DEFAULT NULL COMMENT &#x27;更新时间&#x27;,</span><br><span class="line">  `del_flag` INT(11) DEFAULT &#x27;0&#x27; COMMENT &#x27;删除标志（0代表未删除，1代表已删除）&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=INNODB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COMMENT=&#x27;用户表&#x27;</span><br></pre></td></tr></table></figure><p>OK准备工作就完成了….</p><h2 id="核心代码实现"><a href="#核心代码实现" class="headerlink" title="核心代码实现"></a>核心代码实现</h2><h3 id="数据库校验用户"><a href="#数据库校验用户" class="headerlink" title="数据库校验用户"></a>数据库校验用户</h3><p>首先你要写好<code>UserMapper</code>接口，来实现用户查询。</p><p>我们要创建一个类<code>UserDetailsServiceImpl</code>来实现<font color="orange"><strong><code>UserDetailsService</code></strong></font>接口，来让它实现在数据库里面查询，因为它原本的实现类是查询内存的。【在Service包中】</p><p>这个接口要使用<font color="gold"><strong>@Service</strong></font>注解，注入到Spring容器中。</p><p>重写**<code>loadUserByUsername</code>**方法，传入了<code>Username</code>参数</p><ol><li><p>首先要根据传入的<code>Username</code>参数，查询数据库</p></li><li><p>如果没有这个用户<code>Objects.isNull(user)</code>，就抛出异常</p></li><li><p>根据用户查询权限信息 </p></li><li><p>添加到**<code>UserDetails</code>接口的实现类**中</p><ol><li><p>在domain包中创建类<code>LoginUser</code>，实现<code>UserDetails</code>接口。</p></li><li><p>完整代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginUser</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;<span class="keyword">return</span> user.getPassword();&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;<span class="keyword">return</span> user.getUserName();&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><p><font size=4><code>UserDetailsServiceImpl</code>实现类如下</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">//根据传入了Passward查询用户</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getUserName,username);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> service.getOne(queryWrapper);</span><br><span class="line">        <span class="comment">//如果没有查询到用户就抛出异常</span></span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(user))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//TODO 查询对应的权限</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginUser</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：如果要测试，需要往用户表中写入用户数据，并且如果你想让用户的密码是明文存储，需要在密码前加{noop}。例如</p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%5Cimage-20211216123945882.png" alt="image-20211216123945882"></p><p>这样登陆的时候就可以用sg作为用户名，1234作为密码来登陆了。</p><h4 id="密码加密存储"><a href="#密码加密存储" class="headerlink" title="密码加密存储"></a>密码加密存储</h4><img src="\image\article\Spring-Security登录认证\image-20220819003356284.png" alt="image-20220819003356284" style="zoom:67%;" /><p>实际项目中我们不会把密码明文存储在数据库中。</p><p>​默认使用的<code>PasswordEncoder</code>要求数据库中的密码格式为：<code>&#123;id&#125;password </code>。它会根据id去判断密码的加密方式。但是我们一般不会采用这种方式。所以就需要替换<code>PasswordEncoder</code>。</p><p>​我们一般使用<code>SpringSecurity</code>为我们提供的<code>BCryptPasswordEncoder</code>。</p><p>​我们只需要使用把<code>BCryptPasswordEncoder</code>对象注入Spring容器中，<code>SpringSecurity</code>就会使用该<code>PasswordEncoder</code>来进行密码校验。</p><p>​我们可以定义一个<code>SpringSecurity</code>的配置类，<code>SpringSecurity</code>要求这个配置类要继承<code>WebSecurityConfigurerAdapter</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置之后，我们要将数据库<code>sys_user</code>表的用户密码，从 <strong>1234</strong>,改为加密之后的。</p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%5Cimage-20220819003102757.png" alt="image-20220819003102757"></p><p>当我们进行注册时，要将密码进行加密，我们可以将<code>PasswordEncoder</code>注入进Controller里。下面我们进行测试演示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo1ApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span> passwordEncoder.encode(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">        System.out.println(encode);<span class="comment">//$2a$10$OHOzZsC9RMCqJdWWpBzgfOfQZlEVedDXrUqHhp3HSINu4HghI59kq</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">加密后的信息是动态变化的，因为我们要使用，matches()来进行比较。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">matches</span> <span class="operator">=</span> passwordEncoder.matches(<span class="string">&quot;1234&quot;</span>, encode);</span><br><span class="line">        System.out.println(matches);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">matches2</span> <span class="operator">=</span> passwordEncoder.matches(<span class="string">&quot;12345&quot;</span>, encode);</span><br><span class="line">        System.out.println(matches2);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h3><img src="\image\article\Spring-Security登录认证\image-20220819004454194.png" alt="image-20220819004454194" style="zoom:67%;" /><p>接下我们需要自定义登陆接口。</p><ol><li><p>放行</p><p>登录接口需要<font color="red"><strong>让<code>SpringSecurity</code>对这个接口放行</strong></font>【不通过过滤器链】,让用户访问这个接口的时候不用登录也能访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...注入BCryptPasswordEncoder....</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">                <span class="comment">//关闭csrf</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="comment">//不通过Session获取SecurityContext</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 对于登录接口 允许匿名访问</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/login&quot;</span>).anonymous()<span class="comment">//允许匿名用户访问,不允许已登入用户访问</span></span><br><span class="line">                <span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口中的认证</p><ul><li><p>在接口中我们通过<font color="green"><strong><code>AuthenticationManager</code>的<code>authenticate</code></strong></font>方法来进行用户认证。</p></li><li><p>所以需要在<code>SecurityConfig</code>中配置把<code>AuthenticationManager</code>注入容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span>&#123;</span><br><span class="line">   <span class="comment">//...注入BCryptPasswordEncoder....</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//配置放行....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><font size=5><strong>流程：</strong></font></p><p>定义一个<code>Controller</code>，不多说了~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginService loginService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;Map&lt;String,String&gt;&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> user.getUserName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> user.getPassword();</span><br><span class="line">        <span class="keyword">return</span> loginService.login(userName,password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>loginService.login();</code>的核心流程：</p><p>注入**<code>AuthenticationManager</code>和<code>RedisCache</code>**</p><ul><li><p>调用<font color="green"><strong><code>AuthenticationManager</code>的<code>authenticate</code></strong></font>方法来进行用户认证。返回<font color="blue"><strong><code>Authentication</code></strong></font></p><ul><li><p>使用<code>authenticate</code>方法，需要传入<font color="blue"><strong><code>Authentication</code></strong></font>，但<font color="blue"><strong><code>Authentication</code></strong></font>是接口，因此需要去找它的实现类。这里我们使用它的实现类是<code>UsernamePasswordAuthenticationToken</code>。</p><blockquote><p><font color="red"><strong>传入的<code>Authentication</code>只有用户名和密码</strong></font>：</p><ul><li><code>principal</code> 属性为用户名</li><li><code>credentials</code> 属性为密码</li></ul></blockquote></li><li><p>使用<code>authenticate</code>方法，返回的<font color="blue"><strong><code>Authentication</code></strong></font>。</p><blockquote><p><font color="red"><strong>如果不为空的话，传出的<code>Authentication</code>：</strong></font></p><p><code>Principal</code>属性是<code>Userdetails</code></p><p><code>credentials</code> 属性为null</p></blockquote><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%5Cimage-20220819010124847.png" alt="image-20220819010124847"></p></li></ul></li><li><p>如果<font color="blue"><strong><code>Authentication</code></strong></font>为NULL，说明认证没通过，要么没查询到这个用户，要么密码比对不通过。然后就<strong>抛出异常</strong>。</p></li><li><p>如果认证通过，获取<code>UserId</code>，<code>JwtUtil</code>要将<code>UserId</code>加密成一个<code>toekn</code>。</p></li><li><p>将用户信息<font color="blue"><strong><code>Authentication</code></strong></font>，存入<code>redis</code>。</p></li></ul><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;Map&lt;String,String&gt;&gt; <span class="title function_">login</span><span class="params">(String userName, String password)</span> &#123;</span><br><span class="line">        <span class="comment">//调用`AuthenticationManager`的方法进行认证</span></span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authenticate</span> <span class="operator">=</span> authenticationManager.authenticate(<span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(userName, password));</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(authenticate))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果认证通过生成token</span></span><br><span class="line">            <span class="comment">//获取userid</span></span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authenticate.getPrincipal();</span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> loginUser.getUser().getId().toString();</span><br><span class="line">            <span class="comment">//生成token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.createJWT(userId);</span><br><span class="line">        <span class="comment">//authenticate存入redis</span></span><br><span class="line">        redisCache.setCacheObject(<span class="string">&quot;login:&quot;</span>+userId,loginUser);</span><br><span class="line">        <span class="comment">//把token响应给前端</span></span><br><span class="line">        HashMap&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;token&quot;</span>,token);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>&lt;Map&lt;String,String&gt;&gt;(<span class="number">200</span>,<span class="string">&quot;登陆成功&quot;</span>,map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="认证过滤器"><a href="#认证过滤器" class="headerlink" title="认证过滤器"></a>认证过滤器</h3><blockquote><p>为什么要写这么一个过滤器？</p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%5Cimage-20211214144425527.png" alt="image-20211214144425527"></p><p><code>SpringSecurity</code>自带的过滤器中是用来认证<font color="red">用户名和密码</font>的但我们并没有使用它，在配置的时候就去掉了。之前的登录接口我们生成了一个token，当前端访问后端的时候需要携带这个token。而这个过滤器就是认证<font color="red">token</font>的。</p></blockquote><p>自定义一个<strong>过滤器</strong></p><ol><li><p>获取请求头中的<code>token</code></p><ol><li><p>如果获取的<code>token</code>字符串为空，说明前端访问后端就没有携带token。然后<font color="red"><strong>放行，return</strong></font></p><blockquote><p><strong>为什么是放行而不是抛异常呢？</strong></p><p>因为没有携带token，有可能前端是想要登录，因此不能抛异常。</p><p>就算是要访问其他资源，我们直接放行，<font color="blue"><strong><code>Authentication</code></strong></font>对象没有用户任何信息，后面的过滤器也会抛出异常。后面也不会进行认证。</p></blockquote></li></ol></li><li><p>使用<code>JwtUtil</code>对<code>token</code>进行解析取出其中的<code>userid</code>。</p><p>如果<code>token</code>解析失败，说明前端携带的token不合法，就会抛出异常。</p></li><li><p>使用<code>userid</code>去<code>redis</code>中获取对应的<code>LoginUser</code>对象。</p></li><li><p>然后封装<font color="blue"><strong><code>Authentication</code></strong></font>对象存入<code>SecurityContextHolder</code>。</p><p>在封装<font color="blue"><strong><code>Authentication</code></strong></font>时，使用的实现类是<code>UsernamePasswordAuthenticationToken</code>，使用的构造方法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsernamePasswordAuthenticationToken</span> <span class="keyword">extends</span> <span class="title class_">AbstractAuthenticationToken</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">530L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object principal;</span><br><span class="line">    <span class="keyword">private</span> Object credentials;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//.....</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernamePasswordAuthenticationToken</span><span class="params">(Object principal, Object credentials, Collection&lt;? extends GrantedAuthority&gt; authorities)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(authorities);</span><br><span class="line">        <span class="built_in">this</span>.principal = principal;</span><br><span class="line">        <span class="built_in">this</span>.credentials = credentials;</span><br><span class="line">        <span class="built_in">super</span>.setAuthenticated(<span class="literal">true</span>);<span class="comment">//标志为已认证状态，这样就不用再让`UsernamePasswordAuthenticationFilter`过滤器再进行认证了。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//.....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//首先需要获取token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> httpServletRequest.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//判断token是否为Null</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(token)) &#123;</span><br><span class="line">            filterChain.doFilter(httpServletRequest, httpServletResponse);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如何不为空，解析token，获得了UserId</span></span><br><span class="line">        String userId;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtil.parseJWT(token);</span><br><span class="line">            userId = claims.getSubject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;toen非法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据UserId查redis获取用户数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;login:&quot;</span>+userId;</span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">LoginUser</span> <span class="operator">=</span> redisCache.getCacheObject(key);</span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(LoginUser))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//然后封装Authentication对象存入SecurityContextHolder</span></span><br><span class="line">        <span class="comment">//TODO 获取权限信息封装到Authentication中</span></span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(LoginUser,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(httpServletRequest,httpServletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><p>该过滤器实现的接口并不是之前的<code>Filter</code>，而是去继承<code>OncePerRequestFilter</code>。</p><p><code>OncePerRequestFilter</code>是Spring Boot里面的一个过滤器<strong>抽象类</strong>，这个过滤器抽象类通常被用于继承实现并在每次请求时<strong>只执行一次过滤</strong>。<font color="red"><strong>他能够确保在一次请求只通过一次filter，而不需要重复执行</strong></font></p><p>而<code>Servlet</code>的<code>Filter</code>可能会执行多次。</p></blockquote><p>然后我们将过滤器加到<code>UsernamePasswordAuthenticationFilter</code>的前面，在配置类中进行配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h3><p>定义一个登陆接口，然后获取<code>SecurityContextHolder</code>中的认证信息，删除<code>redis</code>中对应的数据即可。</p><p><strong>Controller层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginService loginService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">logout</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loginService.logout();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Service层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">logout</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取Authentication</span></span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authentication</span> <span class="operator">=</span> (UsernamePasswordAuthenticationToken) SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">Loginuser</span> <span class="operator">=</span> (LoginUser) authentication.getPrincipal();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> Loginuser.getUser();</span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> user.getId().toString();</span><br><span class="line">        <span class="comment">//清除cache</span></span><br><span class="line">        redisCache.deleteObject(<span class="string">&quot;login:&quot;</span>+userId);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(<span class="number">200</span>,<span class="string">&quot;注销成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>是不是感觉有点乱，让我们缕一缕。先说一下我们<font color="red"><strong>对哪些接口进行了实现，或者是更改</strong></font></p><ul><li><p>我们自定义了<font color="orange"><strong><code>UserDetailsService</code></strong></font>接口，来实现数据库查询。当中用到了**<code>UserDetails</code>接口的实现类——<code>LoginUser</code>**。</p></li><li><p>在<font color="orange"><strong><code>UserDetailsService</code></strong></font>接口是上一层面，我们需要对密码进行解密解析并对比。因为我们使用了**<code>PasswordEncoder</code>接口的其他实现类<code>BCryptPasswordEncoder</code>**。</p></li><li><p>在实现登录接口的时候</p><ul><li><p>需要<font color="green"><strong><code>AuthenticationManager</code>的<code>authenticate</code>方法</strong></font>进行认证。</p></li><li><p>传入<font color="blue"><strong><code>Authentication</code></strong></font>接口的实现类是<code>UsernamePasswordAuthenticationToken</code>。构造方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">UsernamePasswordAuthenticationToken</span><span class="params">(Object principal, Object credentials)</span></span><br></pre></td></tr></table></figure></li><li><p>这表示该<font color="blue"><strong><code>Authentication</code></strong></font>是<font color="red"><strong>未认证的</strong></font>。之后会通过<code>UsernamePasswordAuthenticationFilter</code>过滤器来认证。</p></li></ul></li><li><p>在实现认证过滤器时，</p><ul><li><p>需要使用<code>SecurityContextHolder.getContext().setAuthentication()</code>方法，将用户信息<font color="blue"><strong><code>Authentication</code></strong></font>存进去。方便其他Filter使用。</p></li><li><p>传入<font color="blue"><strong><code>Authentication</code></strong></font>接口的实现类是<code>UsernamePasswordAuthenticationToken</code>。构造方法是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">UsernamePasswordAuthenticationToken</span><span class="params">(Object principal, Object credentials, Collection&lt;? extends GrantedAuthority&gt; authorities)</span></span><br></pre></td></tr></table></figure></li><li><p>这表示该<font color="blue"><strong><code>Authentication</code></strong></font>是<font color="red"><strong>认证的</strong></font>。之后就不会通过<code>UsernamePasswordAuthenticationFilter</code>过滤器来认证。</p></li></ul></li></ul><h2 id="图例演示"><a href="#图例演示" class="headerlink" title="图例演示"></a>图例演示</h2><ol><li><p>当我们登录时</p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%5CIMG_0418(20220819-175440)-16609042254092.PNG" alt="IMG_0418(20220819-175440)"></p></li><li><p>登录之后，前端访问其他资源</p><ul><li><p>携带token</p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%5CIMG_0421(20220819-181345).PNG" alt="IMG_0421(20220819-181345)"></p><blockquote><p>通过DEBUG发现，如果携带token。</p><ul><li><p>context域中存入<font color="red"><strong>已认证的Authentication</strong></font>，就不会访问<code>UserDetailsServiceImpl</code>。</p></li><li><p>context域中存入<font color="red"><strong>未认证的Authentication</strong></font>，就会访问<code>UserDetailsServiceImpl</code>，来进行认证。</p></li></ul><p>至于为什么，我也不清楚….(￣ ‘i ￣;)</p></blockquote></li><li><p>未携带token</p><p><img src="/%5Cimage%5Carticle%5CSpring-Security%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%5Cimage-20220819181740017.png" alt="image-20220819181740017"></p></li></ul></li></ol><h1 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h1><p>在我学习这个登录认证的过程中，我一直有一个疑惑，就是感觉这个SpringSecurity自带的认证处理器好像没有”干活”的样子。</p><p>它的作用仅仅是“借用了”它内部的东西（方法）来进行认证。</p><p>到了三更老师讲到其他认证方案时，我才明白，当我们使用配置类时，就**<font color="red">去掉了<code>UsernamePasswordAuthenticationFilter</code></font>**。</p><p>因为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">super</span>.configure(http);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​看一下这个<font color="red"><code>super.configure(http);</code></font>这个父类的方法，它进行了<strong>默认的配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="built_in">this</span>.logger.debug(<span class="string">&quot;Using default configure(HttpSecurity). If subclassed this will potentially override subclass configure(HttpSecurity).&quot;</span>);</span><br><span class="line">    ((HttpSecurity)((HttpSecurity)((AuthorizedUrl)http.authorizeRequests().anyRequest())</span><br><span class="line">                    .authenticated().and())</span><br><span class="line">     .formLogin().and())<span class="comment">//formLogin()......</span></span><br><span class="line">    .httpBasic();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看这个<code>formLogin()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> FormLoginConfigurer&lt;HttpSecurity&gt; <span class="title function_">formLogin</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> (FormLoginConfigurer)<span class="built_in">this</span>.getOrApply(<span class="keyword">new</span> <span class="title class_">FormLoginConfigurer</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再查看<code>FormLoginConfigurer()</code>这个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">FormLoginConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(<span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationFilter</span>(), (String)<span class="literal">null</span>);</span><br><span class="line">    <span class="built_in">this</span>.usernameParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.passwordParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，它添加了<code>UsernamePasswordAuthenticationFilter()</code>这个过滤器。</p><p>但是我们配置的时候，去掉了<font color="red"><code>super.configure(http);</code></font>，也就是说不使用<strong>默认配置</strong>了</p><p>那也就是说，不添加了<code>UsernamePasswordAuthenticationFilter()</code>这个过滤器。所以我们根本没使用这个过滤器。</p><p><font color="blue" size=5>如果有什么问题，欢迎评论区留言，思路整理了好久…..(￣ ‘i ￣;)</font></p>]]></content>
    
    
    <summary type="html">使用Spring-Security进行登录认证的流程【三更草堂课程笔记】</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/category/Spring/"/>
    
    
    <category term="Spring-Security" scheme="http://example.com/tag/Spring-Security/"/>
    
  </entry>
  
</feed>
